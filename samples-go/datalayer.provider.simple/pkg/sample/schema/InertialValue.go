// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package schema

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type InertialValue struct {
	_tab flatbuffers.Table
}

func GetRootAsInertialValue(buf []byte, offset flatbuffers.UOffsetT) *InertialValue {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &InertialValue{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsInertialValue(buf []byte, offset flatbuffers.UOffsetT) *InertialValue {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &InertialValue{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *InertialValue) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *InertialValue) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *InertialValue) X() int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *InertialValue) MutateX(n int16) bool {
	return rcv._tab.MutateInt16Slot(4, n)
}

func (rcv *InertialValue) Y() int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *InertialValue) MutateY(n int16) bool {
	return rcv._tab.MutateInt16Slot(6, n)
}

func (rcv *InertialValue) Z() int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *InertialValue) MutateZ(n int16) bool {
	return rcv._tab.MutateInt16Slot(8, n)
}

func InertialValueStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func InertialValueAddX(builder *flatbuffers.Builder, x int16) {
	builder.PrependInt16Slot(0, x, 0)
}
func InertialValueAddY(builder *flatbuffers.Builder, y int16) {
	builder.PrependInt16Slot(1, y, 0)
}
func InertialValueAddZ(builder *flatbuffers.Builder, z int16) {
	builder.PrependInt16Slot(2, z, 0)
}
func InertialValueEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
