<?xml version="1.0" encoding="utf-8"?>
<project xmlns="http://www.plcopen.org/xml/tc6_0200">
  <fileHeader companyName="Rexroth" productName="ctrlX PLC Engineering" productVersion="ctrlX PLC 1.19.7" creationDateTime="2023-07-06T16:24:55.8607787" />
  <contentHeader name="Unbenannt7.project" modificationDateTime="2023-07-06T16:23:56.5279628">
    <coordinateInfo>
      <fbd>
        <scaling x="1" y="1" />
      </fbd>
      <ld>
        <scaling x="1" y="1" />
      </ld>
      <sfc>
        <scaling x="1" y="1" />
      </sfc>
    </coordinateInfo>
    <addData>
      <data name="http://www.3s-software.com/plcopenxml/projectinformation" handleUnknown="implementation">
        <ProjectInformation />
      </data>
    </addData>
  </contentHeader>
  <types>
    <dataTypes />
    <pous />
  </types>
  <instances>
    <configurations />
  </instances>
  <addData>
    <data name="http://www.3s-software.com/plcopenxml/application" handleUnknown="implementation">
      <resource name="Application">
        <task name="MainTask" interval="PT0.2S" priority="30">
          <pouInstance name="PLC_PRG" typeName="">
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml" />
            </documentation>
          </pouInstance>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/tasksettings" handleUnknown="implementation">
              <TaskSettings KindOfTask="Cyclic" Interval="200" IntervalUnit="ms" WithinSPSTimeSlicing="true">
                <Watchdog Enabled="false" Time="20" TimeUnit="ms" Sensitivity="1" />
              </TaskSettings>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
              <ObjectId>65f2418c-4e93-4317-8b21-baa49556b145</ObjectId>
            </data>
          </addData>
        </task>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="CheckDivLInt" pouType="function">
              <interface>
                <returnType>
                  <LINT />
                </returnType>
                <inputVars>
                  <variable name="divisor">
                    <type>
                      <LINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Divisor of the division</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="ptNull">
                    <type>
                      <pointer>
                        <baseType>
                          <BYTE />
                        </baseType>
                      </pointer>
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Nullpointer for triggering an access violation</xhtml>
                    </documentation>
                  </variable>
                  <variable name="strError">
                    <type>
                      <string />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Diagnostic text for the PLC logger entry</xhtml>
                    </documentation>
                  </variable>
                </localVars>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                    <Attributes>
                      <Attribute Name="check_div_int64" Value="" />
                      <Attribute Name="no_check" Value="" />
                    </Attributes>
                  </data>
                </addData>
                <documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> Short description:        Test function to increase machine safety by detecting unauthorized division by zero of LINT, ULINT and LWORD variables
 
 Functional description:   This function will be called implicitly before the division takes places.
                           The divisor will be checked for 0.
                           In case of 0, an error is entered in the plc logger and the application is stopped due to an access violation to avoid machine damage.
                           In this case, check the callstack (menu Debug/Callstack) and modify the faulty logic. 
 
 Handling particularities: This function increases the cycle time of all tasks using divisions.
                           The increase depends on the number of the divisions.
                           After inserting/removing this function, no online-change will be possible! 
                           A complete download will be necessary!
                           The implementation has to be adjusted to your application/machine.
                           In case of a division by zero, the PLC-Task will generate an access violation which leads to an application stop.
                           Please verify whether this default behaviour can damage your machine or lead to a complex recommissioning. 
                           In this case, adapt the error reaction to your application.
                          
                           If your application isn't too time-critical, you should leave this function whil comissioning the machine and production in your application.  
                           If you remove this function, ensure that your code is faultless.
                          
 Do not change the declaration of this function! Add only local variables.  
 Do not change the attributes above the function header!</xhtml>
                </documentation>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">    (**************************************************************************************************)
    (* The implementation has to be adjusted to your application/machine.                             *)
    (* This is an exemplary implementation of the function.                                           *)
    (* Per default, an access violation is generated to avoid machine damage                          *)
    (* Check the Call Stack (menu Debug/Callstack) and modify the faulty logic!                       *)
    (**************************************************************************************************)

IF divisor = 0 THEN
  strError:= 'CheckDivLInt: Invalid division by 0 - check the callstack';
//  Default implementation for APPLICATION WILL BE STOPPED: 
//  Set an error into the plc logger
  LogAdd2(hLogger:= CmpLog.LOG_STD_LOGGER,udiCmpID:= 16#1000,udiClassID:= LogClass.LOG_ERROR,udiErrorID:= 1,udiInfoID:= 1,pszInfo:= strError);
//  Triggering an access violation --&gt; Application will be stopped
  ptNull^ := 0;(* Triggering an access violation *)

// // Example for APPLICATION WILL NOT BE STOPPED:
// // Set the divisor to 1 
// //   --&gt; no access violation (div by zero) will be triggered
// //   --&gt; keep PLC-task running 
// // Set a warning into the plc logger
// // NOTE: There is still an implementation error in your application code!
//  
//  LogAdd2(hLogger:= CmpLog.LOG_STD_LOGGER,udiCmpID:= 16#1000,udiClassID:= LogClass.LOG_WARNING,udiErrorID:= 1,udiInfoID:= 1,pszInfo:= strError);
//  CheckDivLInt := 1; //Division by 1 instead of zero 
//  return;	

ELSE // division is ok
  CheckDivLInt:=divisor;
END_IF;</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>609648a1-2e58-455b-9c4e-d880496e9f4a</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="CheckBounds" pouType="function">
              <interface>
                <returnType>
                  <DINT />
                </returnType>
                <inputVars>
                  <variable name="index">
                    <type>
                      <DINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Index of the array, lower bound and upper bound</xhtml>
                    </documentation>
                  </variable>
                  <variable name="lower">
                    <type>
                      <DINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Index of the array, lower bound and upper bound</xhtml>
                    </documentation>
                  </variable>
                  <variable name="upper">
                    <type>
                      <DINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Index of the array, lower bound and upper bound</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="ptNull">
                    <type>
                      <pointer>
                        <baseType>
                          <BYTE />
                        </baseType>
                      </pointer>
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Nullpointer for triggering an access violation</xhtml>
                    </documentation>
                  </variable>
                  <variable name="strError">
                    <type>
                      <string />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Diagnostic text for the PLC logger entry</xhtml>
                    </documentation>
                  </variable>
                </localVars>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                    <Attributes>
                      <Attribute Name="check_bounds" Value="" />
                      <Attribute Name="no_check" Value="" />
                    </Attributes>
                  </data>
                </addData>
                <documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> Short description:      Test function to increase machine safety by checking for unauthorized array indices accesses.
 
 Functional description: This function is implicitly called prior to each array access and verifies if the access is within the valid array bounds.
                         If the access is authorized, the function returns the index to the calling POU and the access is completed.
                         If the access is unauthorized, an exception is triggered as default error reaction. This exception results in an application stop and the system is set to safe state. 
   
 Handling particularities: Sporadically, the implemented default error reaction has TO be adjusted TO the application. 
                           For example, stopping of the application can be invalid and can result in complicated recommissioning or even injury to people or damage to machines.
                           Thus, adjust the default error reaction to your application.
                           After inserting/removing this function in/from the project, no online change is possible.
                           A complete download is required.
 
 Further information:    The implicit calls of this check function are realized in all POUs but not in POUs of protected (*.compiled library) 
                         and open (*.library) libraries or in POUs with the attribute {attribute 'no_check'}. Consequently, they do not increase the runtime.
                         If the check is also to be performed in open libraries, enter the compiler definition 
                         checks_in_libs in the field Compiler-Defines of the Build tab in the property dialog of the application node.
                         An increased runtime depends on the number of programmed array accesses.
 
                         To reduce task runtimes, add the attribute 'no_check' to the POUs. 
                         Checks performed by the check functions (CheckPointer, CheckBounds, CheckDiv, CheckRange) are not performed in these POUs. 
                         Thus, these POUs have to be checked by the user regarding pointer programming, divisions and array accesses.  
                         For more information, refer to the F1-help.
 
                         In the standard implementation, it is checked if the array access takes place within the valid array boundaries.
 
                         In case of invalid access (outside the valid array boundaries), an error is entered in the PLC logger and the application is stopped to avoid injury to persons and damage to machines.
                         In this case, check the callstack (menu Debug/Callstack) and change the incorrect logic.

                         If your application is not time-critical, use this function during commissioning as well as during the production phase of the machine.
                         Only remove this function if you are sure that your user code is free from errors!
 
 Do not change the declaration of this function! Add only local variables.  
 Do not change the attributes above the function header!</xhtml>
                </documentation>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">    (*****************************************************************************************************)
    (* The implementation has to be adjusted to your application/machine.                                *)
    (* This is an exemplary implementation of the function.                                              *)
    (* Per default, an access violation is generated in case of an faulty acces to avoid machine damage. *)
    (* In this case, check the Call Stack (menu Debug/Callstack) and modify the faulty logic.            *)
    (*****************************************************************************************************)

IF  index &lt; lower THEN 
  strError:= 'CheckBounds: Lower arrayindex ';
  strError:=CONCAT(STR1:=strError  , STR2:= DINT_TO_STRING(lower));
  strError:=CONCAT(STR1:=strError  , STR2:= ' underrunned by ');
  strError:=CONCAT(STR1:=strError  , STR2:= DINT_TO_STRING(index));
//  Default implementation for APPLICATION WILL BE STOPPED: 
//  Set an error into the plc logger
  LogAdd2(hLogger:= CmpLog.LOG_STD_LOGGER,udiCmpID:= 16#1000,udiClassID:= LogClass.LOG_ERROR,udiErrorID:= 1,udiInfoID:= 1,pszInfo:= strError);
//  Triggering an access violation --&gt; Application will be stopped
  ptNull^ := 0;(* Triggering an access violation *)

// // Example for APPLICATION WILL NOT BE STOPPED:
// // Limit the faulty index to the lower index 
// //     --&gt; no memory will be overwritten
// //     --&gt; Keep PLC-task running
// // Set a warning into the plc logger
// // NOTE: There is still an implementation error in your application code!
// //  LogAdd2(hLogger:= CmpLog.LOG_STD_LOGGER,udiCmpID:= 16#1000,udiClassID:= LogClass.LOG_WARNING,udiErrorID:= 1,udiInfoID:= 1,pszInfo:= strError);
// // 
//  CheckBounds := lower; //access to the lower index only 
//  return;

ELSIF  index &gt; upper THEN
  strError:= 'CheckBounds: Higher arrayindex ';
  strError:=CONCAT(STR1:=strError  , STR2:= DINT_TO_STRING(upper));
  strError:=CONCAT(STR1:=strError  , STR2:= ' overrunned by ');
  strError:=CONCAT(STR1:=strError  , STR2:= DINT_TO_STRING(index));

//  Default implementation for APPLICATION WILL BE STOPPED: 
//  Set an error into the plc logger
  LogAdd2(hLogger:= CmpLog.LOG_STD_LOGGER,udiCmpID:= 16#1000,udiClassID:= LogClass.LOG_ERROR,udiErrorID:= 1,udiInfoID:= 1,pszInfo:= strError);
//  Triggering an access violation --&gt; Application will be stopped
  ptNull^ := 0;(* Triggering an access violation *)

// // Example for APPLICATION WILL NOT BE STOPPED:
// // Limit the faulty index to the upper index 
// //     --&gt; no memory will be overwritten
// //     --&gt; Keep PLC-task running
// // Set a warning into the plc logger
// // NOTE: There is still an implementation error in your application code!
//  LogAdd2(hLogger:= CmpLog.LOG_STD_LOGGER,udiCmpID:= 16#1000,udiClassID:= LogClass.LOG_WARNING,udiErrorID:= 1,udiInfoID:= 1,pszInfo:= strError);
// 
//  CheckBounds := upper; //access to the upper index only 
//  return;

ELSE // access to array is within lower and upper index --&gt; ok  
  CheckBounds := index;
END_IF
</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>5c57242d-0abc-44e9-a367-983e29473911</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="CheckDivLReal" pouType="function">
              <interface>
                <returnType>
                  <LREAL />
                </returnType>
                <inputVars>
                  <variable name="divisor">
                    <type>
                      <LREAL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Divisor of the division</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="ptNull">
                    <type>
                      <pointer>
                        <baseType>
                          <BYTE />
                        </baseType>
                      </pointer>
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Nullpointer for triggering an access violation</xhtml>
                    </documentation>
                  </variable>
                  <variable name="strError">
                    <type>
                      <string />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Diagnostic text for the PLC logger entry</xhtml>
                    </documentation>
                  </variable>
                </localVars>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                    <Attributes>
                      <Attribute Name="check_div_real64" Value="" />
                      <Attribute Name="no_check" Value="" />
                    </Attributes>
                  </data>
                </addData>
                <documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> Short description:        Test function to increase machine safety by detecting unauthorized division by zero of variables of type LREAL
 
 Functional description:   This function will be called implicitly before the division takes places.
                           The divisor will be checked for 0.0.
                           In case of 0.0, an error is entered in the plc logger and the application is stopped due to an access violation to avoid machine damage.
                           In this case, check the callstack (menu Debug/Callstack) and modify the faulty logic. 
 
 Handling particularities: This function increases the cycle time of all tasks using divisions.
                           The increase depends on the number of the divisions.
                           After inserting/removing this function, no online-change will be possible! 
                           A complete download will be necessary!
                           The implementation has to be adjusted to your application/machine.
                           In case of a division by zero, the PLC-Task will generate an access violation which leads to an application stop.
                           Please verify whether this default behaviour can damage your machine or lead to a complex recommissioning. 
                           In this case, adapt the error reaction to your application.
                          
                           If your application isn't too time-critical, you should leave this function whil comissioning the machine and production in your application.  
                           If you remove this function, ensure that your code is faultless.
                          
 Do not change the declaration of this function! Add only local variables.  
 Do not change the attributes above the function header!</xhtml>
                </documentation>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">    (**************************************************************************************************)
    (* The implementation has to be adjusted to your application/machine.                             *)
    (* This is an exemplary implementation of the function.                                           *)
    (* Per default, an access violation is generated to avoid machine damage                          *)
    (* Check the Call Stack (menu Debug/Callstack) and modify the faulty logic!                       *)
    (**************************************************************************************************)

IF divisor = 0 THEN
  strError:= 'CheckDivLReal: Invalid division by 0 - check the callstack';
//  Default implementation for APPLICATION WILL BE STOPPED: 
//  Set an error into the plc logger
  LogAdd2(hLogger:= CmpLog.LOG_STD_LOGGER,udiCmpID:= 16#1000,udiClassID:= LogClass.LOG_ERROR,udiErrorID:= 1,udiInfoID:= 1,pszInfo:= strError);
//  Triggering an access violation --&gt; Application will be stopped
  ptNull^ := 0;(* Triggering an access violation *)

// // Example for APPLICATION WILL NOT BE STOPPED:
// // Set the divisor to 1.0 
// //   --&gt; no access violation (div by zero) will be triggered
// //   --&gt; keep PLC-task running 
// // Set a warning into the plc logger
// // NOTE: There is still an implementation error in your application code!
//
//  LogAdd2(hLogger:= CmpLog.LOG_STD_LOGGER,udiCmpID:= 16#1000,udiClassID:= LogClass.LOG_WARNING,udiErrorID:= 1,udiInfoID:= 1,pszInfo:= strError);
//  CheckDivLReal := 1.0; //Division by 1 instead of zero 
//  return;	

ELSE // division is ok
  CheckDivLReal:=divisor;
END_IF;</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>9803d488-e75a-4e11-a200-6e673d6e224f</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="CheckDivReal" pouType="function">
              <interface>
                <returnType>
                  <REAL />
                </returnType>
                <inputVars>
                  <variable name="divisor">
                    <type>
                      <REAL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Divisor of the division</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="ptNull">
                    <type>
                      <pointer>
                        <baseType>
                          <BYTE />
                        </baseType>
                      </pointer>
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Nullpointer for triggering an access violation</xhtml>
                    </documentation>
                  </variable>
                  <variable name="strError">
                    <type>
                      <string />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Diagnostic text for the PLC logger entry</xhtml>
                    </documentation>
                  </variable>
                </localVars>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                    <Attributes>
                      <Attribute Name="check_div_real32" Value="" />
                      <Attribute Name="no_check" Value="" />
                    </Attributes>
                  </data>
                </addData>
                <documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> Short description:        Test function to increase machine safety by detecting unauthorized division by zero of variables of type REAL. 
 
 Functional description:   This function will be called implicitly before the division takes places.
                           The divisor will be checked for 0.0.
                           In case of 0.0, an error is entered in the plc logger and the application is stopped due to an access violation to avoid machine damage.
                           In this case, check the callstack (menu Debug/Callstack) and modify the faulty logic. 
 
 Handling particularities: This function increases the cycle time of all tasks using divisions.
                           The increase depends on the number of the divisions.
                           After inserting/removing this function, no online-change will be possible! 
                           A complete download will be necessary!
                           The implementation has to be adjusted to your application/machine.
                           In case of a division by zero, the PLC-Task will generate an access violation which leads to an application stop.
                           Please verify whether this default behaviour can damage your machine or lead to a complex recommissioning. 
                           In this case, adapt the error reaction to your application.
                          
                           If your application isn't too time-critical, you should leave this function whil comissioning the machine and production in your application.  
                           If you remove this function, ensure that your code is faultless.
                          
 Do not change the declaration of this function! Add only local variables.  
 Do not change the attributes above the function header!</xhtml>
                </documentation>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">    (**************************************************************************************************)
    (* The implementation has to be adjusted to your application/machine.                             *)
    (* This is an exemplary implementation of the function.                                           *)
    (* Per default, an access violation is generated to avoid machine damage                          *)
    (* Check the Call Stack (menu Debug/Callstack) and modify the faulty logic!                       *)
    (**************************************************************************************************)

IF divisor = 0 THEN
  strError:= 'CheckDivReal: Invalid division by 0 - check the callstack';
//  Default implementation for APPLICATION WILL BE STOPPED: 
//  Set an error into the plc logger
  LogAdd2(hLogger:= CmpLog.LOG_STD_LOGGER,udiCmpID:= 16#1000,udiClassID:= LogClass.LOG_ERROR,udiErrorID:= 1,udiInfoID:= 1,pszInfo:= strError);
//  Triggering an access violation --&gt; Application will be stopped
  ptNull^ := 0;(* Triggering an access violation *)

// // Example for APPLICATION WILL NOT BE STOPPED:
// // Set the divisor to 1 
// //   --&gt; no access violation (div by zero) will be triggered
// //   --&gt; keep PLC-task running 
// // Set a warning into the plc logger
// // NOTE: There is still an implementation error in your application code!
// 
//  LogAdd2(hLogger:= CmpLog.LOG_STD_LOGGER,udiCmpID:= 16#1000,udiClassID:= LogClass.LOG_WARNING,udiErrorID:= 1,udiInfoID:= 1,pszInfo:= strError);
//  CheckDivReal := 1.0; //Division by 1 instead of zero 
//  return;	

ELSE // division is ok
  CheckDivReal:=divisor;
END_IF;</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>eeb3df6d-e42d-4119-9c95-6f1833bef139</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="CheckLRangeSigned" pouType="function">
              <interface>
                <returnType>
                  <LINT />
                </returnType>
                <inputVars>
                  <variable name="value">
                    <type>
                      <LINT />
                    </type>
                  </variable>
                  <variable name="lower">
                    <type>
                      <LINT />
                    </type>
                  </variable>
                  <variable name="upper">
                    <type>
                      <LINT />
                    </type>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="ptNull">
                    <type>
                      <pointer>
                        <baseType>
                          <BYTE />
                        </baseType>
                      </pointer>
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Nullpointer for triggering an access violation</xhtml>
                    </documentation>
                  </variable>
                  <variable name="strError">
                    <type>
                      <string />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Diagnostic text for the PLC logger entry</xhtml>
                    </documentation>
                  </variable>
                </localVars>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                    <Attributes>
                      <Attribute Name="no_check" Value="" />
                      <Attribute Name="check_lrange_signed" Value="" />
                    </Attributes>
                  </data>
                </addData>
                <documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> Short description:        Test function to increase machine safety by checking if value is within signed range (LINT) 
 
 Functional description:  This function will be called implicitly before any access to range signed values.
                           In case of invalid access, an error is entered in the diagnostic logbook and the application is stopped due to an access violation to avoid machine damage.
                           In this case, check the callstack (menu Debug/Callstack) and modify the faulty logic. 
                          
 Handling particularities: This function increases the cycle time of all tasks accessing range signed values. 
                           The increase depends on the number of the read/write accesses.
 
                           After inserting/removing this function, no online-change will be possible! 
                           A complete download will be necessary!
                           The implementation has to be adjusted to your application/machine.
                           In case of a division by zero, the PLC-Task will generate an access violation which leads to an application stop.
                           Please verify whether this default behaviour can damage your machine or lead to a complex recommissioning. 
                           In this case, adapt the error reaction to your application.

                           If your application isn't too time-critical, you should leave this function whil comissioning the machine and production in your application.  
                           If you remove this function, ensure that your code is faultless.
                          
 Do not change the declaration of this function! Add only local variables.  
 Do not change the attributes above the function header!</xhtml>
                </documentation>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">    (**************************************************************************************************)
    (* The implementation has to be adjusted to your application/machine.                             *)
    (* This is an exemplary implementation of the function.                                           *)
    (* Per default, an access violation is generated to avoid machine damage                          *)
    (* Check the Call Stack (menu Debug/Callstack) and modify the faulty logic!                       *)
    (**************************************************************************************************)

IF (value &lt; lower) THEN
  strError:= 'CheckLRangeSigned: Lower value ';
  strError:=CONCAT(STR1:=strError  , STR2:= LINT_TO_STRING(lower));
  strError:=CONCAT(STR1:=strError  , STR2:= ' underrunned by ');
  strError:=CONCAT(STR1:=strError  , STR2:= LINT_TO_STRING(value));
//  Default implementation for APPLICATION WILL BE STOPPED: 
//  Set an error into the plc logger
  LogAdd2(hLogger:= CmpLog.LOG_STD_LOGGER,udiCmpID:= 16#1000,udiClassID:= LogClass.LOG_ERROR,udiErrorID:= 1,udiInfoID:= 1,pszInfo:= strError);
//  Triggering an access violation --&gt; Application will be stopped
  ptNull^ := 0;(* Triggering an access violation *)

// // Example for APPLICATION WILL NOT BE STOPPED:
// // Limit the faulty value to the lower value 
// // Set a warning into the plc logger
// // NOTE: There is still an implementation error in your application code!
//
//	LogAdd2(hLogger:= CmpLog.LOG_STD_LOGGER,udiCmpID:= 16#1000,udiClassID:= LogClass.LOG_WARNING,udiErrorID:= 1,udiInfoID:= 1,pszInfo:= strError);
// 	CheckLRangeSigned := lower; //set value to lower value
//  return;
  
ELSIF(value &gt; upper) THEN
  strError:= 'CheckLRangeSigned: Upper value ';
  strError:=CONCAT(STR1:=strError  , STR2:= LINT_TO_STRING(upper));
  strError:=CONCAT(STR1:=strError  , STR2:= ' overrunned by ');
  strError:=CONCAT(STR1:=strError  , STR2:= LINT_TO_STRING(value));

//  Default implementation for APPLICATION WILL BE STOPPED: 
//  Set an error into the plc logger
  LogAdd2(hLogger:= CmpLog.LOG_STD_LOGGER,udiCmpID:= 16#1000,udiClassID:= LogClass.LOG_ERROR,udiErrorID:= 1,udiInfoID:= 1,pszInfo:= strError);
//  Triggering an access violation --&gt; Application will be stopped
  ptNull^ := 0;(* Triggering an access violation *)

// // Example for APPLICATION WILL NOT BE STOPPED:
// // Limit the faulty value to the upper value 
// // Set a warning into the plc logger
// // NOTE: There is still an implementation error in your application code!
// 
//  LogAdd2(hLogger:= CmpLog.LOG_STD_LOGGER,udiCmpID:= 16#1000,udiClassID:= LogClass.LOG_WARNING,udiErrorID:= 1,udiInfoID:= 1,pszInfo:= strError);
//  CheckLRangeSigned := upper; //set value to upper value
//  return;	

ELSE // value ist within valid range
  CheckLRangeSigned := value;
END_IF</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>8ef16baf-6c68-4fe0-b526-10ef481f2fe5</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="CheckLRangeUnsigned" pouType="function">
              <interface>
                <returnType>
                  <ULINT />
                </returnType>
                <inputVars>
                  <variable name="value">
                    <type>
                      <ULINT />
                    </type>
                  </variable>
                  <variable name="lower">
                    <type>
                      <ULINT />
                    </type>
                  </variable>
                  <variable name="upper">
                    <type>
                      <ULINT />
                    </type>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="ptNull">
                    <type>
                      <pointer>
                        <baseType>
                          <BYTE />
                        </baseType>
                      </pointer>
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Nullpointer for triggering an access violation</xhtml>
                    </documentation>
                  </variable>
                  <variable name="strError">
                    <type>
                      <string />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Diagnostic text for the PLC logger entry</xhtml>
                    </documentation>
                  </variable>
                </localVars>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                    <Attributes>
                      <Attribute Name="no_check" Value="" />
                      <Attribute Name="check_lrange_unsigned" Value="" />
                    </Attributes>
                  </data>
                </addData>
                <documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> Short description:        Test function to increase machine safety by checking if value is within unsigned range  (ULINT, LWORD) 
 
 Functional description:   This function will be called implicitly before any access to range signed values.
                           In case of invalid access, an error is entered in the diagnostic logbook and the application is stopped due to an access violation to avoid machine damage.
                           In this case, check the callstack (menu Debug/Callstack) and modify the faulty logic. 
                          
 Handling particularities: This function increases the cycle time of all tasks accessing range signed values. 
                           The increase depends on the number of the read/write accesses.
 
                           After inserting/removing this function, no online-change will be possible! 
                           A complete download will be necessary!
                           The implementation has to be adjusted to your application/machine.
                           In case of a division by zero, the PLC-Task will generate an access violation which leads to an application stop.
                           Please verify whether this default behaviour can damage your machine or lead to a complex recommissioning. 
                           In this case, adapt the error reaction to your application.
                          
                           If your application isn't too time-critical, you should leave this function whil comissioning the machine and production in your application.  
                           If you remove this function, ensure that your code is faultless.
                          
 Do not change the declaration of this function! Add only local variables.  
 Do not change the attributes above the function header!</xhtml>
                </documentation>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">    (**************************************************************************************************)
    (* The implementation has to be adjusted to your application/machine.                             *)
    (* This is an exemplary implementation of the function.                                           *)
    (* Per default, an access violation is generated to avoid machine damage                          *)
    (* Check the Call Stack (menu Debug/Callstack) and modify the faulty logic!                       *)
    (**************************************************************************************************)

IF (value &lt; lower) THEN
  strError:= 'CheckLRangeUnsigned: Lower value ';
  strError:=CONCAT(STR1:=strError  , STR2:= ULINT_TO_STRING(lower));
  strError:=CONCAT(STR1:=strError  , STR2:= ' underrunned by ');
  strError:=CONCAT(STR1:=strError  , STR2:= ULINT_TO_STRING(value));
//  Default implementation for APPLICATION WILL BE STOPPED: 
//  Set an error into the plc logger
  LogAdd2(hLogger:= CmpLog.LOG_STD_LOGGER,udiCmpID:= 16#1000,udiClassID:= LogClass.LOG_ERROR,udiErrorID:= 1,udiInfoID:= 1,pszInfo:= strError);
//  Triggering an access violation --&gt; Application will be stopped
  ptNull^ := 0;(* Triggering an access violation *)

// // Example for APPLICATION WILL NOT BE STOPPED:
// // Limit the faulty value to the lower value 
// // Set a warning into the plc logger
// // NOTE: There is still an implementation error in your application code!
// 
//  CheckLRangeUnsigned := lower; //set value to lower value
//  return;

ELSIF(value &gt; upper) THEN
  strError:= 'CheckLRangeUnsigned: Upper value ';
  strError:=CONCAT(STR1:=strError  , STR2:= ULINT_TO_STRING(upper));
  strError:=CONCAT(STR1:=strError  , STR2:= ' overrunned by ');
  strError:=CONCAT(STR1:=strError  , STR2:= ULINT_TO_STRING(value));

//  Default implementation for APPLICATION WILL BE STOPPED: 
//  Set an error into the plc logger
 LogAdd2(hLogger:= CmpLog.LOG_STD_LOGGER,udiCmpID:= 16#1000,udiClassID:= LogClass.LOG_ERROR,udiErrorID:= 1,udiInfoID:= 1,pszInfo:= strError);
//  Triggering an access violation --&gt; Application will be stopped
 ptNull^ := 0;(* Triggering an access violation *)

// // Example for APPLICATION WILL NOT BE STOPPED:
// // Limit the faulty value to the upper value 
// // Set a warning into the plc logger
// // NOTE: There is still an implementation error in your application code!
// 
//  LogAdd2(hLogger:= CmpLog.LOG_STD_LOGGER,udiCmpID:= 16#1000,udiClassID:= LogClass.LOG_WARNING,udiErrorID:= 1,udiInfoID:= 1,pszInfo:= strError);
//  CheckLRangeUnsigned := upper; //set value to upper value
//  return;	

ELSE // value ist within valid range
  CheckLRangeUnsigned := value;
END_IF</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>521ddf74-7d27-4f28-a796-a061adfdde45</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="CheckRangeSigned" pouType="function">
              <interface>
                <returnType>
                  <DINT />
                </returnType>
                <inputVars>
                  <variable name="value">
                    <type>
                      <DINT />
                    </type>
                  </variable>
                  <variable name="lower">
                    <type>
                      <DINT />
                    </type>
                  </variable>
                  <variable name="upper">
                    <type>
                      <DINT />
                    </type>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="ptNull">
                    <type>
                      <pointer>
                        <baseType>
                          <BYTE />
                        </baseType>
                      </pointer>
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Nullpointer for triggering an access violation</xhtml>
                    </documentation>
                  </variable>
                  <variable name="strError">
                    <type>
                      <string />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Diagnostic text for the PLC logger entry</xhtml>
                    </documentation>
                  </variable>
                </localVars>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                    <Attributes>
                      <Attribute Name="no_check" Value="" />
                      <Attribute Name="check_range_signed" Value="" />
                    </Attributes>
                  </data>
                </addData>
                <documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> Short description:        Test function to increase machine safety by checking if value is within signed range (INT, DINT)  
 
 Functional description:   This function will be called implicitly before any access to range signed values.
                           In case of invalid access, an error is entered in the diagnostic logbook and the application is stopped due to an access violation to avoid machine damage.
                           In this case, check the callstack (menu Debug/Callstack) and modify the faulty logic. 
                          
 Handling particularities: This function increases the cycle time of all tasks accessing range signed values. 
                           The increase depends on the number of the read/write accesses.
 
                           After inserting/removing this function, no online-change will be possible! 
                           A complete download will be necessary!
                           The implementation has to be adjusted to your application/machine.
                           In case of a division by zero, the PLC-Task will generate an access violation which leads to an application stop.
                           Please verify whether this default behaviour can damage your machine or lead to a complex recommissioning. 
                           In this case, adapt the error reaction to your application.
                          
                           If your application isn't too time-critical, you should leave this function whil comissioning the machine and production in your application.  
                           If you remove this function, ensure that your code is faultless.
                          
 Do not change the declaration of this function! Add only local variables.  
 Do not change the attributes above the function header!</xhtml>
                </documentation>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">    (**************************************************************************************************)
    (* The implementation has to be adjusted to your application/machine.                             *)
    (* This is an exemplary implementation of the function.                                           *)
    (* Per default, an access violation is generated to avoid machine damage                          *)
    (* Check the Call Stack (menu Debug/Callstack) and modify the faulty logic!                       *)
    (**************************************************************************************************)

IF (value &lt; lower) THEN
  strError:= 'CheckRangeSigned: Lower value ';
  strError:=CONCAT(STR1:=strError  , STR2:= DINT_TO_STRING(lower));
  strError:=CONCAT(STR1:=strError  , STR2:= ' underrunned by ');
  strError:=CONCAT(STR1:=strError  , STR2:= DINT_TO_STRING(value));
//  Default implementation for APPLICATION WILL BE STOPPED: 
//  Set an error into the plc logger
  LogAdd2(hLogger:= CmpLog.LOG_STD_LOGGER,udiCmpID:= 16#1000,udiClassID:= LogClass.LOG_ERROR,udiErrorID:= 1,udiInfoID:= 1,pszInfo:= strError);
//  Triggering an access violation --&gt; Application will be stopped
  ptNull^ := 0;(* Triggering an access violation *)

// // Example for APPLICATION WILL NOT BE STOPPED:
// // Limit the faulty value to the lower value 
// // Set a warning into the plc logger
// // NOTE: There is still an implementation error in your application code!
//
//  LogAdd2(hLogger:= CmpLog.LOG_STD_LOGGER,udiCmpID:= 16#1000,udiClassID:= LogClass.LOG_WARNING,udiErrorID:= 1,udiInfoID:= 1,pszInfo:= strError);
//  CheckRangeSigned := lower; //set value to lower value
//  return;

ELSIF(value &gt; upper) THEN
  strError:= 'CheckRangeSigned: Upper value ';
  strError:=CONCAT(STR1:=strError  , STR2:= DINT_TO_STRING(upper));
  strError:=CONCAT(STR1:=strError  , STR2:= ' overrunned by ');
  strError:=CONCAT(STR1:=strError  , STR2:= DINT_TO_STRING(value));

//  Default implementation for APPLICATION WILL BE STOPPED: 
//  Set an error into the plc logger
  LogAdd2(hLogger:= CmpLog.LOG_STD_LOGGER,udiCmpID:= 16#1000,udiClassID:= LogClass.LOG_ERROR,udiErrorID:= 1,udiInfoID:= 1,pszInfo:= strError);
//  Triggering an access violation --&gt; Application will be stopped
  ptNull^ := 0;(* Triggering an access violation *)

// // Example for APPLICATION WILL NOT BE STOPPED:
// // Limit the faulty value to the upper value 
// // Set a warning into the plc logger
// // NOTE: There is still an implementation error in your application code!
// 
//  LogAdd2(hLogger:= CmpLog.LOG_STD_LOGGER,udiCmpID:= 16#1000,udiClassID:= LogClass.LOG_WARNING,udiErrorID:= 1,udiInfoID:= 1,pszInfo:= strError);
//  CheckRangeSigned := upper; //set value to upper value
//  return;	

ELSE // value ist within valid range
  CheckRangeSigned := value;
END_IF</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>6003db3f-7c51-4503-b0d5-21bc7b4782e5</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="CheckRangeUnsigned" pouType="function">
              <interface>
                <returnType>
                  <UDINT />
                </returnType>
                <inputVars>
                  <variable name="value">
                    <type>
                      <UDINT />
                    </type>
                  </variable>
                  <variable name="lower">
                    <type>
                      <UDINT />
                    </type>
                  </variable>
                  <variable name="upper">
                    <type>
                      <UDINT />
                    </type>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="ptNull">
                    <type>
                      <pointer>
                        <baseType>
                          <BYTE />
                        </baseType>
                      </pointer>
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Nullpointer for triggering an access violation</xhtml>
                    </documentation>
                  </variable>
                  <variable name="strError">
                    <type>
                      <string />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Diagnostic text for the PLC logger entry</xhtml>
                    </documentation>
                  </variable>
                </localVars>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                    <Attributes>
                      <Attribute Name="check_range_unsigned" Value="" />
                      <Attribute Name="no_check" Value="" />
                    </Attributes>
                  </data>
                </addData>
                <documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> Short description:        Test function to increase machine safety by checking if value is within unsigned range (UINT, UDINT, WORD, DWORD)
 
 Functional description:   This function will be called implicitly before any access to range unsigned values.
                           In case of invalid access, an error is entered in the diagnostic logbook and the application is stopped due to an access violation to avoid machine damage.
                           In this case, check the callstack (menu Debug/Callstack) and modify the faulty logic. 
                          
 Handling particularities: This function increases the cycle time of all tasks accessing range signed values. 
                           The increase depends on the number of the read/write accesses.
 
                           After inserting/removing this function, no online-change will be possible! 
                           A complete download will be necessary!
                           The implementation has to be adjusted to your application/machine.
                           In case of a division by zero, the PLC-Task will generate an access violation which leads to an application stop.
                           Please verify whether this default behaviour can damage your machine or lead to a complex recommissioning. 
                           In this case, adapt the error reaction to your application.
                          
                           If your application isn't too time-critical, you should leave this function whil comissioning the machine and production in your application.  
                           If you remove this function, ensure that your code is faultless.
                          
 Do not change the declaration of this function! Add only local variables.  
 Do not change the attributes above the function header!</xhtml>
                </documentation>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">    (**************************************************************************************************)
    (* The implementation has to be adjusted to your application/machine.                             *)
    (* This is an exemplary implementation of the function.                                           *)
    (* Per default, an access violation is generated to avoid machine damage                          *)
    (* Check the Call Stack (menu Debug/Callstack) and modify the faulty logic!                       *)
    (**************************************************************************************************)

IF (value &lt; lower) THEN
  strError:= 'CheckRangeUnsigned: Lower value ';
  strError:=CONCAT(STR1:=strError  , STR2:= UDINT_TO_STRING(lower));
  strError:=CONCAT(STR1:=strError  , STR2:= ' underrunned by ');
  strError:=CONCAT(STR1:=strError  , STR2:= UDINT_TO_STRING(value));
//  Default implementation for APPLICATION WILL BE STOPPED: 
//  Set an error into the plc logger
  LogAdd2(hLogger:= CmpLog.LOG_STD_LOGGER,udiCmpID:= 16#1000,udiClassID:= LogClass.LOG_ERROR,udiErrorID:= 1,udiInfoID:= 1,pszInfo:= strError);
//  Triggering an access violation --&gt; Application will be stopped
  ptNull^ := 0;(* Triggering an access violation *)

// // Example for APPLICATION WILL NOT BE STOPPED:
// // Limit the faulty value to the lower value 
// // Set a warning into the plc logger
// // NOTE: There is still an implementation error in your application code!
//
//  LogAdd2(hLogger:= CmpLog.LOG_STD_LOGGER,udiCmpID:= 16#1000,udiClassID:= LogClass.LOG_WARNING,udiErrorID:= 1,udiInfoID:= 1,pszInfo:= strError);
//  CheckRangeUnsigned := lower; //set value to lower value
//  return;

ELSIF(value &gt; upper) THEN
  strError:= 'CheckRangeUnsigned: Upper value ';
  strError:=CONCAT(STR1:=strError  , STR2:= UDINT_TO_STRING(upper));
  strError:=CONCAT(STR1:=strError  , STR2:= ' overrunned by ');
  strError:=CONCAT(STR1:=strError  , STR2:= UDINT_TO_STRING(value));

//  Default implementation for APPLICATION WILL BE STOPPED: 
//  Set an error into the plc logger
  LogAdd2(hLogger:= CmpLog.LOG_STD_LOGGER,udiCmpID:= 16#1000,udiClassID:= LogClass.LOG_ERROR,udiErrorID:= 1,udiInfoID:= 1,pszInfo:= strError);
//  Triggering an access violation --&gt; Application will be stopped
 ptNull^ := 0;(* Triggering an access violation *)

// // Example for APPLICATION WILL NOT BE STOPPED:
// // Limit the faulty value to the upper value 
// // Set a warning into the plc logger
// // NOTE: There is still an implementation error in your application code!
// 
//  LogAdd2(hLogger:= CmpLog.LOG_STD_LOGGER,udiCmpID:= 16#1000,udiClassID:= LogClass.LOG_WARNING,udiErrorID:= 1,udiInfoID:= 1,pszInfo:= strError);
//  CheckRangeUnsigned := upper; //set value to upper value
//  return;

ELSE // value ist within valid range
  CheckRangeUnsigned := value;
END_IF</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>ec010e8d-bce5-4419-adff-2749696bf6d1</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="PLC_PRG" pouType="program">
              <interface>
                <localVars>
                  <variable name="bStart_read">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                  <variable name="bStart_write">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="bExecute_read">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Read values</xhtml>
                    </documentation>
                  </variable>
                  <variable name="fbDL_ReadNodeValue">
                    <type>
                      <derived name="DL_ReadNodeValue" />
                    </type>
                  </variable>
                  <variable name="bActive_read">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="bDone_read">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="DataRead">
                    <type>
                      <derived name="DL_NodeValue" />
                    </type>
                  </variable>
                  <variable name="bErrorRead">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="ErrorIDRead">
                    <type>
                      <derived name="ERROR_CODE" />
                    </type>
                  </variable>
                  <variable name="ErrorIdent_read">
                    <type>
                      <derived name="ERROR_STRUCT" />
                    </type>
                  </variable>
                  <variable name="fbR_TRIG_read">
                    <type>
                      <derived name="R_TRIG" />
                    </type>
                  </variable>
                  <variable name="fbFlatbuffer">
                    <type>
                      <derived name="sampleSchema.sample_schema_InertialValue" />
                    </type>
                  </variable>
                  <variable name="iRead_X">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="iRead_Y">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="iRead_Z">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="iRead">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="fbBuilder">
                    <type>
                      <derived name="sampleSchema.FlatBufferBuilder" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">Write values</xhtml>
                    </documentation>
                  </variable>
                  <variable name="iWrite_X">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="iWrite_Y">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="iWrite_Z">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="iWritten">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="bExecute_write">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="fbDL_WriteNodeValue">
                    <type>
                      <derived name="DL_WriteNodeValue" />
                    </type>
                  </variable>
                  <variable name="bActive_write">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="bDone_write">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="fbValueIn">
                    <type>
                      <derived name="DL_NodeValue" />
                    </type>
                  </variable>
                  <variable name="fbValueOut">
                    <type>
                      <derived name="DL_NodeValue" />
                    </type>
                  </variable>
                  <variable name="bError_write">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="ErrorID_write">
                    <type>
                      <derived name="ERROR_CODE" />
                    </type>
                  </variable>
                  <variable name="ErrorIdent_write">
                    <type>
                      <derived name="ERROR_STRUCT" />
                    </type>
                  </variable>
                  <variable name="fbR_TRIG_write">
                    <type>
                      <derived name="R_TRIG" />
                    </type>
                  </variable>
                  <variable name="strNodePath">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="'sdk-cpp-alldata/dynamic/fbs'" />
                    </initialValue>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF bStart_read THEN
	bStart_read := FALSE;
	bExecute_read := TRUE;	
END_IF


fbDL_ReadNodeValue(
	Execute:= bExecute_read,
	Done=&gt; bDone_read,
	Active=&gt; bActive_read,
	Error=&gt; bErrorRead,
	ErrorID=&gt; ErrorIDRead,
	ErrorIdent=&gt; ErrorIdent_read,
	ClientId:= ,
	NodeName:= strNodePath,
	NodeValue:= DataRead);

IF bDone_read AND bExecute_read THEN
	bExecute_read := FALSE;

	fbFlatbuffer.getRootAsInertialValue(data:=
	DataRead.GetData(), size:= DataRead.GetSize());
	
	iRead_X := fbFlatbuffer.getX();
	iRead_Y := fbFlatbuffer.getY();
	iRead_Z := fbFlatbuffer.getZ();	
	iRead := iRead + 1;
		
	bStart_write := TRUE;
END_IF

	
IF bStart_write THEN
	bStart_write := FALSE;

	iWrite_X := iRead_X + 100;
	iWrite_Y := iRead_Y + 100;
	iWrite_Z := iRead_Z + 100;

	fbBuilder(forceDefaults := TRUE);
	fbFlatbuffer.startInertialValue(fbBuilder);
	fbFlatbuffer.addX(iWrite_X);
	fbFlatbuffer.addY(iWrite_Y);
	fbFlatbuffer.addZ(iWrite_Z);
	fbBuilder.finish(fbFlatbuffer.endInertialValue());
	fbValueIn.SetFlatbuffer(fbBuilder);
	
	bExecute_write := TRUE;
END_IF

	
fbDL_WriteNodeValue(
	Execute:= bExecute_write,
	Done=&gt; bDone_write,
	Active=&gt; bActive_write,
	Error=&gt; bError_write,
	ErrorID=&gt; ErrorID_write,
	ErrorIdent=&gt; ErrorIdent_write,
	ClientId:= ,
	NodeName:= strNodePath,
	NodeValueIn:= fbValueIn,
	NodeValueOut:= fbValueOut);

IF bDone_write AND bExecute_write THEN
	bExecute_write := FALSE;	
	iWritten := iWritten + 1;
	
	bStart_read := TRUE;
END_IF
	
</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>63ac73d1-ffba-4b01-9d0e-8b65a8ef1bb5</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="CheckDivDInt" pouType="function">
              <interface>
                <returnType>
                  <DINT />
                </returnType>
                <inputVars>
                  <variable name="divisor">
                    <type>
                      <DINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Divisor of the division</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="ptNull">
                    <type>
                      <pointer>
                        <baseType>
                          <BYTE />
                        </baseType>
                      </pointer>
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Nullpointer for triggering an access violation</xhtml>
                    </documentation>
                  </variable>
                  <variable name="strError">
                    <type>
                      <string />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Diagnostic text for the PLC logger entry</xhtml>
                    </documentation>
                  </variable>
                </localVars>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                    <Attributes>
                      <Attribute Name="check_div_int32" Value="" />
                      <Attribute Name="no_check" Value="" />
                    </Attributes>
                  </data>
                </addData>
                <documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> Short description:        Test function to increase machine safety by detecting unauthorized division by zero of INT, UINT, DINT, UDINT, WORD and DWORD variables
 
 Functional description:   This function will be called implicitly before the division takes places.
                           The divisor will be checked for 0.
                           In case of 0, an error is entered in the plc logger and the application is stopped due to an access violation to avoid machine damage.
                           In this case, check the callstack (menu Debug/Callstack) and modify the faulty logic. 
 
 Handling particularities: This function increases the cycle time of all tasks using divisions.
                           The increase depends on the number of the divisions.
                           After inserting/removing this function, no online-change will be possible! 
                           A complete download will be necessary!
                           The implementation has to be adjusted to your application/machine.
                           In case of a division by zero, the PLC-Task will generate an access violation which leads to an application stop.
                           Please verify whether this default behaviour can damage your machine or lead to a complex recommissioning. 
                           In this case, adapt the error reaction to your application.
                          
                           If your application isn't too time-critical, you should leave this function whil comissioning the machine and production in your application.  
                           If you remove this function, ensure that your code is faultless.
                          
 Do not change the declaration of this function! Add only local variables.  
 Do not change the attributes above the function header!</xhtml>
                </documentation>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">    (**************************************************************************************************)
    (* The implementation has to be adjusted to your application/machine.                             *)
    (* This is an exemplary implementation of the function.                                           *)
    (* Per default, an access violation is generated to avoid machine damage                          *)
    (* Check the Call Stack (menu Debug/Callstack) and modify the faulty logic!                       *)
    (**************************************************************************************************)

IF divisor = 0 THEN
  strError:= 'CheckDivDInt: Invalid division by 0 - check the callstack';
//  Default implementation for APPLICATION WILL BE STOPPED: 
//  Set an error into the plc logger
  LogAdd2(hLogger:= CmpLog.LOG_STD_LOGGER,udiCmpID:= 16#1000,udiClassID:= LogClass.LOG_ERROR,udiErrorID:= 1,udiInfoID:= 1,pszInfo:= strError);
//  Triggering an access violation --&gt; Application will be stopped
  ptNull^ := 0;(* Triggering an access violation *)

// // Example for APPLICATION WILL NOT BE STOPPED:
// // Set the divisor to 1 
// //   --&gt; no access violation (div by zero) will be triggered
// //   --&gt; keep PLC-task running 
// // Set a warning into the plc logger
// // NOTE: There is still an implementation error in your application code!
// 
//  LogAdd2(hLogger:= CmpLog.LOG_STD_LOGGER,udiCmpID:= 16#1000,udiClassID:= LogClass.LOG_WARNING,udiErrorID:= 1,udiInfoID:= 1,pszInfo:= strError);
//  CheckDivDint := 1; //Division by 1 instead of zero 
//  return;	

ELSE // division is ok
  CheckDivDInt:=divisor;
END_IF;</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>58c0f176-f4bb-46bb-8dab-1ed03dd53ad8</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>a756c95a-3bd5-44f9-990a-ff4d038fd9d1</ObjectId>
          </data>
        </addData>
      </resource>
    </data>
    <data name="http://www.3s-software.com/plcopenxml/projectstructure" handleUnknown="discard">
      <ProjectStructure>
        <Object Name="Application" ObjectId="a756c95a-3bd5-44f9-990a-ff4d038fd9d1">
          <Object Name="MainTask" ObjectId="65f2418c-4e93-4317-8b21-baa49556b145" />
          <Folder Name="CheckFunctions">
            <Object Name="CheckDivLInt" ObjectId="609648a1-2e58-455b-9c4e-d880496e9f4a" />
            <Object Name="CheckBounds" ObjectId="5c57242d-0abc-44e9-a367-983e29473911" />
            <Object Name="CheckDivLReal" ObjectId="9803d488-e75a-4e11-a200-6e673d6e224f" />
            <Object Name="CheckDivReal" ObjectId="eeb3df6d-e42d-4119-9c95-6f1833bef139" />
            <Object Name="CheckLRangeSigned" ObjectId="8ef16baf-6c68-4fe0-b526-10ef481f2fe5" />
            <Object Name="CheckLRangeUnsigned" ObjectId="521ddf74-7d27-4f28-a796-a061adfdde45" />
            <Object Name="CheckRangeSigned" ObjectId="6003db3f-7c51-4503-b0d5-21bc7b4782e5" />
            <Object Name="CheckRangeUnsigned" ObjectId="ec010e8d-bce5-4419-adff-2749696bf6d1" />
            <Object Name="CheckDivDInt" ObjectId="58c0f176-f4bb-46bb-8dab-1ed03dd53ad8" />
          </Folder>
          <Object Name="PLC_PRG" ObjectId="63ac73d1-ffba-4b01-9d0e-8b65a8ef1bb5" />
        </Object>
      </ProjectStructure>
    </data>
  </addData>
</project>