{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"about.html","title":"About","text":"<p>Copyright \u00a9 2020-2024 Bosch Rexroth AG. All rights reserved.</p> <p>Please note that any trademarks, logos and pictures contained or linked to in this Software are owned by or copyright \u00a9 Bosch Rexroth AG 2023 and not licensed under the Software's license terms.</p> <p>https://www.boschrexroth.com/en/dc/imprint/</p>"},{"location":"app_builder_env_changes.html","title":"App builder env changes","text":""},{"location":"app_builder_env_changes.html#software-development-kit-for-ctrlx-automation","title":"Software Development Kit for ctrlX AUTOMATION","text":""},{"location":"app_builder_env_changes.html#version-1160-july-15-2022","title":"Version 1.16.0  July 15, 2022","text":"<p>Important</p> <p>The newest App Build Environment is always provided with ctrlX WORKS.</p> <p>Only the AMD64 version is supported because for every programming language supported by the ctrlX AUTOMATION SDK cross build capability is provided.</p>"},{"location":"app_builder_env_changes.html#common","title":"Common","text":"<ul> <li>hostname: app-builder-amd64</li> <li>User boschrexroth is created in the last step of the setup workflow</li> <li>Poweroff instead of reboot if setup is finished</li> </ul>"},{"location":"app_builder_env_changes.html#installation-scripts","title":"Installation scripts","text":"<ul> <li>install-dotnet-sdk.sh: Install as Debian package</li> <li>install-nodejs-npm.sh: Add proxy infos to ~/.npmrc</li> <li>install-sdk.sh: Install Debian package ctrlx-datalayer-*.deb</li> </ul>"},{"location":"app_builder_env_changes.html#additionally-installed-packages","title":"Additionally installed packages","text":"<ul> <li>ssh, curl: Removed because they are installed in the base image.</li> <li>build-essential: New</li> </ul>"},{"location":"app_builder_env_changes.html#version-1140-march-15-2022","title":"Version 1.14.0  March 15, 2022","text":""},{"location":"app_builder_env_changes.html#installation-scripts_1","title":"Installation scripts","text":"<ul> <li>install-snapcraft.sh: Improve robustness</li> <li>install-nodejs-npm.sh: Install as snap</li> <li>install-go.sh: Install as snap</li> <li>install-go.sh: New</li> </ul>"},{"location":"app_builder_env_changes.html#additionally-installed-packages_1","title":"Additionally installed packages","text":"<ul> <li>pkg-config: New</li> <li>__libzmq3-dev:amd64__: New</li> <li>__libzmq3-dev:arm64__: New</li> </ul>"},{"location":"appdevguide.html","title":"App Developer Guideline","text":"<p>Liability The information in this guideline is intended for product description purposes only and shall not be deemed to be of a warranty nature, unless expressly stipulated by contract. All rights are reserved with respect to the content of this documentation and the availability of the product.</p>"},{"location":"appdevguide.html#table-of-contents","title":"Table of Contents","text":"<p>1 Introduction</p> <p>2 App Validation Process</p> <p>3 App Categories</p> <p>4 Basic App Information (mandatory)</p> <p>5 Further App Information (conditional)</p> <p>6 Working Set Overview (mandatory)</p> <p>7 ctrlX Basic Mechanisms (mandatory)</p> <p>8 ctrlX Security System (optional)</p> <p>9 ctrlX User Interface and Project Handling (optional)</p> <p>10 ctrlX AUTOMATION System Functions (optional)</p> <p>11 Real Time Extension (optional)</p>"},{"location":"appdevguide.html#1-introduction","title":"1 Introduction","text":"<p>This guideline provides guidance for app developers and partners who want to contribute to the ctrlX World Ecosystem with new apps.</p> <p>This is a living document. New apps might lead to new topics and may result in new guidelines at any time.</p>"},{"location":"appdevguide.html#11-app-development-for-ctrlx-automation","title":"1.1 App Development for ctrlX AUTOMATION","text":"<p>The open ctrlX AUTOMATION system architecture allows developers to implement further system functions with little effort at any time as apps and as open source software. This document provides guidance on how to create apps to integrate them perfectly into ctrlX AUTOMATION.</p> <p>Bosch Rexroth approves an app as qualified for ctrlX AUTOMATION using a dedicated app validation and signing process. This process ensures that the app meets the ctrlX AUTOMATION quality standards.</p> <p>This document describes all aspects that have to be considered when an app is developed. Some aspects are mandatory, both from a legal and technical viewpoint. Others are optional and describe how an app can be fully integrated in the ctrlX system architecture to provide the best user experience.</p>"},{"location":"appdevguide.html#12-obligations-for-technical-aspects","title":"1.2 Obligations for Technical Aspects","text":"<p>This document describes the technical aspects for ctrlX apps. These aspects each have one of the following obligations:</p> <ul> <li>MANDATORY - This aspect is strictly required and must be implemented.</li> <li>OPTIONAL This aspect brings added value and can or should be implemented.</li> <li>CONDITIONAL - This aspect is to be implemented in specific cases**. Bosch Rexroth and the partner identify the requirements during the app integration process.</li> </ul>"},{"location":"appdevguide.html#13-partner-contract-and-legal-framework","title":"1.3 Partner Contract and Legal Framework","text":"<p>This development guide describes the technical integration of an app into ctrlX CORE. The following documents of the ctrlX World partner program also need to be available and signed as non-technical prerequisites before an app gets published:</p> <ul> <li>The Distribution Framework Agreement (\"Partner Contract\") describes the fundamental conditions of the partnership between you as app developer and Bosch Rexroth and affiliates</li> <li>A Individual Contract describes all app related licenses as part of the product to be sold within Bosch Rexroth and affiliates sales channels</li> <li>A Letter of Intent (LOI) defines the partnership priciples</li> <li>A Non Disclosure Agreement (NDA) is the basis of our collaboration and needed for file exchange</li> </ul>"},{"location":"appdevguide.html#2-app-validation-process","title":"2 App Validation Process","text":"<p>As a mandatory step for app integration into ctrlX AUTOMATION, Bosch Rexroth will carry out a standard app validation and signing process.</p> <p>For handover, Bosch Rexroth accordingly provides a partner folder in the ctrlX World Portal, which will be prepared during the partner contracting process.</p>"},{"location":"appdevguide.html#21-initial-meeting-for-app-validation","title":"2.1 Initial Meeting for App Validation","text":"<p>Before the validation process starts, the partner / app developer must provide the app architecture</p> <p>Hint</p> <p>A picture of the main communication paths is needed, including</p> <ul> <li> <p>a modular overview of the app</p> </li> <li> <p>a short description of the communication paths to other apps/devices</p> </li> <li> <p>the app configuration and data storage concept</p> </li> <li> <p>a description of a typical standard scenario</p> </li> </ul> <p>The architecture overview should be stored as \"architecture-overview.x\" in the {app-name} folder. Initially, provide the architecture overview, and if there are any changes in the architecture, update and provide the new overview.</p> <p>This document typically will be provided for an initial meeting with the partner / app developer, the relevant Bosch Rexroth partner manager and the Bosch Rexroth app validation team. At this point, the partner should also already have uploaded the necessary artifacts to be able to clarify any open points.</p>"},{"location":"appdevguide.html#22-artifacts-delivery","title":"2.2 Artifacts\u2019 Delivery","text":"<p>Bosch Rexroth checks the provided artifacts and the described behavior of an app that is to be signed as an official ctrlX app in an automated validation framework.</p> <p>This validation framework requires a standard format for artifacts and information.</p> <p>To simplify the delivery of artifacts, we provide a base folder structure with description and schema files. This helps app developers to deliver the required artifacts and us to simplify the validation work. Please use the given structure, folder names and file names as given below, without any renaming:</p>"},{"location":"appdevguide.html#general-folder-structure","title":"General Folder structure","text":"<ul> <li>{company-name}\\ - Partner company name. Folder name is created by Bosch Rexroth</li> <li>{app-name}\\  - Technical app name. This app name is unique. A folder will be created by the partner<ul> <li>{version}\\ - The version folder separates the different versions. Format is three numbers separated by dots, e.g. \"1.0.2\". Each version has to be stored in a separate folder. A folder will be created by the partner</li> <li>{artifacts}\\ - The required documents as input for the validation process (see 4.1)</li> </ul> </li> </ul>"},{"location":"appdevguide.html#handover-of-artifacts","title":"Handover of artifacts","text":"<p>Once all the required information is available in your local folder, zip the folder using Windows-zip and upload it as \"artifacts.zip\" to the ctrlX World Partner Portal space in the \".../{company-name}/{app-name}/{version}/\" path.</p> <p>Important</p> <p>To avoid problems when uploading the artifacts.zip file, please use the Windows-zip feature</p>"},{"location":"appdevguide.html#24-validation-and-signing","title":"2.4 Validation and Signing","text":"<p>Validation is typically carried out in several iterations, depending on the result of a particular validation activity. If all the required information is provided in the ctrlX World Portal, an email to <code>ctrlx.world@boschrexroth.de</code> will trigger a validation loop. Basically, the workflow will be as follows:</p> <ol> <li>Partner/app developer: Uploads required artifacts and informs Bosch Rexroth</li> <li>Bosch Rexroth checks the artifacts for completeness. If rework is required, the partner will be notified by email with an attached report in the \".../{company-name}/{app-name}/{version}/results\" folder</li> <li>Once the artifacts are complete, the validation will start. Again, if rework is required, the partner will be notified with an attached report</li> <li>Once validation has been successful, Bosch Rexroth will sign the app and inform the partner by email.</li> </ol>"},{"location":"appdevguide.html#3-app-categories","title":"3 App Categories","text":"<p>Apps can be integrated into ctrlX on different levels. Three categories are defined as guidance for the prerequisites and possibilities on different levels. A category, however, is not a formal boundary, and an app can seamlessly support aspects in the different categories. Also, subsequent versions of an app might support more aspects than an earlier version. In addition, there is no correlation between the category and an app\u2019s business value. However, at least all aspects that are mentioned in Category 1 need to be met, since they are considered mandatory.</p> <p>The aspects are briefly described in this section The remainder of these documents provides detailed information about all aspects and also refers to additional sources of information, like how-to documents and code samples.</p>"},{"location":"appdevguide.html#31-category-1-basic-applies-to-ctrlx-basic-mechanisms","title":"3.1 Category 1 (Basic): Applies to ctrlX basic mechanisms","text":"<p>To be approved as an official ctrlX CORE app, an app must support a minimum set of mandatory aspects.</p>"},{"location":"appdevguide.html#311-overview","title":"3.1.1 Overview","text":"<p>The app itself and corresponding user documentation need to be provided. Legal aspects like FOSS are also required. Working set information is needed to support the test and validation process. During runtime, the app must use the ctrlX CORE onboard licensing mechanism.</p>"},{"location":"appdevguide.html#312-customer-user-experience","title":"3.1.2 Customer User Experience","text":"<p>Customers can find the app in the ctrlX App Store. They know how the app is licensed and can use the overall Bosch Rexroth licensing system for ctrlX CORE. They can also be sure that the app contributes to the basic ctrlX CORE security mechanisms.</p>"},{"location":"appdevguide.html#313-technical-prerequisites","title":"3.1.3 Technical Prerequisites","text":"<p>Note</p> <p>As mentioned, the aspects listed here are MANDATORY. This means all of them are required for an official ctrlX app.</p> <p>Basic app information:</p> <ul> <li> <p>App artifacts (\u201cExecutables\u201d for ctrlX CORE and ctrlX CORE<sup>virtual</sup> and basic technical information)</p> </li> <li> <p>App documentation / user manual and release notes</p> </li> <li> <p>Additional app properties according to Linux Ubuntu conventions</p> </li> <li> <p>FOSS information</p> </li> </ul> <p>Working set overview:</p> <ul> <li> <p>Information about security behavior (Linux slots &amp; plugs, ports, sockets)</p> </li> <li> <p>Information about resource consumption and read/write operations</p> </li> <li> <p>Standard task scheduling overview</p> </li> <li> <p>Test setup description for typical usage scenario</p> </li> </ul> <p>Integration into ctrlX basic mechanisms:</p> <ul> <li> <p>Use of ctrlX license handling</p> </li> <li> <p>App signed by Bosch Rexroth</p> </li> </ul>"},{"location":"appdevguide.html#32-category-2-advanced-contributes-to-ctrlx-engineering-concepts","title":"3.2 Category 2 (Advanced): Contributes to ctrlX engineering concepts","text":"<p>For good integration into ctrlX from a user's point of view, an app should meet the aspects of Category 2 \u2013 even if these aspects are not necessary for app validation.</p>"},{"location":"appdevguide.html#321-overview","title":"3.2.1 Overview","text":"<p>The app uses the relevant ctrlX system interfaces and supports ctrlX platform features like Identity Management, Data Management and Backup/Restore.</p>"},{"location":"appdevguide.html#322-customer-user-experience","title":"3.2.2 Customer User Experience","text":"<p>The app contributes to the ctrlX user interface and system behavior. It integrates into basic user stories for configuration and maintenance of a ctrlX application.</p>"},{"location":"appdevguide.html#323-technical-recommendations","title":"3.2.3 Technical Recommendations","text":"<p>Note</p> <p>As mentioned, the aspects listed here are OPTIONAL. However, they are highly recommended for a good user experience. Also, the category 2 and 3 aspects overlap and not formally separated</p> <p>Further app information:</p> <ul> <li> <p>FOSS sources</p> </li> <li> <p>Semantic versioning scheme</p> </li> </ul> <p>Integration into ctrlX CORE security system:</p> <ul> <li> <p>ctrlX CORE reverse proxy</p> </li> <li> <p>ctrlX Key &amp; Certificate Management</p> </li> <li> <p>ctrlX Identity Management</p> </li> <li> <p>Improved network security (no insecure protocols)</p> </li> </ul> <p>Integration into ctrlX user interface and project handling</p> <ul> <li> <p>ctrlX CORE navigation pane and landing page</p> </li> <li> <p>ctrlX CORE configuration storage</p> </li> </ul>"},{"location":"appdevguide.html#33-category-3-extended-extends-ctrlx-automation-features","title":"3.3 Category 3 (Extended): Extends ctrlX AUTOMATION features","text":"<p>Finally, an app can integrate in the Automation framework and extend the ctrlX real time system</p> <p>Note</p> <p>Real time integration requires additional training and support from Bosch Rexroth to avoid unexpected system behavior and impacts on the ctrlX real-time kernel.</p>"},{"location":"appdevguide.html#331-description","title":"3.3.1 Description","text":"<p>The app exposes information in the ctrlX Data Layer for all other apps. It also can extend the real time functions of ctrlX CORE if connected to the real-time task scheduler</p>"},{"location":"appdevguide.html#332-customer-user-experience","title":"3.3.2 Customer User Experience","text":"<p>The app extends the ctrlX AUTOMATION system functions, e.g. for Motion and/or PLC</p>"},{"location":"appdevguide.html#333-technical-recommendations","title":"3.3.3 Technical Recommendations","text":"<p>Integration into ctrlX AUTOMATION system functions:</p> <ul> <li> <p>ctrlX Data Layer</p> </li> <li> <p>ctrlX CORE logbook and diagnostics system</p> </li> </ul> <p>Real-time extension:</p> <ul> <li>ctrlX CORE Scheduler</li> </ul>"},{"location":"appdevguide.html#4-basic-app-information-mandatory","title":"4 Basic App Information (MANDATORY)","text":"<p>The basic app information is checked as a prerequisite by Bosch Rexroth, before the validation process starts.</p>"},{"location":"appdevguide.html#41-app-artifacts-mandatory","title":"4.1 App Artifacts (MANDATORY)","text":""},{"location":"appdevguide.html#411-artifacts-folder-template","title":"4.1.1 Artifacts Folder Template","text":"<p>Please find the sample artifacts in the artifacts.zip, which can be downloaded and extracted locally. This will create the required folder structure for the mandatory artifacts out-of-the-box, with default descriptions and schema files.</p> <p>Important</p> <p>Please use the given structure, folder names and file names unchanged. This will support an efficient validation process.</p> <p></p> <p>The artifacts are organized in five sub folders:</p>"},{"location":"appdevguide.html#412-disclosure-folder-mandatory","title":"4.1.2 \"Disclosure\" folder (MANDATORY)","text":"<p>The FOSS source files and license text files are stored in the disclosure folder</p> <ul> <li> <p>\"fossinfo.json\" (MANDATORY) - license texts for all an app\u2019s used open source software. For more information about format and content, refer to the json example and the corresponding json schema in the standard \"artifacts.zip\" file. <li> <p>\"foss-sources.zip\" (CONDITIONAL) - In the foss-sources.zip file, the sources of all used open source libraries / packages are zipped without a password. <li>\"foss-offer.x\" (CONDITIONAL) - If the foss-sources.zip file is not provided, a human-readable file with the name \"offer.x\" is needed. It explains how the user can get the sources. <p>Either FOSS sources or FOSS offer is required.</p>"},{"location":"appdevguide.html#413-build-info-folder-mandatory","title":"4.1.3 \"Build Info\" folder (MANDATORY)","text":"<p>The build info folder stores all build relevant information.</p> <p>Note: For the <code>{xxx}-description</code> files, a default file (with explanation) and the corresponding schema is provided in the standard <code>artifacts.zip</code> example.</p> <ul> <li> <p>\"snapcraft.yaml\" (MANDATORY) - The snapcraft.yaml file is the main entry point to create a snap through Snapcraft. It contains all the details the snapcraft command needs to build a snap. See also https://snapcraft.io/docs/snapcraft-yaml-reference <li> <p>\"package-manifest.json\" (MANDATORY) - The package-manifest.json covers essential settings, like the proxy URL <li> <p>\"portlist-description.json\" (MANDATORY) - All used ports are described in the port list <li> <p>\"unixsocket-description.json\" (MANDATORY) - All used Unix sockets are described in the Unix socket description. If your app does not use a Unix socket, provide an empty description file <li> <p>\"slotplug-description.json\" (MANDATORY) - All used slot and plugs are described in the slot and plug description <p>The Base checklist contains the criteria which are checked in these files.</p>"},{"location":"appdevguide.html#414-documentation-folder-mandatory","title":"4.1.4 \"Documentation\" folder (MANDATORY)","text":"<p>All documentation relevant to the app is provided here</p> <ul> <li>\"manual.pdf\" (MANDATORY) - The app description (user manual) documents the app\u2019s overall functionality <li>\"test-setup-description.pdf\" (MANDATORY) - The app setup describes how to configure the app on a ctrlX CORE for a typical usage and test scenario <li>\"release-notes.pdf\" (MANDATORY) - The latest changes, workarounds and defects are mentioned in the release notes"},{"location":"appdevguide.html#415-app-states-folder-mandatory","title":"4.1.5 \"App States\" folder (MANDATORY)","text":"<p>The app validation framework tries to establish relevant states that have to be tested. Therefore, a sequence of API calls has to be provided to bring the app to the test state</p> <ul> <li> <p>\"standard-scenario1.json\" (MANDATORY) - Each file contains a collection (sequence of RESTAPI calls) to generate the standard usage scenario. In each of these scenarios, the validation process monitors the memory and storage usage, the CPU load and the Ethernet communication load. The collections/files are to be created using Postman. <li> <p>\"standard-scenario{2 to n}.json\" (optional) - One or more scenarios, if appropriate</p> </li>"},{"location":"appdevguide.html#416-snaps-folder-mandatory","title":"4.1.6 \"Snaps\" folder (MANDATORY)","text":"<p>ctrlX currently supports the amd64 and the arm64 processor architecture. The corresponding target snaps for the app are provided here</p> <ul> <li> <p>\"ctrlx-{company name}-{app name}_{version}_arm64.snap\" (MANDATORY) - Snap that runs in armd64 environments. Currently, the arm64 architecture is used in ctrlX CORE hardware. <li> <p>\"ctrlx-{company name}-{app name}_{version}_amd64.snap\" (OPTIONAL) - Snap that runs in amd64 environments. The amd64 is used in ctrlX CORE<sup>virtual</sup>. However, future ctrlX CORE hardware will also use amd64 architecture. So, it is recommended that a snap is also provided for this platform to avoid future inconvenience."},{"location":"appdevguide.html#42-app-documentation-mandatory","title":"4.2 App Documentation (MANDATORY)","text":""},{"location":"appdevguide.html#421-user-manual-mandatory","title":"4.2.1 User Manual (MANDATORY)","text":"<p>A user manual must be delivered together with the app. The user manual must describe typical user actions for commissioning and operating the app from a user / customer perspective.</p>"},{"location":"appdevguide.html#422-test-setup-description-mandatory","title":"4.2.2 Test Setup Description (MANDATORY)","text":"<p>A test setup description must be delivered together with the app. The test setup description must contain instructions to realize a test scenario. It must include a description of sequences and dependencies, e.g. additional hardware. If you use plugs and slots, please provide an explanation here.</p>"},{"location":"appdevguide.html#423-release-notes-mandatory","title":"4.2.3 Release Notes (MANDATORY)","text":"<p>Release note documentation must be delivered together with the app.</p>"},{"location":"appdevguide.html#424-general-app-description-for-the-ctrlx-app-zone-conditional","title":"4.2.4 General App Description for the ctrlX App Zone (CONDITIONAL)","text":"<p>Each app needs product information as part of the sales package. The description shall be generated based on the app description template (from the ctrlX World Partner Portal)</p> <p>The app description package is necessary in case the app is also to be shown in the ctrlX AUTOMATION Community App Zone or other marketing channels.</p>"},{"location":"appdevguide.html#43-additional-app-information-according-to-linux-ubuntu-conventions-mandatory","title":"4.3 Additional App Information According to Linux Ubuntu Conventions (MANDATORY)","text":"<p>The following properties must be defined within the \"snapcraft.yaml\" file (see https://snapcraft.io/docs/snapcraft-yaml-reference), which also need to be exclusively part of the app and have to be collision free with other apps.</p> <ul> <li> <p>Title - The general name of the app that will be shown on all sales channels and customer touch points, e.g. app overview or ctrlX App Store. This is defined together with the partner manager, as part of the business model definitions. Example: \"My App\"</p> </li> <li> <p>Name - The technical name of the snap. The name has to be unique in the snap universe and across all snap developer and device vendors. The snap name has to start with \"ctrlx-\" and must be lowercase and a maximum length of 32 characters. ctrlX World Partners add their company name to the snap name. Example: \"ctrlx-partnername-myapp\"</p> </li> <li> <p>Confinement - Must be set to \"strict\" for releases. See also https://snapcraft.io/docs/snap-confinement</p> </li> <li> <p>Grade - Defines the quality grade of the app. During development, you may choose to use \"devel\". When releasing the application, the grade must be set to \"stable\".</p> </li> </ul>"},{"location":"appdevguide.html#44-foss-info-provisioning-mandatory","title":"4.4 FOSS Info Provisioning (MANDATORY)","text":"<p>If the app uses Free and Open Source Software (FOSS), certain license information must be delivered together  with the app.</p> <p>With \"fossinfo.xml\" the open source license text must be disclosed for copyright reasons. Bosch Rexroth offers the possibility to display the license texts for the used open source software in the ctrlX web interface. For more information about \"fossinfo.xml\" please refer to the guideline in the SDK. If FOSS license texts are displayed within the app, at least a reference to the license display in the app must be provided in the \"fossinfo.xml\".</p> <p>Since users must be able to view the license texts before the open source software is installed, the \"fossinfo.xml\" must also be stored outside the app in the \"disclosure\" directory (see section 3.1.2). In addition, the license texts must be listed within the user documentation or at least a reference must be inserted where the FOSS license texts are located.</p>"},{"location":"appdevguide.html#5-further-app-information-conditional","title":"5 Further App Information (CONDITIONAL)","text":""},{"location":"appdevguide.html#51-foss-sources-conditional","title":"5.1 FOSS Sources (CONDITIONAL)","text":"<p>Bosch Rexroth recommends putting all FOSS sources in a zip file with the file name \"foss-sources.zip\" and storing it in the \"disclosure\" directory, where the \"fossinfo.xml\" is provided.</p> <p>In the event that the FOSS sources are not provided directly, a written offer is mandatory for open source software with copyleft clause (e.g. GPLv2 or GPLv3) . This means, a human-readable file with the name \"foss-offer.x\" needs to be provided, which explains how the user can get the app\u2019s FOSS sources.</p>"},{"location":"appdevguide.html#52-semantic-versioning-scheme-optional","title":"5.2 Semantic Versioning Scheme (OPTIONAL)","text":"<p>It is recommended that a versioning scheme is used based on https://semver.org/ for the app\u2019s versioning. This setting is also relevant in the snapcraft.yaml file while creating the snap.</p> <p>Note</p> <p>Increasing version numbers are mandatory, regardless of the versioning scheme used</p>"},{"location":"appdevguide.html#53-restart-delay-optional","title":"5.3 Restart Delay (OPTIONAL)","text":"<p>The restart delay of the app daemon should be set to \"5s\" or similar in the snapcraft.yaml to prevent the 10s lock-out</p>"},{"location":"appdevguide.html#6-working-set-overview-mandatory","title":"6 Working Set Overview (MANDATORY)","text":""},{"location":"appdevguide.html#61-security-information-considerations","title":"6.1 Security Information &amp; Considerations","text":"<p>ctrlX CORE is designed with high security requirements. Also, the overall ctrlX CORE architecture is built to be compliant to be certified as defined by IEC62433. This also implies some requirements for the apps and software running in the ctrlX Ecosystem. For the ctrlX app, this means</p> <ul> <li> <p>Only encrypted and secured communication protocols (e.g. https) must be used. Insecure protocols (e.g. http) are not to be used, unless explicitly defined in the validation process.</p> </li> <li> <p>The device attack surface should be kept as minimal as possible. This means, for example, that the number of open ports in an app should be reduced to a minimum.</p> </li> </ul>"},{"location":"appdevguide.html#611-interfaces-slots-plugs-mandatory","title":"6.1.1 Interfaces / Slots &amp; Plugs (MANDATORY)","text":"<p>Used interfaces (Slots &amp; Plugs) must be documented in the snapcraft.yaml file. The following considerations must be taken into account:</p> <ul> <li> <p>Use as few interfaces (slots/plugs) as possible. The amount of interfaces (slots &amp; plugs) shall be limited to a minimum. The app should only declare the interfaces (slots and/or plugs) that are absolutely required to minimize the attack surface. When reviewing the app, Bosch Rexroth needs to know for which purpose a specific slot and/or plug is required by an app. Corresponding justification must be provided together with the app.</p> </li> <li> <p>No global slots &amp; plugs. App developers must avoid assigning global slots &amp; plugs that are valid for all applications. Global slots &amp; plugs should only be used if absolutely necessary.</p> </li> <li> <p>Debug interfaces only on demand. By default, the app should not provide any open network debug interfaces. If debugging is required, the user should be able to enable the debug interface on demand and only after successful authentication (and authorization). In general, debug interfaces shall not be accessible without authentication and/or insufficient or even hard-coded credentials.</p> </li> </ul> <p>The following operating system interfaces which are listed here are denied or restricted for usage:</p> <p>Reserved interfaces, (1. Reserved slots and plugs)</p> <p>This list is subject to change and might be extended. If unsure, please provide the slot/plug you want to use inside your application together with justification to check whether or not this specific slot/plug is allowed and find potential alternatives.</p>"},{"location":"appdevguide.html#612-network-security-and-ports-conditional","title":"6.1.2 Network Security and Ports (CONDITIONAL)","text":"<p>The package-manifest.json must provide information about the used network interfaces. The app must keep its network footprint as low as possible:</p> <ul> <li> <p>No open debug ports by default</p> </li> <li> <p>Binding webserver to Unix socket (preferred) or at least localhost</p> </li> </ul> <p>Security protocols are to be used by default. This means:</p> <ul> <li> <p>No exposure of insecure protocols like http or web socket. ctrlX reverse proxy integration should be used for those specific protocols - Or, in cases where that is not possible, https/websocket secure should be used in the app.</p> </li> <li> <p>Secure protocols are to be used for non-web apps When the app supports secure &amp; insecure protocols, a secure configuration preset must be used for the app, so that the user must choose to override this setting if they want to choose the insecure version</p> </li> <li> <p>The app must provide a list of ports to be used in order to avoid conflicts. The app must therefore be robust to already open / used ports. At least a warning is to be issued to the user.</p> </li> </ul> <p>The ports listed here are blocked and cannot be used by an app:</p> <p>Reserved interfaces, (2. Blocked ports)</p> <p>This list is subject to change and might be extended.</p>"},{"location":"appdevguide.html#613-file-permissions-conditional","title":"6.1.3 File Permissions (CONDITIONAL)","text":"<p>It is very likely that an app stores settings &amp; configuration data in the application's folder (e.g. $SNAP_DATA or $SNAP_COMMON). All file permissions have to be set properly so that only the owner of the files is allowed to read or alter the content.</p>"},{"location":"appdevguide.html#62-resource-consumption-and-readwrite-operations-mandatory","title":"6.2 Resource Consumption and Read/Write Operations (MANDATORY)","text":"<p>Typically, more than one app runs on a ctrlX CORE. It is therefore very important than an app does not consume too many system resources (e.g. RAM or disk space). In addition, the available virtual memory on the device is limited to the amount of physical available memory, because the possibility of swapping unused RAM to disk is disabled on ctrlX CORE. The reasons for this is the otherwise negative impact on real-time capability and flash disk lifetime.</p>"},{"location":"appdevguide.html#621-resource-consumption","title":"6.2.1 Resource Consumption","text":"<p>Recommended amount of resources per app:</p> <ul> <li> <p>RAM: &lt;75 MB</p> </li> <li> <p>Snap-Size: ideally &lt;100 MB, as small as possible</p> </li> </ul> <p>If an app exceeds these values by a long way, then please contact your app partner support to clarify this further.</p>"},{"location":"appdevguide.html#622-integrated-storageflash-lifetime","title":"6.2.2 Integrated Storage/Flash Lifetime","text":"<p>The app must not write diagnostics or similar data cyclically to the internal solid-state memory, as this will damage the flash cells. Instead, cyclical writing can be only be done to a network storage or any other external storage, as these allow easy and regular replacement for this use-case.</p> <p>The integrated storage medium and file system in the ctrlX CORE hardware is based on a solid state flash memory, which inherently has a limited lifetime based on the number of erase cycles for its memory cells. To increase the device\u2019s overall lifetime it is necessary to reduce the number of write/erase cycles on the flash cells.</p>"},{"location":"appdevguide.html#63-standard-task-scheduling-mandatory","title":"6.3 Standard Task Scheduling (MANDATORY)","text":"<p>The app must not have a negative impact on the real-time behavior of other apps. The scheduling / task scheme must remain flexible to allow other apps to run, e.g. the ctrlX Motion app.</p>"},{"location":"appdevguide.html#64-test-setup-for-typical-usage-scenario-mandatory","title":"6.4 Test Setup for Typical Usage Scenario (MANDATORY)","text":"<p>For a fast and efficient start to the validation process, a usage scenario should be provided that does not require any peripheral components. This will help to identify the initial findings quickly and with comparatively little effort. If the app requires additional periphery to run properly, a separate usage scenario should be provided that describes the interaction with the external component.</p> <p>Videos and further media can be attached.</p>"},{"location":"appdevguide.html#7-ctrlx-basic-mechanisms-mandatory","title":"7 ctrlX Basic Mechanisms (MANDATORY)","text":""},{"location":"appdevguide.html#71-ctrlx-license-handling-mandatory","title":"7.1 ctrlX License Handling (MANDATORY)","text":"<p>ctrlX World Partner apps must use the licensing service that is operated by Bosch Rexroth.</p> <p>A license model must be defined for each app. To ensure maximum usability for a ctrlX CORE user, the app must call up the ctrlX license manager API when it starts or is running to check if a license is activated.  If a license is missing, the missing license will be shown to the user on a user interface. A warning or error must be shown in case the license is missing.</p> <p>Each software license (SWL) bought by a customer generates one or more capabilities:</p> <ul> <li> <p>Each app checks the existence of these capabilities, using the license manager interface</p> </li> <li> <p>An app license shall be enforced according to the app business model as part of the contract addendum</p> </li> <li> <p>The usage of other licensing mechanisms is not allowed</p> </li> </ul> <p>For information how to adapt an app to the licensing service please have look on the Licensing guideline</p> <p>Note</p> <p>Currently, the License Manager does not return licenses on a ctrlX COREvirtual.</p>"},{"location":"appdevguide.html#72-app-signing-mandatory","title":"7.2 App Signing (MANDATORY)","text":"<p>To ensure the authenticity and integrity of an app, these apps have to be signed by an authorized body. During the signing process, the app binaries are checked and combined with a signature. Third-Party Apps must successfully pass the validation process to be signed by Bosch Rexroth AG and to be generally available for ctrlX OS users.</p> <p>For apps generally available for all ctrlX OS users only Bosch Rexroth AG is an authorized body to sign an app. For apps that are developed and used by OEMs in their appliances, the OEM can be enabled to sign these apps.</p>"},{"location":"appdevguide.html#721-oem-app-signing","title":"7.2.1 OEM App Signing","text":"<p>As an OEM intending to sell machines or appliances running ctrlX OS, you will likely have custom-developed apps for these specific use cases. In these cases, instead of relying on Bosch Rexroth AG to sign your apps, OEM App Signing enables you to sign your own apps using your own private key and signed OEM certificate issued by Bosch Rexroth AG.</p> <p>Hint</p> <p>Receiving OEM certificates is not possible yet. The SDK will be updated once the issuance process is defined. Until then only Bosch Rexroth can sign ctrlX apps.</p> <p>Bosch Rexroth AG provides you with tools to sign your own apps after receiving your own OEM certificate from Bosch Rexroth AG. The following tools support you to integrate the signing process into your CI pipeline, feel free to adapt the scripts to your needs.</p> <p>To sign apps, use the <code>app-signing-tool.sh</code> script. It accepts the following parameters: - Parameter 1: OEM certificate (issued by Bosch Rexroth) - Parameter 2: Signing Key (private key of the OEM) - Parameter 3: Directory where the snaps to sign are located - Parameter 4: Output directory for the signed apps (optional, defaults to Parameter 3)</p> <p>The script packages all snap files, with the same name and version (different architectures), into the same .app file and signs them by creating a signature file for each architecture. The signature file is packaged into the .app and contains the signature, as well as some metadata derived from the provided OEM-Certificate.</p> <p>The script expects the snaps to follow the naming scheme output by snapcraft when building a snap: <code>&lt;APPNAME&gt;_&lt;VERSION&gt;_&lt;ARCHITECTURE&gt;.snap</code></p> <p>Example: \"myapp_1.4.3_arm64.snap\"</p> <p>The resulting .app will be stuctured like this:</p> <pre><code>myapp_1.4.3.app\n\u2514\u2500\u2500public\n   \u2514\u2500\u2500snaps\n      \u251c\u2500\u2500arm64\n      \u2502  \u2514\u2500\u2500release\n      \u2502     \u2502 myapp_1.4.3.signature\n      \u2502     \u2502 myapp_1.4.3.snap\n      \u2502\n      \u2514\u2500\u2500amd64\n         \u2514\u2500\u2500release\n            \u2502 myapp_1.4.3.signature\n            \u2502 myapp_1.4.3.snap\n</code></pre> <p>The <code>verify-apps.sh</code> script can then be used to verify the signatures of the resulting apps. It accepts the following parameters:</p> <ul> <li>Parameter 1: OEM Certificate</li> <li>Parameter 2: Directory where the apps to be validated are located</li> </ul> <p>Hint</p> <p>Ensure that your OEM certificate is uploaded into the trusted category of the device's certificate store \"App signature validation certificates\" (id: appvalidationcerts) before installing an OEM-signed app, or the installation will fail. This should be done during the provisioning process of the device.  To upload the OEM certificate, you can either use the \"Certificates &amp; Keys\" settings in the Web UI or the certificates REST API.</p>"},{"location":"appdevguide.html#8-ctrlx-security-system-optional","title":"8 ctrlX Security System (OPTIONAL)","text":""},{"location":"appdevguide.html#81-ctrlx-core-reverse-proxy-optional","title":"8.1 ctrlX CORE reverse proxy (OPTIONAL)","text":"<p>The proxy URL is the most important setting in the package-manifest.json file for the app to be integrated seamlessly into the ctrlX CORE. The reverse proxy will forward requests to the URL that are defined for the app web service.</p> <p>Hint</p> <p>Please make sure that your App provides unique URLs for the ctrlX reverse proxy</p> <p>An app is to be bound to a Unix socket instead of a local port. This will also prevent potential collisions with other services.</p> <p>Warning</p> <p>We strongly recommend binding the app web service to a Unix socket, e.g. <code>/var/snap/my-app/current/package-run/my-app/my-app.web.sock</code>, instead of a local port. This will also prevent potential collisions with other services. The path length of a Unix socket is limited to 108 characters. The complete path must respect that limit and the highlighted part has a maximal length of 50 characters. The path can be shortened if necessary by replacing \"package-run\" with \"run\" and shortening the file name from \"my-app.web.sock\" to \"web.sock\". However the folder name within the package-run (or run) folder must always be the name of the snap.</p> <p>Note</p> <p>Example code can be found here: https://developer.community.boschrexroth.com/t5/ctrlX-WORKS/Example-IntegrationWebServer-to-Reverse-Proxy/m-p/20193#M216</p>"},{"location":"appdevguide.html#82-ctrlx-key-certificate-management-optional","title":"8.2 ctrlX Key &amp; Certificate Management (OPTIONAL)","text":"<p>The ctrlX CORE certificate management is to be used to manage your application\u2019s certificates through the web interface. (package-manifest.json, snapcraft.yaml)</p> <p>Note: When the application acts as a ctrlX client, key &amp; certificate based authentication has to be used whenever possible. If user &amp; password based authentication is used, the configuration file permissions have to be correct so that no other user(s) on the system can read those data.</p>"},{"location":"appdevguide.html#83-ctrlx-identity-managementauthentication-authorization-optional","title":"8.3 ctrlX Identity Management/Authentication &amp; Authorization (OPTIONAL)","text":"<p>When running a web service, the app should use the authentication &amp; authorization mechanisms that the ctrlX CORE provides to protect the app against unauthorized access.</p> <p>If the mechanisms the ctrlX CORE provides are not used, hardcoded accounts/credentials have to be avoided.</p> <p>The ctrlX CORE's so called \"scopes\" are to be used to model app permissions. Scopes allow permissions to be assigned to users &amp; groups via the web interface. If case permissions are used, the permissions must be enforced within the app (package-manifest.json)</p> <p>Hint</p> <p>If your app supports scopes, unique scopes must be provided to the ctrlX permission manager</p>"},{"location":"appdevguide.html#9-ctrlx-user-interface-and-project-handling-optional","title":"9 ctrlX User Interface and Project Handling (OPTIONAL)","text":""},{"location":"appdevguide.html#91-ctrlx-configuration-storage-conditional","title":"9.1 ctrlX Configuration Storage (CONDITIONAL)","text":"<p>The ctrlX CORE system provides multiple ways for an app to store its data. The app data must be persisted within one of these locations to provide consistent backup and restore mechanism to users.</p>"},{"location":"appdevguide.html#911-solution-handling-optional","title":"9.1.1 Solution Handling (OPTIONAL)","text":"<p>The so-called \"Solution\" is an essential part of any ctrlX CORE device. It provides a central storage location for all ctrlX apps that need to persist their app data in configurations. Configuration files are saved to the solution storage or loaded from the storage on demand (by the user or by REST API calls).</p> <ul> <li> <p>A configuration file contains project-specific data, like machine-related, PLC, HMI, fieldbus configurations.</p> </li> <li> <p>To be used in the event of one or more configurations that can be easily switched by the user. Configurations are used and shared by multiple apps.</p> </li> <li> <p>It does not contain data that is related to a specific device, e.g. certificates, network configurations, users and their permissions, or should be valid for multiple configurations (e.g. app settings).</p> </li> <li> <p>Should be non-binary (in future version control system / GIT will be used). However, if there is no alternative and the files do not change too often, small binaries can be stored in a configuration.</p> </li> </ul> <p>Apps must use separate, unique repositories in ctrlX configurations.</p>"},{"location":"appdevguide.html#922-environment-variables-conditional","title":"9.2.2 Environment Variables (CONDITIONAL)","text":"<p>Environment variables are widely used across Linux to provide convenient access to system and application properties (see also https://snapcraft.io/docs/environment-variables)</p> <p>In the specific context of ctrlX, the environment variables $SNAP_COMMON or $SNAP_DATA...</p> <ul> <li> <p>...Contain app-related data, that can be used across multiple configurations, e.g. solutions.</p> </li> <li> <p>...Shall not contain data related to the user application, e.g. machine program, and should be applicable on multiple configurations.</p> </li> <li> <p>$SNAP_DATA shall be used for app data related to a specific app version (snap revision).</p> </li> <li> <p>$SNAP_COMMON shall be app data used across versions (snap revisions).</p> </li> </ul>"},{"location":"appdevguide.html#external-storage-sd-card-and-usb-storage-device-not-available-yet","title":"External storage / SD card and USB storage device (not available yet)","text":"<p>Note</p> <p>These external storage devices are not supported at the moment.</p> <p>In the future, they</p> <ul> <li> <p>May contain large data (&gt;100MB) or data that is frequently changed, e.g. logs, analytics, database.</p> </li> <li> <p>Must only contain non-confidential (public) data or data must be protected on app side. Data can be accessed or manipulated from external storage devices.</p> </li> </ul>"},{"location":"appdevguide.html#10-ctrlx-automation-system-functions-optional","title":"10 ctrlX AUTOMATION System Functions (OPTIONAL)","text":""},{"location":"appdevguide.html#101-ctrlx-logbook-and-diagnostic-system","title":"10.1 ctrlX Logbook and Diagnostic System","text":"<p>For further information see ctrlX Diagnostic System inside the ctrlX CORE Runtime Application Manual</p>"},{"location":"appdevguide.html#11-real-time-extension-optional","title":"11 Real Time Extension (OPTIONAL)","text":"<p>Please contact your partner manager if a real-time extension might be required for your app.</p>"},{"location":"appdevguide.html#appendices","title":"Appendices","text":"<p>Base checklist</p> <p>Licensing guideline</p> <p>Reserved interfaces and ports</p> <p>Guidelines for other platforms (not ctrlX OS)</p> <p>Copyright \u00a9 Bosch Rexroth AG 2021-2023</p> <p>This guideline, as well as the data, specifications and other information set forth in it, are the exclusive property of Bosch Rexroth AG. It may not be reproduced or given to third parties without our consent.</p>"},{"location":"appdevguide_basechecks.html","title":"Appdevguide basechecks","text":"<p>This document is part of the Bosch Rexroth ctrlX CORE App Development Guideline, and describes which basic aspects are checked in the Validation Process.</p> <p>Please refer to the App Development Guide for further information.</p> <p>The content of this document may be subject of change in further versions of the Validation Process.</p>"},{"location":"appdevguide_basechecks.html#1-snapcraftyaml","title":"1. snapcraft.yaml","text":""},{"location":"appdevguide_basechecks.html#11-checked-content","title":"1.1 Checked content","text":"Item Criteria title is unique and length is between 3 and 40  characters name matches with the snap name (technical app name) version follows semantic versioning (<code>MAJOR.MINOR.PATCH</code>) and does not exceed 32 characters description provides a short description of the App and is at least 16 characters long degree of isolation is set to <code>confinement = \"strict\"</code> grade is set to <code>grade = \"stable\"</code> restart delay ist set to <code>5</code> or higher plugs list of interfaces consumed by the snap slots list of interfaces provided by the snap (optional) package assets to exchange information package-certificates certificates and keys of the snap (optional)"},{"location":"appdevguide_basechecks.html#12-additional-notes","title":"1.2 Additional notes","text":"<ul> <li>Schema for snapcraft.yaml: https://github.com/snapcore/snapcraft/blob/master/schema/snapcraft.json</li> <li>Schema for technical app name: \"ctrlx-{company name}-{app name}_{app version}_arm64/amd64.snap\"</li> <li>ctrlX Device Portal: App name in Private Repository: If the App is provided in a Private Repository for the ctrlX Device Portal, the Name in the Artifact Description in the Repository should be identical to the Name in snapcraft.yaml. Please see https://docs.automation.boschrexroth.com/doc/2056862327/ctrlx-device-portal/latest/en/ for additional information about the ctrlX Device Portal and the Private Repository.</li> </ul>"},{"location":"appdevguide_basechecks.html#2-package-manifestjson","title":"2. package-manifest.json","text":""},{"location":"appdevguide_basechecks.html#21-checked-content","title":"2.1 Checked content","text":"Item Criteria licenses list of all used licenses (<code>licenses.name, .title, .description .required</code>) certificatestores snap service to handle keys and certificates (optional) menus optional: entries for sidebar integration (if use, the entries must be unique) <p>For each given Proxy Mapping <code>services.proxyMapping[i]</code>: | Item | Criteria | | --- | --- | | name | is only lowercase, contains <code>.web</code> and is unique in the list | | url | is only lowercase and starts with <code>/</code> | | binding | is valid / not empty |</p>"},{"location":"appdevguide_basechecks.html#23-additional-notes","title":"2.3 Additional notes","text":"<ul> <li>the package-manifest.json file must provide service entries for all services which are used in in the portlist-description.json file (proxy.service-name, see 3.)</li> <li>the package-manifest.json file must provide service entries for all services which are used in in the unixsocket-description.json file (socket name and accessibility, see 4.)</li> </ul>"},{"location":"appdevguide_basechecks.html#3-portlist-descriptionjson","title":"3. portlist-description.json","text":""},{"location":"appdevguide_basechecks.html#33-checked-content","title":"3.3 Checked content","text":"Item Criteria id is available and matches to the technical app name (see also name entry in snapcraft.yaml) <p>For each given port in the description (<code>ports[i]</code>): | Item | Criteria | | --- | --- | | number|  has 3 to 5 digits and exists only once in the list| | purpose| has at least 16 characters| | application-protocol| has at least 3 characters| | binding| (Network Binding Interface) is either localhost or IP| | routing |is either internal or external| | service-name |starts with <code>ctrlx-</code> or <code>bosch-</code>, is lowercase and exists only once in the list| | default-state| is either <code>open</code> or <code>closed</code>|</p>"},{"location":"appdevguide_basechecks.html#34-additional-notes","title":"3.4 Additional Notes","text":"<ul> <li>Number of open ports: For security reasons, the number of open ports should be limited to 3</li> <li>Unwanted direct external access: The following configuration should be avoided:</li> <li> <p><code>\"protocol = HTTP or HTTPS\"</code>, <code>\"binding = IP\"</code> and <code>\"routing = external\"</code></p> </li> <li> <p>Wrong configuration: these configurations are considered as mismatch:</p> </li> <li><code>\"protocol not HTTP or HTTPS\"</code>, <code>\"binding = IP\"</code> and <code>\"routing = internal\"</code></li> <li> <p><code>\"protocol not HTTP or HTTPS\"</code>, <code>\"binding = localhost\"</code> and <code>\"routing = external\"</code></p> </li> <li> <p>Port conflicts with reserved ports:</p> </li> <li>Ports that are listed in the Reserved interfaces and ports will generate a vakidation error</li> </ul>"},{"location":"appdevguide_basechecks.html#4-unix-socket-descriptionjson","title":"4. unix-socket-description.json","text":""},{"location":"appdevguide_basechecks.html#41-checked-content","title":"4.1 Checked content","text":"<p>For each given socket <code>(sockets[i])</code> | Item | Criteria | | --- | --- | | name |is only lowercase, end with <code>.sock</code> or <code>.socket</code> and exists only once in the list| | purpose| is at least 16 characters long| | accessibility |is either <code>internal</code> or <code>external</code>|</p>"},{"location":"appdevguide_basechecks.html#42-additional-notes","title":"4.2 Additional notes","text":"<ul> <li>only web sockets (name contains <code>.web</code>) can be used for external accessibility</li> </ul>"},{"location":"appdevguide_basechecks.html#5-slotplug-descriptionjson","title":"5. slotplug-description.json","text":""},{"location":"appdevguide_basechecks.html#51-checked-content","title":"5.1 Checked content","text":"<p>For each given slot <code>(slots[i])</code> and plug <code>(plugs[i])</code> | Item | Criteria | | --- | --- | | name |is only lowercase| | purpose |is at least 16 characters long|</p>"},{"location":"appdevguide_basechecks.html#52-additional-notes","title":"5.2 Additional notes","text":"<ul> <li>both for slots an plugs, the max number of entries should be 8</li> <li>All slots and plugs in the slotplug-description.json must be available in the snapcraft.yaml file also, and vice versa</li> </ul>"},{"location":"appdevguide_basechecks.html#6-scopes-snapnamescopesjson","title":"6. Scopes (${snapname}.scopes.json)","text":""},{"location":"appdevguide_basechecks.html#61-checked-content","title":"6.1 Checked content","text":"Item Criteria id must be assigned (optional) required-permissions must match with the used permissions (optional) <p>Copyright \u00a9 Bosch Rexroth AG 2024 - This document, as well as the data, specifications and other information set forth in it, are the exclusive property of Bosch</p>"},{"location":"appdevguide_docker.html","title":"Appdevguide docker","text":"<p>This document is part of the Bosch Rexroth ctrlX OS App Development Guideline, and describes specific topics for Apps which are based on the Docker container technology</p> <p>Please refer to the App Development Guide for further information about general requirements and checks</p> <p>The content of this document may be subject of change in future.</p> <p>Currently, the ctrlX App Store does not support Docker-based applications.</p>"},{"location":"appdevguide_docker.html#1-artifacts-files","title":"1. Artifacts / Files","text":"<p>In addition to a native Ubuntu Core App, a Docker App shall provide the files in this list</p> Files Description Value(s) Optional / Mandatory Docker-compose.yml The docker-compose.yml file contains the configuration and options to run the services required by the snap docker-compose.yml Mandatory Docker-compose.env The docker-compose.env file contains the environment variable(s) set to run the snaps docker-compose.env Optional"},{"location":"appdevguide_docker.html#2-base-checks","title":"2. Base Checks","text":""},{"location":"appdevguide_docker.html#21-snapcraft-yaml-snapyaml","title":"2.1 snapcraft yaml / snap.yaml","text":"<p>In addition to the checks for snap.yaml which are described here, a Docker App has additional elements:</p> Item Content Optional / Mandatory docker-compose configuration file Mandatory docker-volumes manage app data Mandatory <p>The mandatory entries must be provided like the following:</p> <pre><code>parts:\n  docker-compose:\n    plugin: dump\n    source: ./docker-compose\n    organize:\n      '*': docker-compose/${SNAPCRAFT_PROJECT_NAME}/\nslots:\n  docker-compose:\n    interface: content\n    content: docker-compose\n    source:\n      read:\n        - $SNAP/docker-compose/${SNAPCRAFT_PROJECT_NAME}\n  docker-volumes:\n    interface: content\n    content: docker-volumes\n    source:\n      write:\n        - $SNAP_DATA/docker-volumes/${SNAPCRAFT_PROJECT_NAME}\n</code></pre>"},{"location":"appdevguide_docker.html#22-docker-composeyml","title":"2.2 docker-compose.yml","text":"Item Content Optional / Mandatory version version of the docker-compose Mandatory services information about the docker images, like image name, container name, used ports, required volumes etc. Mandatory volumes mounted volumes Optional ports described ports are not conflicting with standard/blocked ports. and app uses only described ports Optional <p>Note: For example, here you can find information about syntax of a compose file: https://github.com/compose-spec/compose-spec/blob/master/spec.md</p>"},{"location":"appdevguide_docker.html#23-docker-composeenv","title":"2.3 docker-compose.env","text":"<p>This file is optional and provides all environment variables which are used in the docker-compose.yml</p> Item Content Optional / Mandatory variables All variables in docker-compose.yml are provided here Optional"},{"location":"appdevguide_other-technologies.html","title":"APPENDIX TO THE CTRLX APP DEVELOPMENT GUIDELINES","text":""},{"location":"appdevguide_other-technologies.html#1-document-overview","title":"1. Document Overview","text":"<p>This document is part of the Bosch Rexroth ctrlX CORE App Development Guidelines, and gives hints for Components and Apps, which are not provided as Linux Ubuntu Core App. Please make sure that you know the App Development Guidelines, that you can easily understand the content of this document.</p> <p>The following deployment technologies are considered here</p> <ul> <li>Windows Application (usually Engineering Tools for ctrlX CORE and ctrlX CORE Apps)</li> <li>PLC Libraries, which are used in the ctrlX CORE PLC App based on Codesys</li> <li>Node-RED palettes which are loaded into the ctrlX CORE Node-RED App</li> </ul> <p>For each technology this document povides</p> <ul> <li>A List of aspects which have to be considered in general for onboarding to ctrlX World. Please refer to the App Development Guide for further information on these aspects.</li> <li>A brief description of aspects, which are specific to the used deployment technology</li> </ul> <p>The content of this document may be subject of change in further versions of the Validation Process.</p>"},{"location":"appdevguide_other-technologies.html#2-windows-applications","title":"2. Windows Applications","text":""},{"location":"appdevguide_other-technologies.html#21-general-aspects","title":"2.1. General Aspects","text":"<p>These aspects, which are also part of the App Development Guidelines main document, must be supported by Windows Applications:</p> <ul> <li>Basic App Information - App Documentation (see App Development Guide Chapter 4.2)</li> <li>Basic App Information - FOSS Info Provisioning (see App Development Guide Chapter 4.4)</li> <li>Further App Information - FOSS Sources (see App Development Guide Chapter 5.1)</li> <li>Further App Information - Semantic Versioning Scheme (see App Development Guide Chapter 5.2)</li> <li>Working Set Overview - Test Setup for Typical Usage Scenario (see App Development Guide Chapter 6.4)</li> <li>ctrlX Basic Mechanisms - License Handling (see App Development Guide Chapter 7.1) - this is applicable to Windows Applications only which require licenses. Please get in touch with your ctrlX World partner manager at Bosch Rexroth for further information about Licensing on Windows</li> </ul>"},{"location":"appdevguide_other-technologies.html#22-specific-topics","title":"2.2 Specific Topics","text":"<p>In addition to general aspects, Windows Applications must support the following topics:</p> <ul> <li>Signed installation file (msi) with accordings certificate - the Application is protected against unwanted / unauthorized modification (like e.g. code injections)</li> <li>System Requirements - Overview about minimum and recommended environment, like Windows version, Memory, Processor</li> </ul>"},{"location":"appdevguide_other-technologies.html#3-plc-libraries-and-function-blocks","title":"3. PLC Libraries and Function Blocks","text":""},{"location":"appdevguide_other-technologies.html#31-general-aspects","title":"3.1. General Aspects","text":"<p>These aspects, which are also part of the App Development Guidelines main document, must be supported by PLC Libraries and Function Blocks:</p> <ul> <li>Basic App Information - App Documentation (see App Development Guide Chapter 4.2)</li> <li>Basic App Information - FOSS Info Provisioning (see App Development Guide Chapter 4.4)</li> <li>Further App Information - FOSS Sources (see App Development Guide Chapter 5.1)</li> <li>Further App Information - Semantic Versioning Scheme (see App Development Guide Chapter 5.2)</li> <li>Working Set Overview - Network Security and Ports (see App Development Guide Chapter 6.1.2)</li> <li>Working Set Overview - Standard Task Scheduling (see App Development Guide Chapter 6.3.)</li> <li>Working Set Overview - Test Setup for Typical Usage Scenario (see App Development Guide Chapter 6.4)</li> <li>ctrlX Basic Mechanisms - License Handling (see App Development Guide Chapter 7.1)</li> <li>ctrlX Basic Mechanisms - Library Signing (see App Development Guide Chapter 7.2) Note: signing process currently in development at Rexroth</li> </ul>"},{"location":"appdevguide_other-technologies.html#32-specific-topics","title":"3.2 Specific Topics","text":"<p>In addition to general aspects, PLC Libraries and Function Blocks must support the following topics:</p> <ul> <li>Library Header with official supplier info (Lib info)</li> <li>Integrated Library Documentation for direct use in PLC Engineering (based on Codesys)</li> <li>Compiled Library strongly recommended</li> <li>System Requirements - PLC App version</li> </ul>"},{"location":"appdevguide_other-technologies.html#4-node-red-palettes","title":"4. Node-RED Palettes","text":""},{"location":"appdevguide_other-technologies.html#41-general-aspects","title":"4.1. General Aspects","text":"<p>These aspects, which are also part of the App Development Guidelines main document, must be supported by Node-RED Palettes:</p> <ul> <li>Basic App Information - App Documentation (see App Development Guide Chapter 4.2)</li> <li>Basic App Information - FOSS Info Provisioning (see App Development Guide Chapter 4.4)</li> <li>Further App Information - FOSS Sources (see App Development Guide Chapter 5.1)</li> <li>Further App Information - Semantic Versioning Scheme (see App Development Guide Chapter 5.2)</li> <li>Working Set Overview - Network Security and Ports (see App Development Guide Chapter 6.1.2)</li> <li>Working Set Overview - Standard Task Scheduling (see App Development Guide Chapter 6.3.)</li> <li>Working Set Overview - Test Setup for Typical Usage Scenario (see App Development Guide Chapter 6.4)</li> <li>ctrlX Basic Mechanisms - License Handling (see App Development Guide Chapter 7.1)</li> </ul>"},{"location":"appdevguide_other-technologies.html#42-specific-topics","title":"4.2 Specific Topics","text":"<p>In addition to general aspects, Node-RED Palettes must support the following topics:</p> <ul> <li>Provisioning / Deployment via Node-RED palette manager</li> </ul> <p>Copyright SPDX-FileCopyrightText: Bosch Rexroth AG</p>"},{"location":"appdevguide_reserved-interfaces.html","title":"Appdevguide reserved interfaces","text":"<p>This document is part of the Bosch Rexroth ctrlX OS App Development Guideline, and describes which interfaces (port, plugs and slots) are reserved and may not be used by a ctrlX OS App</p> <p>Please refer to the App Development Guide for further information.</p> <p>The content of this document may be subject of change in future.</p>"},{"location":"appdevguide_reserved-interfaces.html#1-reserved-slots-and-plugs","title":"1. Reserved slots and plugs","text":"<p>The following operating system interfaces are denied or restricted for usage. See also https://snapcraft.io/docs/supported-interfaces.</p> Interface Direction Parameters Exceptions Reason system-files Plug null \"'read=^(\\/dev\\/shm| \\/dev\\/shm\\/.+)', 'write=^(\\/dev\\/shm| \\/dev\\/shm\\/.+)$'\" Prevent access to system files, except shared memory account-control Plug null null Prevent uncontrolled access to user and group databases snapd-control Plug null null Prevent uncontrolled access to system configuration content Plug content=package-certificates null Prevent apps to act as device admin content Plug content=package-run null Prevent apps to act as device admin content Slot content=active-solution null Prevent apps to act as solution snap content Slot content=auth-service null Prevent unauthorized access, service to service authentication content Slot content=rda-proxy-service null Prevent uncontrolled access to proxy service content plug content=rda-proxy-service null Prevent unacontrolled access to proxy service block-devices plug null null Prevent mounting of partitions raw-volumes Plug null null Prevent mounting of partitions udisk2 Slot null null Prevent mounting of partitions udisk2 Plug null null Prevent mounting of partitions docker Plug null null Prevent access to docker socket docker-support Slot null null Prevent operating as the docker daemon because of possibility of privileg escalation docker-support Plug null null Prevent operating as the docker daemon because of possibility of privileg escalation acrn-support Plug null null Not being supported and potential dangerous bool-file Plug null null Bool files are normally located in /sys - no write access to this folder browser-support Plug null null Denylist classic-support Plug null null Classic support bypass all snapd security mechanism core-support Plug null null Deprecated cpu-control Plug null null Allows setting CPU tunables daemon-notify Plug null null Allows sending daemon status changes to the service manager. dm-crypt Plug null null Storage support including encryption is part of the DeviceAdmin firewall-control Plug null null Firewall app handles firewall rules fpga Plug null null Allows access to fpga subsystem use-support Plug null null Allows access to fuse subsyten fwupd Plug null null Enabling privileged access to update UEFI firmware gconf Plug null null Allows configuration of Gconf, typically used by old GNOME libs gpg-keys Plug null null Allows reading GNU Privacy Guard (GPG) user configuration and keys as well as enabling GPG\u2019s random seed to be updated gpio-control Plug null null Super-privileged access to gpio pins gpio-memory-control Plug null null Allows write access to all GPIO memory greengrass-support Plug null null Allows operating as the Greengrass service to access resources and syscalls necessary to run Amazon Greengrass services and lambda functions hardware-random-control Plug null null Enables control over the hardware random number generator by allowing read/write access to /dev/hwrng hidraw Plug null null Enables raw access to USB and Bluetooth Human Interface (hidraw) devices. This interface is restricted because it provides privileged access to hardware devices home Plug null \"read:all\" Allows access to non-hidden files owned by the user in the user\u2019s home directory. There is no home folder for the users on ctrlX CORE hugepages-control Plug null null Handle memory is part of the DeviceAdmin intel-mei Plug null null Enables access to the Intel MEI management interface io-ports-control Plug null null Allows access to all I/O ports, including the ability to write to /dev/port to change the I/O port permissions, the privilege level of the calling process, and disabling interrupts ion-memory-control Plug null null Allows access to the Android ION memory allocator, a Linux kernel feature for managing one or more memory pools kernel-module-control Plug null null Provides the ability to insert, remove and query kernel modules. This interface gives privileged access to the device kernel-module-load Plug null null Provides the ability to load, or deny loading, specific kernel modules. This interface gives privileged access to the device kubernetes-support Plug null null Allows operating as the Kubernetes service and running application containers kvm Plug null null Allows access to the /dev/kvm device, providing privileged access and control of the KVM hypervisor libvirt Plug null null Enables access to the libvirt control socket, which gives privileged access to control libvirtd on the host login-session-control Plug null null Allows setup of login sessions and grants privileged access to user sessions. lxd Plug null null Allows access to the LXD API via the socket provided by the lxd snap lxd-support Plug null null Enables operating as the LXD service microstack-support Plug null null Interface enables multiple service access for the Microstack infrastructure mount-control Plug null \"Except storage-extension concept\" Allows the mounting and unmounting of both transient (non-persistent) and persistent filesystem mount points. This interface gives privileged access to the device multipass-support Plug null null Allows operating as the Multipass service netlink-audit Plug null null Allows access to the kernel part of the Linux Audit Subsystem through Netlink netlink-connector Plug null null Allows communication through the kernel Netlink connector netlink-driver Plug null null Allows a kernel module to expose itself to user-space via the Netlink protocol, typically to transfer information between the kernel and user-space processes network-control Plug null null Gives access to wifi credentials network-manager Plug null null Gives access to wifi credentials network-manager-observe Plug null null Gives access to wifi credentials network-setup-control Plug null null Gives access to wifi credentials network-setup-observe Plug null null Gives access to wifi credentials packagekit-control Plug null null Allows control of the PackageKit service, giving privileged access to native package management on the system password-manager-service Plug null null Provides access to the global password manager services provided by popular desktop environments, such as Secret Service and Kwallet personal-files Plug null null Provides access to the specified files in the user\u2019s home. This interface gives privileged access to the user\u2019s data physical-memory-control Plug null null Allows write access the to physical address space via the /dev/mem device physical-memory-observe Plug null null Allows read access the to physical address space via the /dev/mem device polkit-interface Plug null null Provides daemons with the permission to use the polkit authorisation manager (polkitd) to make access control decisions for requests from unprivileged clients process-control Plug null null Prevent tampering with running processes scsi-generic Plug null null Allows read and write access to SCSI Generic driver (sg) devices sd-control Plug null null Allows for the management and control of SD cards on certain devices using the DualSD driver shared-memory Plug null \"shared-memory=^(datalayer-shm)$\" Allows two snaps to communicate with each other using a specific predefined shared-memory path or directory in /dev/sh snap-refresh-control Plug null, \"Exceptions\":null Super privileged interface to allow extended control, via snapctl, of refreshes targeting the snap ssh-keys Plug null null Allows a user\u2019s SSH (Secure Socket Shell) configuration to be read, along with both their public and private keys storage-framework-service Plug null null Allows operating as, or interacting with, the Storage Framework - storage is part of the DeviceAdmin system-backup Plug null null Provides read-only access to the system via /var/lib/snapd/hostfs. This interface gives privileged access to system data system-trace Plug null null Enables the monitoring and control of any running program, via kernel tracing facilities. This interface is restricted because it gives privileged access to all processes on the system and should only be used with trusted apps tee Plug null null Permits access to Trusted Execution Environment (TEE) devices via the TEE subsystem in the Linux kernel tpm Plug null null tpm allows access to the Trusted Platform Module (tpm) device, /dev/tpm0, and to the in-kernel resource manager, /dev/tpmrm0, on recent kernels (at least v4.12) uhid Plug null null Enables the creation of kernel USB Human Interface Devices (HID) from user-space, via /dev/uhid , giving privileged access to HID transport drivers uinput Plug null null Super privileged interface to allows write access to /dev/uinput on the host system for emulating input devices from userspace that can send input events"},{"location":"appdevguide_reserved-interfaces.html#2-blocked-ports","title":"2. Blocked ports","text":"<p>The following ports are blocked and cannot be used by an app.</p> Reserved by Reserved ports ctrlX OS 22, 80, 81, 443, 1338, 1880, 1900, 2069, 2070, 4840, 5355, 5353, 5858, 6000, 7878, 8069, 11740, 11741 Other apps 1881, 1884, 1885, 2883, 4222, 6123, 7505, 9230, 9240, 8000, 8080, 8088, 8142, 8840, 8883, 10123, 16620, 16700, 16701, 16800, 16810, 18500, 47808, 48898, 49250-50250, 56090, 58000, 51218 <p>Copyright \u00a9 Bosch Rexroth AG 2024 - This document, as well as the data, specifications and other information set forth in it, are the exclusive property of Bosch</p>"},{"location":"appdevguide_systemreport.html","title":"Appdevguide systemreport","text":"<p>This document is part of the Bosch Rexroth ctrlX OS App Development Guideline, and describes how a ctrlX OS App can integrate in the ctrlX OS System Report</p> <p>Please refer to the App Development Guide for further information.</p> <p>The content of this document may be subject of change in future.</p>"},{"location":"appdevguide_systemreport.html#introduction","title":"Introduction","text":"<p>The ctrlX OS system report is provided as zip file. ctrlX OS Apps can participate in this mechanism and provide their own log information and other files. This document describes, which interfaces are available in ctrlX OS to automatically add App specific information to the system report.</p> <p>Note: This mechanism is available in ctrlX OS 1.20 or higher</p>"},{"location":"appdevguide_systemreport.html#integration-in-the-ctrlx-os-system-report","title":"Integration in the ctrlX OS System Report","text":""},{"location":"appdevguide_systemreport.html#information-in-snapcraftyaml","title":"Information in snapcraft.yaml","text":"<ul> <li>\"apps\" section: add \"package-run\" to the slots of your service(s) that will add files to the system report</li> <li>\"slots\" section: add the \"package-run\" sections as described below:</li> </ul> <pre><code>apps:\n  ...\n  my-service:\n    slots: [..., package-run, ...]\n\n...\n\nslots:\n  ...\n  package-run:\n    interface: content\n    content: package-run\n    source:\n      write:\n        - $SNAP_DATA/package-run/${SNAPCRAFT_PROJECT_NAME}\n</code></pre>"},{"location":"appdevguide_systemreport.html#files-for-system-report","title":"Files for System Report","text":"<p>The files, which will be part of the System Report, will be provided in this directory:</p> <pre><code>$SNAP_DATA/package-run/$SNAP_INSTANCE_NAME/logs\n</code></pre> <ul> <li>Access mode for files: 0644</li> <li>Access mode for the directory: 0755</li> </ul>"},{"location":"appdevguide_systemreport.html#example","title":"Example","text":"<p>With</p> <pre><code>$SNAP_INSTANCE_NAME: my-snap\n$SNAP_DATA: /var/snap/my-snap/current\n</code></pre> <p>and the directory structure</p> <pre><code>drwxr-xr-x  root root  /var/snap/my-snap/current\ndrwxr-xr-x  root root  /var/snap/my-snap/current/package-run\ndrwxr-xr-x  root root  /var/snap/my-snap/current/package-run/my-snap\ndrwxr-xr-x  root root  /var/snap/my-snap/current/package-run/my-snap/logs\n-rw-r--r--  root root  /var/snap/my-snap/current/package-run/my-snap/logs/my-log-file.log\ndrwxr-xr-x  root root  /var/snap/my-snap/current/package-run/my-snap/logs/my-dir\n-rw-r--r--  root root  /var/snap/my-snap/current/package-run/my-snap/logs/my-dir/my-other-file.dat\ndrwxr-xr-x  root root  /var/snap/my-snap/current/package-run/my-snap/logs/my-empty-dir\n</code></pre> <p>the following files and directories are added to the system report:</p> <pre><code>my-log-file.log\nmy-dir/my-other-file.dat\nmy-empty-dir\n</code></pre>"},{"location":"changelog.html","title":"Changelog","text":""},{"location":"changelog.html#software-development-kit-for-ctrlx-automation","title":"Software Development Kit for ctrlX AUTOMATION","text":""},{"location":"changelog.html#version-262-july-2024","title":"Version 2.6.2  July, 2024","text":"<ul> <li>Docu: Improve documentation</li> <li>Fix flatbuffers constant in all generated c# files to 'FLATBUFFERS_24_3_25'</li> <li>Fix download of SDK version</li> <li>Node: Use node version 20.15.1</li> </ul>"},{"location":"changelog.html#version-261-june-2024","title":"Version 2.6.1  June, 2024","text":"<ul> <li>Docu: Improve documentation</li> <li>Some internal Bugfixes</li> <li>Increase internal dependencies</li> </ul>"},{"location":"changelog.html#version-260-may-2024","title":"Version 2.6.0  May, 2024","text":"<ul> <li>Docu: Improve documentation</li> <li>Moved angular sample to node samples</li> <li>C#: Upgrade to .NET 8</li> <li>Go: Use package <code>ctrlx-datalayer-golang/v2</code></li> <li>Node: Use node version 20.12.0</li> <li>ctrlX Data Layer: Use version 2.6.1</li> </ul>"},{"location":"changelog.html#version-240-november-2023","title":"Version 2.4.0  November, 2023","text":"<ul> <li>Fix: Some internal Bugfixes</li> <li>Docu: Improve documentation</li> </ul>"},{"location":"changelog.html#version-220-august-2023","title":"Version 2.2.0  August, 2023","text":"<ul> <li>Use base: core22 as basis for each sample project</li> <li>Bump sample projects to core22</li> <li>Use new ctrlX Data Layer with version 2.x</li> </ul>"},{"location":"changelog.html#version-1200-march-10-2023","title":"Version 1.20.0  March 10, 2023","text":"<ul> <li>Documentation and examples for the use of (external) media added</li> <li>Documentation how to use an extenable denylist</li> </ul>"},{"location":"changelog.html#version-1180-november-30-2022","title":"Version 1.18.0  November 30, 2022","text":"<ul> <li>Adapt bulk operation from ctrlX Data Layer</li> <li>Add new samples for bulk operations</li> <li>Update documentation</li> </ul>"},{"location":"changelog.html#version-1160-july-15-2022","title":"Version 1.16.0  July 15, 2022","text":"<ul> <li>Increase maximum numbers of opened files: Docu and sample project</li> <li>Convert Flatbuffers Schema Files to IEC61131 Code: Chapter in documentation Getting Started, PLC sample in samples-iec61131/fbs2plc</li> <li>Metadata database examples added to samples-cpp/datalayer.register.node and samples-python/datalayer.provider</li> <li>Revisions regarding Virtual Box and Native Ubuntu 20.04</li> <li>Deploy fbs only in namepaces</li> </ul> <p>See also Changes of the App Build Environment</p>"},{"location":"changelog.html#version-1140-march-15-2022","title":"Version 1.14.0  March 15, 2022","text":"<ul> <li>Use flatbuffers version 1.12 for c/c++ projects</li> <li>Use flatc 2.0</li> <li>Remove RT Bundles from SDK</li> <li>Restructured sample projects docu</li> <li>Quick Start Guide</li> <li>Using ctrlX WORKS function 'App Building Environments'</li> <li>Using Snapcraft Remote Build from Canonical</li> </ul>"},{"location":"changelog.html#version-1120-november-22-2021","title":"Version 1.12.0  November 22, 2021","text":"<ul> <li>Change samples to Ubuntu20</li> <li>Add QEMU as new recommended build environment</li> <li>Added node-package</li> <li>Added Node.js <code>Hello-Webserver</code> sample</li> <li>Added Node.js <code>ctrlX Data Layer Client</code></li> <li>Added C++ <code>Automation Diagnosis</code></li> <li>Added C++ <code>Automation Trace</code></li> <li>Added C++ <code>ctrlX Data Layer Diagnosis</code></li> <li>Added Samples for TPM2</li> <li>Added Developer Guidline</li> <li>Added description to adapt licensing mechanism</li> <li>Added <code>Bundle Description (doxygen)</code> for trace/diagnosis</li> </ul>"},{"location":"changelog.html#version-1100-july-15-2021","title":"Version 1.10.0  July 15, 2021","text":"<ul> <li>Added python <code>appdata</code> sample </li> <li>Added python <code>ctrlX Data Layer Browse</code> sample </li> <li>Added python <code>ctrlX Data Layer Client (complex)</code> sample </li> <li>Added python <code>ctrlX Data Layer Client Subsrciption</code> sample </li> <li>Added python <code>ctrlX Data Layer Provider all-data</code> sample </li> <li>Added python <code>Webserver</code> sample </li> <li>Added python <code>Calculation</code> sample </li> <li>Refactored <code>hello.webserver</code> sample in go</li> <li>Added go <code>appdata</code> sample</li> <li>Added TPM2 sample in go and shell scripts </li> <li>Adapt style</li> <li>Added Api Refernece c/c++ python and c#</li> <li>Improve Documentation</li> <li>Added Python Sample with different Loglevels</li> <li>Added C# Sample with different Loglevels</li> <li>Added C++ Sample with different Loglevels</li> <li>Remove REST API's from package (available online)</li> </ul>"},{"location":"changelog.html#version-180-march-25-2021","title":"Version 1.8.0  March 25, 2021","text":"<ul> <li>Added .NET 5 (.NET Core) <code>hello.world</code> sample (self-contained)</li> <li>Added .NET 5 (.NET Core) <code>ctrlX Data Layer Browse</code> sample (self-contained)</li> <li>Added .NET 5 (.NET Core) <code>ctrlX Data Layer Client</code> sample (self-contained)</li> <li>Added .NET 5 (.NET Core) <code>ctrlX Data Layer Provider</code> sample (self-contained)</li> <li>Added .NET 5 (.NET Core) <code>ctrlX Data Layer Demo</code> sample (self-contained)</li> <li>Added python <code>ctrlX Data Layer Client</code> sample </li> <li>Added python <code>ctrlX Data Layer Provider</code> sample </li> <li>Added python API Documentation</li> <li>Added .NET 5 (.NET Core) API Documentation</li> </ul>"},{"location":"changelog.html#version-160-november-15-2020","title":"Version 1.6.0  November 15, 2020","text":"<ul> <li>Changed license from BSD3 to MIT</li> <li>Refactored hello.webserver sample</li> <li>Added <code>datalayer.ecat.io</code> sample (exemplary work with fieldbus)</li> <li>Added API descriptions</li> <li>Extended <code>datalayer.register.node</code> and <code>datalayer.client</code> sample with flatbuffers</li> <li>Prepared experimental remote snap debugging</li> <li>Added <code>datalayer.realtime</code> sample (share real time data)</li> </ul>"},{"location":"changelog.html#version-140-july-15-2020","title":"Version 1.4.0  July 15, 2020","text":"<ul> <li>Prepare first release</li> </ul>"},{"location":"connecting_qemu_vm_ctrlx.html","title":"Connecting QEMU VMs and ctrlX CORE","text":"<p>This document describes how SDK App Build Environments (resp. QEMU VMs) and a ctrlX CORE can be connected.</p> <p>In our examples we are assuming a Windows 10 host with px.exe as local proxy.</p>"},{"location":"connecting_qemu_vm_ctrlx.html#connections-between-host-and-sdk-qemu-vms","title":"Connections between Host and SDK QEMU VMs","text":"<p>A SDK QEMU VM is always connected to it's host computer via port forwarding. So from the hosts point of view services of a SDK VM are a reachable via the address localhost:FORWARDED_PORT</p> <p>In our examples below port 10022 of the host is forwarded to port 22 (SSH) of the SDK amd64 VM and port 20022 to port 22 of SDK aarch64 VM.</p> <p>From the SDK QEMU VMs perspective:</p> <ul> <li>10.0.2.2 is the IP address of the host computer</li> <li>10.0.2.2 is also used as gateway address *1)</li> <li>http://10.0.2.2:3128 is the URL of the proxy server px.exe running on the Windows host</li> </ul> <p>*1) The QEMU instance emulates a gateway server. This makes it possible that other network participants can be reached via their IP address. The QEMU internal gateway service routes the network packages to their destinations.</p>"},{"location":"connecting_qemu_vm_ctrlx.html#connection-between-host-and-ctrlx-core-controls","title":"Connection Between Host and ctrlX CORE Controls","text":"<p>There are three ways to connect ctrlX controls:</p> <ol> <li>ctrlX CORE<sup>virtual</sup> with Port Forwarding configured in ctrlX WORKS</li> <li>ctrlX CORE<sup>virtual</sup> with virtual Network Adapter configured in ctrlX WORKS</li> <li>ctrlX CORE</li> </ol>"},{"location":"connecting_qemu_vm_ctrlx.html#ctrlx-corevirtual-with-port-forwarding","title":"ctrlX CORE<sup>virtual</sup> with Port Forwarding","text":"<p>Like the SDK VMs the ctrlX CORE<sup>virtual</sup> is connected via port forwarding which is configured in ctrlX WORKS. When the ctrlX CORE<sup>virtual</sup> is started port forwarding is done by an internally started QEMU instance.</p> <p></p> <p>In the picture above port 12345 is used for C++ remote debugging and its forwarding has to be configured in ctrlX WORKS too.</p> <p>Important</p> <p>If port 8443 of the host is forwarded to port 443 of the ctrlX (default) add sslport=8443 to the TCP connection string:</p> <p>In this case the connection string has this suffix ?sslport=8443:</p> <pre><code>tcp://boschrexroth:boschrexroth@10.0.2.0?sslport=8443\n</code></pre> <p>Otherwise change port forwarding to 443:443.</p>"},{"location":"connecting_qemu_vm_ctrlx.html#ctrlx-corevirtual-with-network-adapter","title":"ctrlX CORE<sup>virtual</sup> with Network Adapter","text":"<p>In this case a ctrlX CORE<sup>virtual</sup> is provided by ctrlX WORKS and its internal QEMU instance with a virtual network adapter. The default IP address of this adapter is 192.168.1.1.</p> <p>To connect the Windows host with the ctrlX CORE<sup>virtual</sup> a so called TAP Windows Adapter v9 is created by ctrlX WORKS.</p> <p></p> <p>The connection string for ctrlX Data Layer access in this case is:</p> <pre><code>tcp://boschrexroth:boschrexroth@192.168.1.1\n</code></pre>"},{"location":"connecting_qemu_vm_ctrlx.html#ctrlx-core","title":"ctrlX CORE","text":"<p>The ctrlX CORE is connected to the Windows host via its network adapter.</p> <p>The connection string for ctrlX Data Layer access e.g. is:</p> <pre><code>tcp://boschrexroth:boschrexroth@10.52.244.123\n</code></pre>"},{"location":"ctrlx_automation.html","title":"ctrlX AUTOMATION","text":""},{"location":"ctrlx_automation.html#what-is-ctrlx-automation","title":"What is ctrlX AUTOMATION?","text":"<p>ctrlX AUTOMATION surmounts the classic boundaries between machine control, the IT world and the Internet of Things. With a Linux real-time operating system, consistently open standards, app programming technology, web-based engineering and a comprehensive IoT connection.</p> <p>Visit the official website to get additional information: ctrlX AUTOMATION</p>"},{"location":"ctrlx_automation.html#ctrlx-core-fundamentals","title":"ctrlX CORE Fundamentals","text":"<p>Find out fundamental informations and technical data about ctrlX CORE</p> <p></p>"},{"location":"data-exchange.html","title":"Introduction","text":"<p>You can use external storage (\u03bcSD card / USB device) for data exchange purpose (removable media). Can be used from Device Admin 1.16.</p> <p>If a storage extension is required, please see documentation of Storage extension.</p> <p>Attention</p> <ul> <li>The data on the external storage (\u03bcSD card / USB device) is not encrypted. Others can unplug the device and can read the data on another devices.</li> <li>The storage with ext4 and fat32 format are supported (formatting can be done in ctrlX UI: Settings-&gt;Storage).</li> <li>There is no exclusive access to the medium for a singe application. Your data can be overwritten by other applications.</li> <li>The data written to the storage cannot be encrypted.</li> </ul>"},{"location":"data-exchange.html#requirements","title":"Requirements","text":"<p>A storage is inserted, formatted and mounted:</p> <p>If the storage is not formatted as fat32 or ext4, please format it first.</p> <p>To format or mount a storage, use the according buttons in the details window of the Storage. The details window appears, when you select the according tile of the storage:</p> <p>After the storage is mounted, the path is displayed on the details page of the storage:</p> <p>Alternatively, the mount point is determinable in the ctrlX Data Layer (in Settings menu) under system/resources/storage</p>"},{"location":"data-exchange.html#configuration-steps","title":"Configuration steps","text":"<p>To access the storage from your app (e.g. storage-test), use the removable-media interface as plug in the snapcraft.yaml of your application:</p> <p>Example</p> snapcraft.yaml<pre><code>name: storage-test # you probably want to 'snapcraft register name'\nbase: core20 # the base snap is the execution environment for this snap\nversion: '0.1' # just for humans, typically 'i.2+git' or '1.3.2'\nsummary: Single-line elevator pitch for your amazing snap # 79 char long summary\ndescription: |\n    This is my-snap's description.\n    You have a paragraph or two to tell the most important story about your snap.\n    Keep it under 100 words though,\n    we live in tweet space and your description wants to look good in the snap store.\n\ngrade: devel # must be 'stable' to release into candidate/stable channeis\nconfinement: strict # use 'strict' once you have the right plugs and slots\narchitectures:\n    - all\nparts:\n    storage:\n        plugin: dump\n        source: storage\napps:\n    storage:\n        command: bin/storage\n        daemon: simple\n        plugs:\n            - removable-media\n</code></pre>"},{"location":"data-exchange.html#usage","title":"Usage","text":"<ul> <li> <p>Install your app in ctrlX UI via Settings \u2192 Apps \u2192 Install from file.</p> </li> <li> <p>After installation, you have permissions to read and write data in the mounted directory. The path is displayed in Storage details page <code>/media/&lt;storage&gt;</code>.</p> </li> </ul>"},{"location":"datalayer.html","title":"Documentation","text":"<ul> <li>naming conventions</li> <li>provider</li> <li>Routing of requests</li> <li>Provider Interface functions</li> <li>Usage of Variant</li> <li>Usage of flatbuffers</li> <li>Metadata</li> <li>Typetree</li> <li>Usage of client</li> </ul>"},{"location":"datalayer.html#node-names","title":"Node names","text":"<p>Each value is addressed by a path. A path creates of a set of nodes. When nodes are named, an API is intuitive and easy to use. If done poorly, that same API can feel difficult to use and to understand.</p> <p>A node can be a singleton or a collection. For Example <code>customers</code> is a collection node and <code>customer</code> is a singleton resource (in a banking domain). We can identify <code>customers</code> collection resource using the path <code>/customers</code>. We can identify a single <code>customer</code> resource using the path <code>/customers/{customerID}</code>.</p> <p>A node may contain sub-collection resources also. For example, sub-collection resource <code>accounts</code> of a particular <code>customer</code> can be identified using the path <code>/customers/{customerId}/accounts</code> (in a banking domain). Similarly, a singleton resource <code>account</code> inside the sub-collection resource <code>accounts</code> can be identified as follows:  <code>/customers/{customerId}/accounts/{accountId}</code>.</p>"},{"location":"datalayer.html#provider","title":"Provider","text":"<p>A provider is responsible for nodes. One provider can handle an unlimited amount of nodes. All requests to one provider are serialized: It's guarantied that if you are in one of the interface functions of a node (onRead, onWrite, ...) no other interface function of a node handled by the same provider is called. So you don't have to handle mutual exclusion to data handled by one provider.</p>"},{"location":"datalayer.html#register-of-nodes","title":"Register of nodes","text":"<p>To register a path you have to specify which ProviderNode is responsible for this node.</p> <p>Example: Registration for ethercat/version: whenever a request for \"ethercat/version\" is send, this request will be routed to this particular node.</p> <p>If a provider is responsible for multiple nodes or the subnodes are unknown at the moment of registration, its possible to register with wildcards.</p>"},{"location":"datalayer.html#single-wildcard","title":"Single wildcard \"*\"","text":"<p>A single wildcard is the sign \"*\". \"*\" stands for a any string on a hierarchy level. You can use multiple wildcards at different levels.</p> <p>Examples:</p> <ul> <li>provider1: test/*</li> <li>provider2: test/foo/*/bar</li> <li>provider3: test/*/foo</li> <li>provider4: test/*/*</li> <li>provider5: test/bar/bar</li> </ul>"},{"location":"datalayer.html#double-wildcard","title":"Double wildcard \"**\"","text":"<p>A double wildcard is the string \"**\". \"**\" stands for any string on any hierarchy level. Such a wildcard is only allowed as last characters at your registration string.</p> <p>Example:</p> <ul> <li>provider6: test/**</li> <li>provider7: test/bar/**</li> </ul>"},{"location":"datalayer.html#routing-of-requests","title":"Routing of requests","text":"<p>All requests except browse requests are routed to the provider the address matches best to the registered path. So on each level a registration with a specific path matches before a registration with a wildcard. A single wildcard matches before a double wildcard. An address matches always the best registered provider (see example). Only provider with a wildcard at end of it's registered address will get browse requests.</p>"},{"location":"datalayer.html#behavior-of","title":"Behavior of '/'","text":"<p>Any '/' at begin or end at the request address will be removed. A provider will never get an address with a leading or tailing '/'. Routing of addresses will be done without a leading or tailing '/'.</p>"},{"location":"datalayer.html#example-for-routing-of-requests","title":"Example for routing of requests:","text":"address destination for browse destination for read \"\" nobody nobody \"test\" provider1 nobody \"test/1\" provider4 provider1 \"test/1/foo\" provider6 provider3 \"test/1/bar\" provider6 provider4 \"test/foo\" provider4 provider1 \"test/bar\" provider7 provider1 \"test/bar/bar\" provider7 provider5 \"test/bar/foo\" provider7 provider7 \"test/bar/bar/foo\" provider7 provider7 \"test/bar/foo/foo\" provider7 provider7 \"test/foo/foo\" provider6 provider3 \"test/foo/foo/bar\" provider6 provider2 \"test/foo/foo/foo\" provider6 provider6 \"test/1/bar\" provider6 provider4 \"test/1/bar/1\" provider6 provider6"},{"location":"datalayer.html#browse","title":"Browse","text":"<p>Whenever a node is browsed, the result is a list of strings with contains the names of the subnodes of this nodes. In general datalayer wants to answer this kind of requests at its own. Only if someone has registered with a wildcard (\"*\") for this particular node this provider will be asked to give for subnodes. The result of this request will be merged with the nodes datalayer knows for its own. So a provider does not need to return values on a browse request it has already registered with a more specific path.</p> address result of browse \"\" \"test\" \"test\" \"foo\", \"bar\" + return from provider1 \"test/1\" \"foo\" + return from provider4 \"test/1/foo\" return from provider6 \"test/1/bar\" return from provider6 \"test/foo\" \"foo\" + return from provider4 \"test/bar\" \"foo\" + \"bar\"+ return from provider7 \"test/bar/bar\" return from provider7 \"test/bar/foo\" return from provider7 \"test/bar/bar/foo\" return from provider7 \"test/bar/foo/foo\" return from provider7 \"test/foo/foo\" \"bar\" + return from provider6 \"test/foo/foo/bar\" return from provider6 \"test/foo/foo/foo\" return from provider6 \"test/1/bar\" return from provider6 \"test/1/bar/1\" return from provider6"},{"location":"datalayer.html#provider-interface-functions","title":"Provider Interface functions","text":"<p>Properties:</p> <ul> <li>idempotent, i.e. operation will have the same effect on the servers state if   executed once or multiple times (note: this does not necessarily mean returning   the same response or status code)</li> <li>safe, i.e. must not have side effects such as state changes</li> <li>Input data</li> <li>Output data</li> </ul> function description safe idempotent Input Output onCreate Creates an object no no yes yes onRemove Removes an object no yes no no onBrowse Browse childs of a node yes yes no yes onRead Reads value of a node yes yes yes yes onWrite Writes value to a node no yes yes yes onMetadata Reads metadata of a node yes yes no no <p>Requests are Stateless: Your node/application is not allowed to store anything about latest request. Handle each and every request as new. No session, no history. Design your interface in a way that each request contains all the information necessary to service the request.</p> <pre><code>No Client context shall be stored on the server between requests.\nThe client is responsible for managing the state of the application.\n</code></pre>"},{"location":"datalayer.html#oncreate","title":"onCreate","text":"<p>This function should be used to create a new object. This function is not idempotent. So two calls of onCreate will not have the same result. As input all data should be provided to create the object. As output data the location (path) of of the new object should be returned.</p> <p>Examples:</p> <ul> <li>Creating an order in an online shop</li> <li>Creating an axis</li> <li>Creating a Motion Command</li> </ul>"},{"location":"datalayer.html#onremove","title":"onRemove","text":"<p>This function removes an object. No input and output data are allowed.</p> <p>Examples:</p> <ul> <li>Removing an axis</li> </ul>"},{"location":"datalayer.html#onbrowse","title":"onBrowse","text":"<p>This function returns child nodes of this node. The result must be an array of strings with the names of the child nodes.</p>"},{"location":"datalayer.html#onread","title":"onRead","text":"<p>This function reads the value of a node. To specify the read operation the onRead function may have input data. This function is idempotent and safe. So two equal subsequent calls will have the same result and will not change the state.</p>"},{"location":"datalayer.html#onwrite","title":"onWrite","text":"<p>This function changes the value of an already existing node. The new value is provided as input data. As output data you can return the new node value or nothing. This function is idempotent. So if you send a request multiple times, that should be equivalent to a single request modification.</p>"},{"location":"datalayer.html#onmetadata","title":"onMetadata","text":"<p>This function returns the metadata of this note. You have to return a metadata.fbs flatbuffer. See metadata.</p>"},{"location":"datalayer.html#usage-of-variant","title":"Usage of Variant","text":"<p>A variant holds data of different types. Following basic types are defined:</p> type description UNKNOWN unknown datatype BOOL8 bool 8 bit INT8 signed int 8 bit UINT8 unsigned int 8 bit INT16 signed int 16 bit UINT16 unsigned int 16 bit INT32 signed int 32 bit UINT32 unsigned int 32 bit INT64 signed int 64 bit UINT64 unsigned int 64 bit FLOAT32 float 32 bit FLOAT64 float 64 bit STRING string (UTF-8) ARRAY_OF_BOOL8 array of bool 8 bit ARRAY_OF_INT8 array of signed int 8 bit ARRAY_OF_UINT8 array of unsigned int 8 bit ARRAY_OF_INT16 array of signed int 16 bit ARRAY_OF_UINT16 array of unsigned int 16 bit ARRAY_OF_INT32 array of signed int 32 bit ARRAY_OF_UINT32 array of unsigned int 32 bit ARRAY_OF_INT64 array of signed int 64 bit ARRAY_OF_UINT64 array of unsigned int 64 bit ARRAY_OF_FLOAT32 array of float 32 bit ARRAY_OF_FLOAT64 array of float 64 bit ARRAY_OF_STRING array of string (UTF-8) RAW raw bytes FLATBUFFERS bytes as a complex data type encoded as a flatbuffer"},{"location":"datalayer.html#set-a-value-of-a-variant","title":"Set a value of a variant","text":"<p>To set a value to a variant, you can use one of the following functions:</p> <ul> <li>setValue(\\&lt;type&gt; value)</li> <li>value is a C data type: type of the variant will be identified automatically by its type (including string)</li> <li>value is a vector/set:<ul> <li>array type of the variant will be identified automatically</li> <li>values will be copied</li> </ul> </li> <li>setValue(\\&lt;type&gt;* values, size_t count)</li> <li>value is array of c data type (including array of string)</li> <li>array type of variant will be identified automatically by its type (including string)</li> <li>values will be copied</li> <li>shareValue(\\&lt;type&gt;* values, size_t count)  </li> <li>In some cases it is not necessary to copy the value to a variant. A reference to the particular data is sufficient.</li> <li>type of variant will be identified automatically</li> <li>only a pointer to data will be stored</li> <li>this function is faster than the copy functions</li> <li>copyFlatbuffers()</li> <li>copyFlatbuffer from flatbuffer builder object</li> <li>shareFlatbuffers</li> <li>same as copyFlatbuffers() but data will not be copied.</li> <li>Only pointer to data will be stored</li> <li>setSharedPointer(type, data, size)</li> <li>set a variant to type with data and size</li> <li>data will not be copied, only a pointer will be stored</li> <li>setType(type, size) + copyRaw(data, size)</li> <li>set a variant with a specific type and size with data</li> <li>data will be copied</li> </ul>"},{"location":"datalayer.html#get-a-value-of-a-variant","title":"Get a value of a variant","text":"<p>To access data you can assign a variant to a basic data type. If the type of the variant match the basic data type, the value will be copied to the variable. If the type did not match, 0 or NULL will be returned.</p>"},{"location":"datalayer.html#example-access-scalar-values","title":"Example access scalar values","text":"<pre><code> Variant variant;\n uint32_t value1 = 4711;\n variant.setValue(value1);\n uint32_t value2 = variant; // value2 is 4711\n uint16_t value3 = variant; // value3 is 0\n</code></pre> <p>To get the type of a variant use getType()</p>"},{"location":"datalayer.html#accessing-values-of-an-array","title":"Accessing values of an Array","text":"<p>You can assign a variant to an C array type. If the type of the variant match the basic data type.</p>"},{"location":"datalayer.html#example-access-array-values","title":"Example access array values","text":"<pre><code> Variant data; // data containing an array of string\n const char** strArray = data;\n for (size_t i = 0; i &lt; data.getCount(); i++)\n   printf(\"%s\", strArray[i]);\n</code></pre> <p>You can also use this kind of access for non-array values. getCount() returns 1 for nonArray values and cast to const pointer returns address of data.</p>"},{"location":"datalayer.html#access-flatbuffers","title":"Access flatbuffers","text":"<p>A variant can hold a flatbuffer. To check whether a variant has a specific flatbuffer type you can use the verifier of the flatbuffer. This check contains check for right data type (FLATBUFFERS) and check against flatbuffer verifier.</p> <pre><code>  Variant data; // data with a flatbuffer\n  if (STATUS_SUCCEEDED(data.verifyFlatbuffers(VerifyAxisBuffer))); // VerifyAxisBuffer is generated out of .fbs file\n  {\n    auto axis = GetAxis(data-&gt;getData()); // GetAxis is generated out of .fbs file\n  }\n</code></pre>"},{"location":"datalayer.html#usage-of-flatbuffers","title":"Usage of flatbuffers","text":"<p>Flatbuffers is used for complex data types. Documentation is available at here.</p> <p>Base of a complex data type is type defined in a .fbs file. Out of a .fbs file you have to generate different files:</p> <p></p> <ul> <li>type_generated.h</li> <li>File to include in your source code. This header enables you to access a existing flatbuffer or create a new one.</li> <li>type.bfbs</li> <li>binary representation of the type. This file is used for generic access to a flatbuffer. It enables the datalayer to     convert between flatbuffer and JSON.</li> <li>If you use flatbuffers as a data, you have to return the content of this file as metadata (see metadata)</li> </ul>"},{"location":"datalayer.html#automatic-build-using-cmake","title":"Automatic Build using CMake","text":"<p>To build your <code>.fbs</code> files using CMake include following lines in your CMakeLists.txt.</p> <p>To use the right flatbuffer compiler use these lines:</p> <pre><code># set flatbuffer root folder\nset(FLATBUFFER_ROOT ${DEPENDENCIES_ROOT}/appflatbuffers)\n\n# expand binary search path for flatbuffer compiler\nif (WIN32)\n  set(CMAKE_PROGRAM_PATH ${CMAKE_PROGRAM_PATH} ${FLATBUFFER_ROOT}/public/bin/win-msvc-x86/release)\nelse()\n  set(CMAKE_PROGRAM_PATH ${CMAKE_PROGRAM_PATH} ${FLATBUFFER_ROOT}/public/bin/linux-gcc-x64/release)\n\n  # set executable attributes for flatbuffer compiler\n  execute_process(COMMAND chmod +x ${FLATBUFFER_ROOT}/public/bin/linux-gcc-x64/debug/flatc)\n  execute_process(COMMAND chmod +x ${FLATBUFFER_ROOT}/public/bin/linux-gcc-x64/release/flatc)\nendif()\n\n# include flatbuffer cmake functions\ninclude(${FLATBUFFER_ROOT}/public/CMake/FindFlatBuffers.cmake)\n</code></pre> <p>To compile your <code>.fbs</code> files, use these lines:</p> <pre><code>set(CMAKE_INCLUDE_PATH ${CMAKE_INCLUDE_PATH} ${FLATBUFFER_ROOT}/public/include )\ninclude(${FLATBUFFER_ROOT}/public/CMake/FindFlatBuffers.cmake)\n\nSET ( IDL_FILES ${IDL_FILES}\n  ${CMAKE_CURRENT_LIST_DIR}/mockups/Interpolator.fbs\n  ${CMAKE_CURRENT_LIST_DIR}/mockups/AllDataTypes.fbs\n  ${CMAKE_CURRENT_LIST_DIR}/motion/axis.fbs\n)\n\nbuild_flatbuffers( \"${IDL_FILES}\" \"\" BuildFlatbuffers \"\" \"${CMAKE_CURRENT_BINARY_DIR}\" \"${CMAKE_CURRENT_BINARY_DIR}\" \"\")\n</code></pre> <p>This will generate an additional buildtarget <code>BuildFlatbuffers</code>. You can add this build target to your dependencies.</p>"},{"location":"datalayer.html#tips-and-tricks","title":"Tips and Tricks","text":"<ol> <li>Force Defaults / IsField Present</li> <li>Tables fields are only stored if they are set and are different from its default values. To ensure that all values are set in your      flatbuffer, you can enable force_default in flatbuffer builder object:      <pre><code>flatbuffers::FlatBufferBuilder builder;\nbuilder.ForceDefaults(true);\n</code></pre></li> <li>Access of array values</li> <li>assume .fbs file      <pre><code>table myTable {\n  myVecDouble:[double];\n}\nroot_type MyTable;\n</code></pre></li> <li>access as flatbuffer vector      <pre><code>auto myTable = GetMyTable(value.getData());\nauto myVecDouble = myTable-&gt;myVecDouble();\nfor (size_t i = 0; i &lt; myVecDouble-&gt;size(); i++)\n  double value = myVecDouble[i];\n</code></pre></li> <li>access as C array      <pre><code>auto myTable = GetMyTable(value.getData());\nconst double* myVecDouble = myTable-&gt;myVecDouble()-&gt;data();\nfor (size_t i = 0; i &lt; myVecDouble-&gt;size(); i++)\n  double value = myVecDouble[i];\n</code></pre></li> <li>access as plane uint_8* memory (little endian)      <pre><code>auto myTable = GetMyTable(value.getData());\nconst uint_8* myVecDouble = myTable-&gt;myVecDouble()-&gt;Data();\n</code></pre></li> </ol>"},{"location":"datalayer.html#metadata","title":"Metadata","text":"<p>Metadata contains additional information about a node. This information can be read using the metadata function. Definition of metadata can be found here.</p> field comment nodeClass Resource: node is a resource  Method: node is a command  Type: node represents a type operations contains allowed operations description Short description in markdown format descriptionUrl URL to detailed description displayName Name to be displayed instead of node address displayFormat Auto: display in standard type format  Bin: display as binary  Oct: display octal  Dec: display Decimal  Hex: display hexadecimal unit unit of value extensions user defined extensions (key/value pair) references references to other nodes (key/value pair)"},{"location":"datalayer.html#references-to-other-nodes-in-metadata","title":"References to other nodes in metadata","text":"<p>Metadata of nodes can reference other nodes. A reference contains of a type and a targetAddress. There are some predefined types of references</p> type comment readType type when reading a value writeType type when writing a value createType type when creating a value <p>The target of a reference is a address in the datalayer tree.</p>"},{"location":"datalayer.html#typetree","title":"Typetree","text":"<p>All types are included as nodes in the datalayer tree. Types are located under \"types/\". Types can be references in metadata as a reference.</p>"},{"location":"datalayer.html#usage-of-client","title":"Usage Of Client","text":""},{"location":"datalayer.html#creation","title":"Creation","text":"<p>To create a client use factory function <code>createClient(addr)</code>. For <code>addr</code> you have following possibilities</p> connection scheme comment INPROC Use empty address string to use in process communication. This works only if your client is in same address space (process) like datalayer application. IPC Only available in Linux. Use this communication kind in same device between processes. TCP Communication between devices addr comment \"\" INPROC communication (default) DL_IPC_AUTO Automatic choice of IPC port. It uses \\&lt;$HOME&gt;/.datalayer/frontend/2069 as IPC communication port. You can also use this define for communication between snaps with same user \"ipc://\\&lt;path&gt; IPC communication with specific path. You have to run a broker with this IPC path. \"tcp://\\&lt;ip&gt;:\\&lt;port&gt; TCP communication with specific device. Standard port of TCP is 2069."},{"location":"datalayer.html#celix-bundle","title":"Celix Bundle","text":"<p>This components includes a Celix bundle. You can use it in your own Celix framework. Be careful that on your target exists only one broker. So if you use datalayer in multiple Celix framework only one broker has to be started. To control start of broker you can use following entry in config.properties in your Celix preferences.</p> <pre><code>datalayer.broker.enable=false\n</code></pre> <p>The default value of this switch is true. So you have to set it explicit to false to disable startup of broker in your system.</p>"},{"location":"debug-overview.html","title":"Debugging Snaps","text":""},{"location":"debug-overview.html#overview","title":"Overview","text":"<p>In general there are three different ways to debug. Here is an overview of the different types of debugging:</p> # Description Usage Disadvanges 1 Snap Logs output in terminal and logbook <ul><li>easiest way of debugging</li><li>can be used in every programming language</li><li>code runs on target</li></ul> <ul><li>no breakpoints</li><li>no step by step debugging</li></ul> 2 Debugging in Build Environment + Connection to ctrlX Data Layer via TCP <ul><li>easy way to debug</li><li>Implemented in the SDK for all samples</li></ul> <ul><li>Code does not run on target</li><li>Connection via tcp to ctrlX Data Layer is slower then IPC</li></ul> 3 Remote Debugging <ul><li>Only use this if you see a different behavior on the real hardware then in your build environment</li><li>Documentation for C++, Python</li><li>code runs on target</li></ul> <ul><li>Very very high effort </li></ul> <p>We recommend to test your application extensively in the build environment (type #2). Testing an application running in it's confined Ubuntu Core snap enviroment can be done by looking at the snap logs (type #1). Remote Debugging (type #3) while the snap is running in the confined Ubuntu Core snap environment of a ctrlX CORE should only be used as the last step, if the other two debug types don't help to debug your application.</p> <p>Common and important information about debugging snaps are provided by snapcraft: Debugging snaps</p> <p>In the following you can see how to set up the three different types of debugging.</p>"},{"location":"debug-overview.html#1-snap-logs","title":"1. Snap Logs","text":"<p>First build the snap using the right build-snap script and install it on a ctrlX CORE or ctrlX CORE<sup>virtual</sup>.</p> <p>You can see the snaps logs in the Diagnostics Logbook on the webpage of the ctrlX CORE or in the console. To see them in the console you need to log in via ssh to the ctrlX CORE. To enable ssh on your ctrlX CORE you would need an system user with extended rights on the ctrlX CORE.</p> <p>Command</p> <p>The log output of a snap can be checked with <code>sudo snap logs -f snapname</code> in the console.</p> <p>To see the same output of the snap logs in the Diagnostics/Logbook on the ctrlX CORE no system User is needed. Just enable to \"Show System Messages\" in the settings of the logbook.</p> <p></p>"},{"location":"debug-overview.html#2-debugging-in-build-environment","title":"2. Debugging in Build Environment","text":"<p>It's recommended to debug your application in your app build environment. You can run script files directly in your build environment with an interpreter (e.g. Python) or run compiled executables with an Debugger (e.g. C++).</p> <p>The samples in the SDK already contain a launch.json in the folder .vscode, which makes it easy for you to debug the samples using Visual Studio Code as your source code editor.</p> <p>For the prerequisites for every programming language please see the corresponding documentation in Samples.</p>"},{"location":"debug-overview.html#3-remote-debugging","title":"3. Remote Debugging","text":"<p>Remote Debugging should only be used as the last step, if the other two debug types don't help to debug your application. For detailed information on this debugging, please see the following descriptions:</p> <ul> <li> <p>For C++: Remote Debugging C++ Snaps</p> </li> <li> <p>For Python: Remote Debugging Python Snaps</p> </li> </ul>"},{"location":"dotnet.html","title":"README .NET Apps @ ctrlX","text":""},{"location":"dotnet.html#introduction","title":"Introduction","text":"<p>This document describes how to setup up your development environment for building self-contained ctrlX Apps based on Microsoft .NET runtime.</p> <p>Self-contained means, your App contains an already matching and optimized .NET runtime for your target architecture, so there's no need to install any additional .NET runtime.</p> <p>All samples generate Apps (snaps) for the targets</p> <ul> <li>ctrlX CORE<sup>virtual</sup> (amd64)</li> <li>ctrlX CORE (arm64)</li> </ul>"},{"location":"dotnet.html#prerequisites","title":"Prerequisites","text":"<p>In this chapter we describe how to install the necessary components on a development environment based on a QEMU VM.</p> <p>How you can create and run a QEMU VM is described here.</p>"},{"location":"dotnet.html#installation-of-net-sdk-on-the-qemu-vm","title":"Installation of .NET SDK on the QEMU VM","text":"<p>Start a SSH session and login into the VM with boschrexroth/boschrexroth:</p> <pre><code>  ssh -p 10022 boschrexroth@localhost\n</code></pre> <p>Start the script to install .NET as snap on your VM (~/ctrlx-automation-sdk/scripts):</p> <pre><code>  ./install-dotnet-sdk.sh\n</code></pre> <p>When installation is finished you can check your installed SDKs:</p> <pre><code>  dotnet --list-sdks\n</code></pre> <p>The output should show the installed version and the path of ths dotnet-sdk.</p> <p>Check your Runtime:</p> <pre><code>  dotnet --list-runtimes\n</code></pre>"},{"location":"dotnet.html#install-the-visual-studio-code-c-extension-from-marketplace","title":"Install the Visual Studio Code C# extension from Marketplace","text":"<p>We recommend to use Microsoft Visual Studio Code on your host computer as IDE - see here.</p> <p>To develop and test .NET application for the ctrlX we have to install the C# extension in the VM.</p> <ul> <li>Start Visual Studio Code and connect it with the QEMU VM.</li> <li>Select the extension icon in the left side bar and enter c#</li> <li>Select the C# extension and click 'Install in SSH'</li> </ul> <p></p>"},{"location":"dotnet.html#prepare-nuget-on-the-qemu-vm","title":"Prepare NuGet on the QEMU VM","text":"<p>.NET projects can use NuGet packages. Therefor we have to provide some prerequisites on the VM.</p> <p>If you're behing a corporate proxy, you have to configure the NuGet Proxy in configuration file:</p> <pre><code>  /home/${USER}/.nuget/NuGet/NuGet.Config\n</code></pre> <p>Edit the NuGet configuration file with your preferred editor or with Visual Studio Code and add a config section containing the http_proxy and https_proxy inside the configuration section like shown below.</p> <p>Example:</p> <p>The following sample uses the Px Proxy running on the host computer. From the VM's point of view, this proxy can be reached with the URL http://10.0.2.2:3128.</p> <pre><code>  &lt;configuration&gt;\n        &lt;config&gt;\n              &lt;add key=\"http_proxy\" value=\"http://10.0.2.2:3128\" /&gt;\n              &lt;add key=\"https_proxy\" value=\"http://10.0.2.2:3128\" /&gt;\n        &lt;/config&gt;\n  ...\n  &lt;/configuration&gt;\n</code></pre>"},{"location":"dotnet.html#building-a-net-sample-project","title":"Building a .NET Sample Project","text":"<p>Each .NET sample provides a rich set of tasks for your convenience.</p> <p></p> <ul> <li>Click on Terminal -&gt; Run Task.</li> <li>Choose your preferred task to run.</li> </ul>"},{"location":"dotnet.html#build-compile-your-code","title":"Build (compile) your code","text":"<ul> <li>Click on Terminal -&gt; Run Task.</li> <li>Choose Task build.</li> </ul>"},{"location":"dotnet.html#clean-your-code","title":"Clean your code","text":"<ul> <li>Click on Terminal -&gt; Run Task.</li> <li>Choose Task clean.</li> </ul>"},{"location":"dotnet.html#publish-your-self-contained-application","title":"Publish your (self-contained) application","text":"<ul> <li>Click on Terminal -&gt; Run Task.</li> <li>Choose any Task publish * matching your architecture and mode.</li> </ul>"},{"location":"dotnet.html#make-snap","title":"make snap","text":"<ul> <li>Click on Terminal -&gt; Run Task.</li> <li>Choose any Task make snap * matching your architecture and mode.</li> </ul>"},{"location":"dotnet.html#debugging","title":"Debugging","text":""},{"location":"dotnet.html#debug-on-qemu-vm","title":"Debug on QEMU VM","text":"<p>Just press F5 or</p> <ul> <li>Click on the Run from the menu.</li> <li>Choose Run -&gt; .NET Core Launch (console).</li> <li>Press the green  Play button.</li> </ul>"},{"location":"dotnet.html#debug-snap-on-ctrlx-corevirtual","title":"Debug snap on ctrlX CORE<sup>virtual</sup>","text":"<ul> <li>Click on Terminal -&gt; Run Task.</li> <li>Choose any Task make snap amd64.</li> <li>Install snap on ctrlX CORE<sup>virtual</sup> via ctrlX web interface</li> <li>For debugging snaps see here</li> </ul>"},{"location":"dotnet.html#debug-snap-on-ctrlx-core","title":"Debug snap on ctrlX CORE","text":"<ul> <li>Click on Terminal -&gt; Run Task.</li> <li>Choose any Task make snap arm64.</li> <li>Install snap on ctrlX CORE via ctrlX web interface</li> <li>For debugging snaps see here</li> </ul> <p>Now you're ready to code .NET on ctrlX!</p>"},{"location":"dotnet.html#best-practise","title":"Best Practise","text":""},{"location":"dotnet.html#provider-concepts","title":"Provider Concepts","text":"<p>There different concepts to write a ctrlX Data Layer provider:</p>"},{"location":"dotnet.html#create-and-register-nodes-with-individual-node-handlers","title":"Create and register nodes with individual node handlers","text":"<p>Create a provider, which creates and registers all nodes with an individual node handler</p> <pre><code>        n x CreateNode\n        n x Register\n        Node : Handler = 1:1\n</code></pre> <p>Recommendation:</p> <ul> <li>Use for a small/medium of nodes with individual node handling.</li> <li>Use for a logical grouping and managing of nodes.</li> </ul> <p>Pros:</p> <ul> <li>The ctrlX Data Layer is managaging your node hierarchy: No implementation of OnBrowse() required (return DL_UNSUPPORTED or DL_OK with an empty list).</li> </ul> <p>Contras:</p> <ul> <li>Not efficent for a large/very large set of nodes to handle.</li> </ul> <p>Samples:</p> <ul> <li>datalayer.provider</li> </ul>"},{"location":"dotnet.html#create-and-register-nodes-with-same-node-handler","title":"Create and register nodes with same node handler","text":"<p>Create a provider, which creates individual nodes and registers all nodes individually with same node handler.</p> <pre><code>        n x CreateNode\n        n x Register\n        Node : Handler = n:1\n</code></pre> <p>Recommendation:</p> <ul> <li>Use for a small/medium of nodes with common node handling</li> <li>Use for a logical grouping and managing of nodes.</li> </ul> <p>Pros:</p> <ul> <li>The ctrlX Data Layer is managaging your node hierarchy: No Implementation of OnBrowse() required (return DL_UNSUPPORTED or DL_OK with an empty list).</li> </ul> <p>Contras:</p> <ul> <li>Not efficent for a large/very large set of nodes to handle.</li> </ul> <p>Samples:</p> <ul> <li>datalayer.provider.alldata</li> </ul>"},{"location":"dotnet.html#virtual-provider-lightweight-register-on-wildcard-and-manage-virtual-nodes","title":"Virtual provider (lightweight): Register on wildcard and manage virtual nodes","text":"<p>Create just one node with a single node handler, registered to a wildcard address  (e.g. myroot/**) and managing the nodes for your own. This lightweight handler returns virtual nodes in OnBrowse() method. See ctrlX Data Layer documentation for details.</p> <pre><code>        1 x CreateNode\n        1 x Register\n        Node : Handler = n:1\n</code></pre> <p>Recommendation:</p> <ul> <li>Use for a large/very large or dynamic set of nodes (big data provider).</li> <li>Use if you want to manage the nodes in your application code.</li> </ul> <p>Pros:</p> <ul> <li>Very efficient.</li> </ul> <p>Contras:</p> <ul> <li>The ctrlX Data Layer is not managaging your node hierarchy: You have to return the valid data in OnBrowse().</li> </ul> <p>Samples:</p> <ul> <li>datalayer.provider.virtual</li> </ul>"},{"location":"dotnet.html#pitfalls","title":"Pitfalls","text":""},{"location":"dotnet.html#arithmetic-operators-of-different-integral-or-foating-point-types","title":"Arithmetic operators of different integral or foating point types","text":"<p>The following operators perform arithmetic operations with operands of numeric types:</p> <ul> <li>Unary: ++ (increment), -- (decrement), + (plus), and - (minus) operators</li> <li>Binary: * (multiplication), / (division), % (remainder), + (addition), and - (subtraction) operators</li> </ul> <p>Those operators are supported by all integral and floating-point numeric types.</p> <p>In the case of integral types, those operators (except the ++ and -- operators) are defined for the int, uint, long, and ulong types.</p> <p>When operands are of other integral types (sbyte, byte, short, ushort, or char), their values are converted to the int type, which is also the result type of an operation.</p> <p>When operands are of different integral or floating-point types, their values are converted to the closest containing type, if such a type exists. For more information, see the Numeric promotions section of the C# language specification.</p> <p>The ++ and -- operators are defined for all integral and floating-point numeric types and the char type.</p> <p>Example:</p> <p>Let' say we just wan't to increment a sbyte Variant value by keeping the data type, we have cast the result after performing the arithmetic operation:</p> <pre><code>  sbyte value = 42;\n  var oldVariant = new Variant(value)\n  var newVariant = new Variant((sbyte)(oldVariant.ToSByte() + 1));\n</code></pre> <ul> <li>Please see here for more informations.</li> </ul>"},{"location":"dotnet.html#support","title":"Support","text":""},{"location":"dotnet.html#developer-community","title":"Developer Community","text":"<p>Please join the Developer Community</p>"},{"location":"dotnet.html#sdk-forum","title":"SDK Forum","text":"<p>Please visit the SDK Forum</p>"},{"location":"dotnet.html#issues","title":"Issues","text":"<p>If you've found an error in these sample, please file an issue</p>"},{"location":"dotnet.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"extenable-denylist.html","title":"How to protect content interface connections","text":""},{"location":"extenable-denylist.html#introduction","title":"Introduction","text":"<p>Each app can provide or consume multiple interface connections. The usage of some of these connections can destroy the integrity of the system. These connections are defined in the denylist which avoids an automatic connection by the Device Admin.</p>"},{"location":"extenable-denylist.html#extend-the-denylist","title":"Extend the denylist","text":"<p>The app developer may want to protect own content interfaces and restrict them to specific apps. An example for such a connection is an unix socket to communicate between two apps (server and client). The functionality of the extended denylist was created for this purpose.</p> <p>The app should be able to indicate whether a particular content interface that it declares should be protected, and if so, what rules it can use. Therefore, the app developer can provide a denylist.json as a package asset.</p> <p>In order to make this possible, a few requirements must be met.</p> <p>Attention</p> <ul> <li>The denylist.json must be part of the app and must not be changeable at runtime</li> <li>The denylist.json must be part of the validation and checked by Rexroth</li> <li>denylist.json is only accepted by Rexroth signed apps</li> <li>Connectors must include partner/OEM prefix to avoid interferences</li> </ul>"},{"location":"extenable-denylist.html#requirements","title":"Requirements","text":"<p>The extendable deny list is part of a customer app. Only signed customer apps can provide an own deny list, all deny lists in unsigned apps are ignored.</p> <p>The denylist.json file is located in the <code>package-assets</code> folder of the app, which is connected to the package-assets of the Device Admin. The *.package-manifest.json file is also located in this folder.</p> <p>Example</p> <p><code>$SNAP/package-assets/$SNAP_NAME/$SNAP_NAME.package-manifest.json</code></p> <p>Only content interface (see: <code>https://snapcraft.io/docs/content-interface</code>) connections are supported! The content target has to contain the \"parent\" app name, e.g. the app \"ctrlx-customer-app\" can provide the protected content interface \"ctrlx-customer-app-abc\".</p>"},{"location":"extenable-denylist.html#content-interfaces","title":"Content interfaces","text":"<p>Then there is a differentiation between content interfaces and all other interfaces. If the interface is a content interface the content property will be compared. If they where equal, the connection is allowed.</p> <p>Info</p> <p>plugs<pre><code>   ...\n   plugs:\n     ctrlx-customer-app-abc:\n         interface: content\n         content: ctrlx-customer-app-abc\n         target: $SNAP_DATA/abc-folder\n   ...\n</code></pre> slots<pre><code>   ...\n   slots:\n     ctrlx-customer-app-abc:\n       interface: content\n       content: ctrlx-customer-app-abc\n       source:\n         write:\n           - $SNAP_DATA/abc-folder-name/$SNAP_NAME\n    ...\n</code></pre></p> <p>Following this rule leads to a connection for the slot ctrlx-customer-app-abc with the plug ctrlx-customer-app-abc.</p> <p>The rules (location, deny list entries, ...) will be checked during the validation process.</p>"},{"location":"extenable-denylist.html#denylistjson","title":"denylist.json","text":"<p>Example</p> <p><code>$SNAP/package-assets/$SNAP_NAME/denylist.json</code></p> <p>The denylist.json has the following format:</p> <p>Info</p> denylist.json<pre><code>[\n    {\n        \"interface\":  \"content\",\n        \"direction\":  \"slot\",\n        \"parameters\": \"content=ctrlx-customer-app-data\"\n    },\n    {\n        \"interface\":  \"content\",\n        \"direction\":  \"plug\",\n        \"parameters\": \"content=ctrlx-customer-app-additional-data\"\n    }\n]\n</code></pre>"},{"location":"fbs2plc.html","title":"fbs2plc.exe - Use Flatbuffers in your PLC project","text":"<p>A lot of ctrlX Data Layer nodes contain structured data stored in the Flatbuffers format.</p> <p>The data structure is defined in a schema file (.fbs file). The  FlatBuffers compiler flatc is able to compile such a .fbs file into code for several programming languages including IEC 61131-3 Structured Text (ST).</p> <p>This guide describes how one or more fbs files can be compiled into IEC 61131-3 ST code and how this code can be imported and used in your IEC 61131-3 project to handle Flatbuffers.</p> <p>The described workflow and the tools are currently running only under Windows 10.</p>"},{"location":"fbs2plc.html#prerequisites","title":"Prerequisites","text":""},{"location":"fbs2plc.html#ctrlx-works","title":"ctrlX WORKS","text":"<p>Install ctrlX WORKS &gt;= 1.20 with the function 'ctrlX PLC Engineering' and 'App Build Environment'.</p> <p>We recommend to use \"C:\\Program Files\\Rexroth\\ctrlX WORKS\" as installation path. In this case the path to ctrlX PLC Engineering is \"C:\\Program Files\\Rexroth\\ctrlX WORKS\\Studio\\Common\\ctrlX-PLC-Engineering.exe\" </p>"},{"location":"fbs2plc.html#ctrlx-core","title":"ctrlX CORE","text":"<ul> <li>Create a ctrlX CORE<sup>virtual</sup> with Port Forwarding and start it.</li> <li>Install the PLC snap.</li> </ul>"},{"location":"fbs2plc.html#ctrlx-automation-sdk","title":"ctrlX AUTOMATION SDK","text":""},{"location":"fbs2plc.html#on-your-windows-host","title":"On your Windows host","text":"<p>Download the ctrlX AUTOMATION SDK and extract it to c:\\ctrlx-automation-sdk</p> <p>Now two executables are available:</p> <ul> <li>c:\\ctrlx-automation-sdk\\bin\\oss.flatbuffers\\win-msvc-x64\\release\\flatc.exe</li> <li>c:\\ctrlx-automation-sdk\\bin\\fbs2plc\\win-x64\\fbs2plc.exe</li> </ul>"},{"location":"fbs2plc.html#on-your-app-build-environment","title":"On your App Build Environment","text":"<ul> <li>From ctrlX WORKS, create and start an App Build Environment.</li> <li>Login into your App Build Environment: ssh -p 10022 boschrexroth@127.0.0.1</li> <li>Password is boschrexroth</li> <li> <p>Install the ctrlX AUTOMATION SDK</p> <p>$ ~/scripts/install-sdk.sh</p> </li> <li> <p>Build a required snap (here amd64) and install it on the ctrlX CORE<sup>virtual</sup></p> <p>$ cd ~/ctrlx-automation-sdk/samples-cpp/datalayer.provider.all-data $ ../../scripts/build-upload-log-snap.sh -PF</p> </li> <li> <p>Open a web browser, login into your ctrlX CORE<sup>virtual</sup>. A Data Layer node sdk-cpp-alldata/dynamic/fbs should exist.</p> </li> </ul> <p>This node later can be read, changed and written by our IEC 61131-3 PLC code.</p>"},{"location":"fbs2plc.html#reading-and-writing-a-flatbuffers-ctrlx-data-layer-node-in-your-plc-project","title":"Reading and writing a flatbuffers ctrlX Data Layer node in your PLC project","text":"<p>The basic steps are:</p> <ol> <li>Create a PLC library which contains the IEC61131 ST code to handle a Flatbuffers variable</li> <li>Create a new PLC project</li> <li>Import the created PLC library and provided sample code into your project</li> <li>Compile the project and log into your ctrl CORE<sup>virtual</sup> </li> </ol>"},{"location":"fbs2plc.html#create-a-plc-library","title":"Create a PLC library","text":"<p>Start cmd.exe and enter these commands:</p> <pre><code>c:\ncd \\ctrlx-automation-sdk\\samples-fbs2plc\\sampleSchema\nstart.bat\n</code></pre> <p>Result: * The file c:\\ctrlx-automation-sdk\\samples-cpp\\datalayer.provider.all-data\\sampleSchema.fbs was compiled into IEC61131 code.  * A new PLC library fbs-sampleSchema was created, using c:\\ctrlx-automation-sdk\\plc\\CXA_fbs_Template.library as template. * All required standard libraries were imported. * ctrlX PLC Engineering now has the new library opened.</p> <p>Store the new library so that you can use it in your PLC project:</p> <ul> <li>Select File - Save project and install into library repository</li> <li>Close the libray</li> <li>Keep ctrlX PLC Engineering running</li> </ul>"},{"location":"fbs2plc.html#create-a-plc-project","title":"Create a PLC project","text":"<ul> <li>In ctrlX PLC Engineering create a new PLC project use 'ctrlX CORE x64 Project' as template.</li> <li>Select the node Application and delete it.</li> <li>Select the node PLC Logic</li> <li>Select menu item Project - PLCopenXML import..., select c:\\ctrlx-automation-sdk\\samples-fbs2plc\\sampleSchema\\fbs-read-write.xml </li> <li>Double click the node library manager</li> <li>Add the library CXA_DATALAYER to your project.</li> <li>Connect the device of ypur PLC project with the ctrlX CORE<sup>virtual</sup> </li> <li>Login into your ctrlX CORE<sup>virtual</sup> </li> </ul>"},{"location":"fbs2plc.html#check-the-flatbuffer-access","title":"Check the Flatbuffer Access","text":"<ul> <li>From a web browser login into your ctrlX CORE<sup>virtual</sup> Web UI</li> <li>Select Settings - Data Layer</li> <li>Expand the Data Layer tree: sdk-cpp-alldata/dynamic/fbs</li> </ul> <p>The values of the x, y, z variables should be changed by our PLC program.</p>"},{"location":"install-scripts.html","title":"Important Installation Scripts","text":"<p>The following assumes that ctrlX AUTOMATION SDK has been installed in the /home/boschrexroth/ctrlx-automation-sdk  (or simplified ~/ctrlx-automation-sdk) directory.</p> <p>The directory ~/ctrlx-automation-sdk/scripts/ of an App Build Environment contains a set of important scripts.</p> <p>In the file <code>~/ctrlx-automation-sdk/scripts/README.md</code> all files are listed and described.</p>"},{"location":"install-sources-from-github.html","title":"Install Sources from github","text":""},{"location":"install-sources-from-github.html#introduction","title":"Introduction","text":"<p>Follow the installation instructions of ctrlX AUTOMATION SDK.</p>"},{"location":"install-sources-from-github.html#build-sample-project","title":"Build Sample Project","text":"<p>To build a sample project do following steps:</p> <p>Change directory e.g.:</p> <pre><code>cd ~/ctrlx-automation-sdk/samples-cpp/datalayer.provider.all-data\n</code></pre> <p>Build snap:</p> <pre><code>./build-snap-amd64.sh\n</code></pre>"},{"location":"install-sources-from-github.html#troubleshooting","title":"Troubleshooting","text":"<p>github grants only a a limited number of accesses to its repositories. If you are behind a proxy this number can be exceeded very fast. In this case the download of the zip archive fails.</p> <p>To avoid this you need a github account and a personal access token - see Creating a personal access token</p> <p>Open the script install-sdk-from-github.sh search the line beginning with LATEST=$(curl -s and add this information:</p> <p>From</p> <pre><code>LATEST=$(curl -s ...\n</code></pre> <p>change to e.g.</p> <pre><code>LATEST=$(curl -s -u usrxyz:tokenxyz ...\n</code></pre>"},{"location":"licensing.html","title":"License Management","text":"<p>This document is part of the Bosch Rexroth ctrlX CORE App Development Guideline, and describes how to adapt to the the license management of the device.</p> <p>Please refer to the App Development Guide for further information.</p>"},{"location":"licensing.html#table-of-contents","title":"Table of Contents","text":"<p>1 Introduction</p> <p>2 Licensing Modes</p> <p>2.1 Overview</p> <p>2.2 ctrlX CORE Main License</p> <p>2.3 ctrlX CORE Temporary Usage Rights (Emergency Mode)</p> <p>2.4 ctrlX CORE 10 Day Trial License</p> <p>2.5 Four Hour Engineering Demo License on  ctrlX CORE<sup>virtual</sup></p> <p>2.6 Additional License Mode: ctrX CORE 3 Month Test License</p> <p>2.7 Spoofing detection by optionally signing / verifying license requests</p> <p>3 License Enforcement</p> <p>3.1 Add Content Plug to snapcraft.yaml</p> <p>3.2 Adapt package-manifest.json</p> <p>3.3 Use API to Enforce Licenses</p> <p>3.4 Communicate with License Manager API</p> <p>3.5 Access License Manager in PLC Application</p> <p>3.6 License Management in Windows Applications</p> <p>4.0 Floating Licenses</p>"},{"location":"licensing.html#1-introduction","title":"1 Introduction","text":"<p>Bosch Rexroth provides a Licensing Center portal at https://licensing.boschrexroth.com for managing device licenses. Through this portal, users can assign licenses to their devices and download a capability response. This response includes all licenses assigned to a specific device. After downloading, users can deploy this capability response to the corresponding device. This platform facilitates the easy management of device licenses, ensuring that devices have the required capabilities.</p> <p>The ctrlX CORE User Interfaces therefore provides a license page which allows to upload a capability response and to check the currently available licenses on the device. For developers, the ctrlX CORE offers a restful API via an internal unix domain socket which can be used by an app to request and release a specific license.</p>"},{"location":"licensing.html#2-licensing-modes","title":"2 Licensing Modes","text":""},{"location":"licensing.html#21-overview","title":"2.1 Overview","text":"<p>The license management on the ctrlX CORE supports several different licensing modes. The following table gives an overview about the license modes.</p> License Mode Target Key Usage Additional information Main License ctrlX CORE <code>SWL_XCR_{YOUR_APP_LICENSE_CODE}</code> mandatory check note Temporary Usage Rights (Emergency Mode) ctrlX CORE <code>SWL_XCR_{YOUR_APP_LICENSE_CODE}</code> mandatory <code>tampered</code> flag is <code>true</code> 10 Day Trial License ctrlX CORE <code>SWL_XCR_{YOUR_APP_LICENSE_CODE}</code> optional <code>isPermanent</code> flag is <code>false</code> Four Hour Engineering Demo License ctrlX CORE<sup>virtual</sup> <code>SWL_XCR_ENGINEERING_4H</code> suggested check note <p>Important</p> <ul> <li>The app will start normally in the first three cases irrespective of the modes. Information about temporary/trial is not important and developer can avoid checking the different flags.</li> <li>To ensure a seamless trial experience, we recommend enabling your application to launch with both the standard license and the <code>SWL_XCR_ENGINEERING_4H</code> license. More information is provided below.</li> <li>For storing the license ID, it's recommended to use <code>/tmp</code>. This folder is accessible from the snap by default. Users can easily write the ID to <code>/tmp/myFancyFile</code>, which remains available until the system reboots, even after the app is removed.</li> </ul>"},{"location":"licensing.html#ctrlx-corevirtual","title":"ctrlX CORE<sup>virtual</sup>","text":"<p>As displayed in the table, there is only the \"four hour engineering demo license\" available on the ctrlX CORE<sup>virtual</sup>, which allows to evaluate a new app for a limited time (the ctrlX CORE<sup>virtual</sup> is terminated after four hours to prevent productive use). Use the <code>SWL_XCR_ENGINEERING_4H</code> license when the application is running in ctrlX CORE<sup>virtual</sup>.</p>"},{"location":"licensing.html#all-other-cases","title":"All other cases","text":"<p>The different license modes and their expected behaviors for the app are described briefly below. This information is intended to help developers distinguish between different cases depending on the license mode used within their application. The descriptions aim to show developers the type of license the app is currently operating under.</p>"},{"location":"licensing.html#22-ctrlx-core-main-license","title":"2.2 ctrlX CORE Main License","text":"<p>Purpose: Standard License</p> <p>Description:</p> <ul> <li>This is the standard license that a user obtains when buying an app. Therefore, the support of this license mode is mandatory.</li> <li>The license is obtained (bought) in the Bosch Rexroth Licensing Center and then assigned to a specific device by the user.</li> <li>The standard license can be either permanent (unlimited) or time based (expires)</li> </ul> <p>Expected App Behaviour:</p> <ul> <li>The app shall start and run as intended, when the standard license is available.</li> <li>It is strongly recommended that the app periodically checks for validity of license(s), e.g. every hour</li> <li>If acquiring a license is not possible (no license is available), the app shall inform the user that a license needs to be obtained.</li> <li>When no standard app specific license is available on the device, an app shall only run if one of the other licenses is active.</li> </ul> <p>Note that for time-based licenses, the license manager will automatically warn (diagnostic alarm) when the time-based license is about to expire (1 month before expiration, 7 days before expiration and 1 day before expiration).</p>"},{"location":"licensing.html#23-ctrlx-core-temporary-usage-rights-emergency-mode","title":"2.3 ctrlX CORE Temporary Usage Rights (Emergency Mode)","text":"<p>Purpose: Avoid machine downtime</p> <p>Description:</p> <ul> <li>On a ctrlX CORE, the user has the possibility to activate a special mode that is called \"Temporary usage rights\". The mode can be activated using the License Manager UI.</li> <li>Enabling this mode allows users to operate the ctrlX CORE in a productive environment for ten consecutive days. The single purpose of this mode is to prevent a downtime when a defect device is replaced and no licenses have been assigned, yet. This mode can only be activated once on a device</li> <li>Within these ten days, the user has to either add licenses to the new device or move the licenses from the broken device to the replacement device.</li> </ul> <p>Warning</p> <p>After ten days, the mode will expire and cannot be reactivated.</p> <p>Expected App Behaviour:</p> <ul> <li>Support of this license is mandatory.</li> <li>The app is able to detect whether the system runs in this mode by evaluating the <code>tampered</code> flag in the response to the acquisition request (the flag is set to <code>true</code>)</li> <li>When this mode is active, the app should work as if a standard license is available.</li> </ul>"},{"location":"licensing.html#24-ctrlx-core-10-day-trial-license","title":"2.4 ctrlX CORE 10 Day Trial License","text":"<p>Purpose: Test Mode on ctrlX CORE Hardware</p> <p>Description:</p> <ul> <li>The 10 day trial license allows to use all apps - which support this license mode - for a restricted time for testing purposes.</li> <li>The license is intended for test and evaluation only and not for use in a production environment</li> <li>The license will automatically expire after 10 days.</li> <li>Other than the temporary usage rights mode, 10 day trial licenses may be used (consecutively) in case an according contractual agreement is available for all involved parties (Bosch Rexroth, Customer, ctrlX World Partner).</li> </ul> <p>Expected App Behaviour:</p> <ul> <li>Support of this mode is optional.</li> <li>The app is able to detect whether the system runs in this mode by evaluating the <code>isPermanent</code> flag in the response to the acquisition request (the flag is set to <code>false</code>)</li> <li>When this mode is active, the app should work as if a standard license is available.</li> <li>This 10 day trail license is bought for all apps and mapped to device</li> </ul>"},{"location":"licensing.html#25-four-hour-engineering-demo-license-on-ctrlx-corevirtual","title":"2.5 Four Hour Engineering Demo License on  ctrlX CORE<sup>virtual</sup>","text":"<p>Purpose: Evaluation mode on a ctrlX CORE<sup>virtual</sup> Description:</p> <ul> <li>A special license (<code>SWL_XCR_ENGINEERING_4H</code>) indicates that currently the limited evaluation mode is active.</li> <li>After 4 hours the ctrlX CORE<sup>virtual</sup> is automatically shut down to prevent a productive use.</li> </ul> <p>Expected App Behaviour:</p> <ul> <li>In order to support this non-productive mode, apps must check for the license <code>SWL_XCR_ENGINEERING_4H</code></li> <li>Support for this mode is optional yet highly recommended, offering users a great opportunity to fully experience the application's capabilities and functionalities within an engineering environment, e.g. ctrlX Works</li> </ul>"},{"location":"licensing.html#26-additional-license-mode-ctrlx-core-3-month-test-license","title":"2.6 Additional License Mode: ctrlX CORE 3 Month Test License","text":"<p>Purpose: Time limited test and evaluation of apps which are in beta/prototype phase (B-Sample phase)</p> <p>Description:</p> <ul> <li>This mode is not intended / available for partner apps by default.</li> <li>Please get in touch with Bosch Rexroth directly, if this mode might be of interest for you.</li> </ul>"},{"location":"licensing.html#27-spoofing-detection-by-optionally-signing-verifying-license-requests","title":"2.7 Spoofing detection by optionally signing / verifying license requests","text":"<p>Purpose: This mechanism allows applications that request a license to verify that the license indeed comes from the ctrlX OS license manager.</p> <p>Description:</p> <ul> <li>Although it is quite improbable, that a malicious actor could replace ctrlX OS' license manager, a further layer of security is added</li> <li>Applications can request licenses (see License Manager API) and set the 'signResponse' query parameter</li> <li>Once a license has been requested (with the corresponding query parameter set) the response's header will contain a signature</li> <li>This signature was calculated using the device certificate (and the corresponding tpm-based key) and can be used to fully verify that the license response was indeed from a certified ctrlX OS device with no spoofed license manager</li> </ul> <p>Usage:</p> <p>1) Any application that wants to use this mechanism will need to send a license request with the corresponding query parameter set      1.1) The response header contains a hex-encoded signature (\"Payload-Signature\")      2.2) The signature is created using ECDSA-SHA256 on the standardized curve 'SECP-256'  2) Once the response (and the signature in 'Payload-Signature') the application needs to verify that the signature is indeed valid and was produced by the device  2.1) The license manager's device certificate chain (and the public key herein) can be used for this - see (see License Manager API)  2.2) Use the public key inside the end-entity (device) certificate to verify the signature  3) Once signature verification is successful, we can assume that the chain sent by the device and the key used for signing correspond, however additional steps are required to ensure that the device is indeed a ctrlX OS device (and the license manager is unaltered)  3.1) The device-certificate chain as retrieved in step 2.1 can now be used to check whether the device is a ctrlX OS device by verifying the certificate chain  3.2) The application now needs to verify that the certificate was indeed signed by an authorized ctrlX OS party (and its root CA certificate)  3.3) For this purpose it needs to know the corresponding ctrlX root CA certificate (com.ctrlx-automation.os.crt) - recommendation is to have it inside the app's binaries as this will ensure that no malicious entity would be able to change it.  3.4) Verify the certificate chain from the device up to the mentioned root certificate </p> <p>Note: As there are multiple steps involved here (where some of them might be time consuming due to cryptographic complexity) it is the app's responsibility whether it wants to check this once during startup, according to a defined interval, etc. Please note the general perception is that - if this feature is required - checking it during startup suffices to verify the integrity of the license manager.</p> <p>ctrlX OS root CA certificate: As stated in step 3.2, the application needs to know the ctrlX OS root CA certificate (com.ctrlx-automation.os.crt). If this feature is required, the corresponding certificate needs to be embedded inside the application. The ctrlX OS root CA certificate can be retrieved via the following link: </p> <p>Download ctrlX OS root CA certificate (com.ctrlx-automation.os.crt)</p>"},{"location":"licensing.html#3-license-enforcement","title":"3 License Enforcement","text":"<p>To integrate an app into the license management, please follow the instructions below.</p>"},{"location":"licensing.html#31-add-content-plug-to-snapcraftyaml","title":"3.1 Add Content Plug to snapcraft.yaml ()","text":"<p>To get access to the unix domain socket that provides the restful API, add the following content plug definition to the snapcraft.yaml:</p> <pre><code>plugs:\n  licensing-service:\n    interface: content\n    content: licensing-service\n    target: $SNAP_DATA/licensing-service\n</code></pre> <p>This will create a folder \"license-service\" during installation of the app on the ctrlX CORE and provide access to the unix domain socket \"licensing-service.sock\" which will be located in the folder.</p>"},{"location":"licensing.html#32-adapt-package-manifestjson","title":"3.2 Adapt package-manifest.json","text":"<p>The app shall provide information in the package-manifest about each license that is supported. Description and title shall be human readable. The \"required\" flag indicates whether a license is mandatory to use the application. Set the flag to true when the license is required and to false, when the license is optional. Multiple licenses can have the \"required\" flag set to true simultaneously. In this case, the app must ensure that it works if any of the 'required' licenses is available.</p> <p><code>json    \"licenses\": [       {         \"name\": \"SWL-XCx-RUN-DLACCESSNRTxx-NNNN\",         \"title\": \"ctrlX OS License - Customer App\",         \"description\": \"Integration of customer apps into ctrlX OS with access to the ctrlX Data Layer\",         \"required\": true       }     ],</code></p>"},{"location":"licensing.html#33-use-api-to-enforce-licenses","title":"3.3 Use API to enforce licenses","text":""},{"location":"licensing.html#331-license-integration","title":"3.3.1 License Integration","text":"<p>How an app reacts when no license is present or the license is removed during runtime, can be freely chosen by the app. Nevertheless, to provide a unique user experience across multiple apps, the following best practices are recommended.</p> <p>The app should acquire the license when started or each time a function requiring a license is called. Furthermore, it should periodically verify the presence of the license on the device by releasing and re-acquiring the license, ensuring it hasn't expired or been removed. This applies to both mandatory and optional types of licenses.</p> <p>If a license is no longer required, such as when the app is stopped or uninstalled, the license should be released. This action returns the license to the license pool, allowing it to be acquired by another app. Otherwise, the license will only become available again after a reboot of the device.</p> <p>If a license is missing, the application should display a warning or an error message and/or log the event. The user should be informed about which licenses are required to enable the specific functionality of the app.</p> <p>Important</p> <p>On the ctrlX CORE, when enforcing licenses the use of the license management is mandatory. Individual implementations are not permitted.</p>"},{"location":"licensing.html#332-license-manager-api","title":"3.3.2 License Manager API","text":"<p>The licensing API is available on GitHub: https://boschrexroth.github.io/rest-api-description</p> <p>The ctrlX License Manager API streamlines license management for the ctrlX OS. This API documentation is also available in the API Reference Section of ctrlX OS. It provides clear guidance on acquiring, releasing, querying, and managing licenses for different applications or functions. The REST API functionality allows users to test their license features and confirm their operability. The use of unix sockets for license integration is recommended. Refer to section 3.4 for details.</p> <p>Implementing this API, an app is able to</p> <ul> <li>Get a list of all available license capabilities.</li> <li>Acquire a license.</li> <li>Release a license.</li> <li>Update the licenses on a ctrlX OS device by uploading a license file.</li> </ul> Function HTTP Method URI Payload Parameters Response Get list of all activated capabilities GET /capabilities none none 200,[{\"isPermanent\": true,    \"finalExpirationDate\": \"2030-01-01T12:00:27.87+00:20\",    \"name\": \"SWL-XCx-FRW-BASIC_FOOBAR-NNNN\",    \"count\": 1,    \"version\": \"1.0\",    \"startDate\": \"2030-01-01T12:00:27.87+00:20\"  }] Acquire license POST /license {\"name\": \"SWL-XCx-FRW-BASIC_FOOBAR-NNNN\",  \"version\": \"1.0\" } signResponse 200{  \"isPermanent\": true,  \"endDate\": \"2030-01-01T12:00:27.7+00:20\",  \"name\": \"SWL-XCx-FRW-BASIC_FOOBAR-NNNN\",  \"id\": 0083d875-30e8-4ff6-9f92-46096ef2d123\",  \"version\": \"1.0\",  \"startDate\":\"2030-01-01T12:00:27.87+00:20\"} Release license DELETE /license/{id} none none 204 Update the capability state in the device PUT /capabilities filestring($binary) withChangeReport 200 Get the device certificate chain GET /device-certificate-chain none none 200, -----BEGIN CERTIFICATE----- MIIDOTCCA+gAwIBAgIURF1DTLBM3YljOsMxXMtHvtEVzE4wCgYIKoZIzj0EAwIwgbgxCzAJBgNVBAYTAkRFMRAwDgYDVQQIDAdCYXZhcmlhMRUwEwYDVQQHDAxMb2hy...FgYDVR0lAQHBAwwCgYIKwYBBQUHAwIwCgYIKoZIzj0EAwIDSAAwRQIgH9Ksvn024lHfDhL4w4YyBLAf6JzxjBix8L6Ka1m3NUgCIQCx3sd85Ag0m/XuF+GViRiL3obO2Kr7reeXVEAg1gRgqw==  -----END CERTIFICATE-----  -----BEGIN CERTIFICATE----- MIIDOjCCAt+gAwIBAgIUUdrEfPLcIibj5PCsmD1K6nYK0wCgYIKoZIzj0EAwIw...kRi49k6qak0EzsDVCWPxXeTLEa9OwinaCm1AiEAia+Kfhmg3cFI6KKHCA12ceic 0QRmvnOTubiVvXuTy88=QUHAwIwCgYIKoZIzj0EAwIDSAAwRQIgH9Ksvn024lHfDhL4w4YyBLAf6JzxjBix8L6IDSAAwRQIgH9Ksvn024lHfDhL4w4YyBLAf6JzxjBix8L6-----END CERTIFICATE-----"},{"location":"licensing.html#333-acquiring-releasing-a-license","title":"3.3.3 Acquiring &amp; releasing a license","text":"<p>When starting an application or service that requires a license, it must acquire the necessary license to operate. Acquiring a license generates a unique ID specific to that license. The POST API call /license will acquire the license when passed with parameter as shown below.</p> <p><code>json   {     \"name\": \"SWL-XCx-FRW-BASIC_FOOBAR-NNNN\",     \"version\": \"1.0\"   }</code></p> <p>Upon a successful request, the following response will be returned.</p> <p></p> <p>The application should release the license when it is stopped or removed. It should also perform periodic checks to ensure the license's validity. The license can be released using the ID obtained from the acquire response. Storing this license ID is necessary and should be stored in a directory that is not affected when the application goes into a faulty state and needs to be restarted. The usage of <code>/tmp</code> is recommended for this purpose. This folder is accessible from the snap by default. Users can easily write the ID to <code>/tmp/myFancyFile</code>, which remains available until the system reboots, even after the app is removed.</p>"},{"location":"licensing.html#334-available-licenses-on-the-device-activated-capabilities","title":"3.3.4 Available licenses on the device (activated capabilities)","text":"<p>Upon request, an app may retrieve the list of available licenses on the device including all details (e.g. expiration, counter, etc.). This is recommended to check whether a specific license is available (and not in use) before trying to acquire it. Nevertheless, this is optional - it is sufficient to simply try to acquire a license and then check whether the acquisition request was successful.</p> <p>Sample response:</p> <p></p>"},{"location":"licensing.html#335-update-license-status","title":"3.3.5 Update license status","text":"<p>The API allows to upload a capability response (license file) from the license portal to update the license status on the device (e.g. add new licenses). This functionality is not required by an app itself but is rather performed by the device operator depending on which licenses will be required according to the installed apps. The REST API route to upload a license file allows passing an optional query parameter (withChangeReport). If this parameter is set, the result of the API will return all licenses that have been added / removed by the used license file.</p>"},{"location":"licensing.html#34-communication-with-license-manager-api","title":"3.4 Communication with License Manager API","text":""},{"location":"licensing.html#341-unix-socket","title":"3.4.1 Unix socket","text":"<ul> <li>The content interface from step 3.1 provides access through a unix-domain socket named licensing-service.sock. This socket is located at target path <code>$</code>SNAP_DATA/licensing-service/licensing-service.sock. All licensing APIs can be accessed directly using an HTTP client through this socket address. E.g. curl --unix-socket $SNAP_DATA/licensing-service/licensing-service.sock http://localhost/license-manager/api/v1/capabilities.  similarly, HTTP client via unix socket can be used by other programming languages to access licensing API </li> <li>Using unix sockets eliminates the need for authentication, making it a recommended option as no token for authorization is required.</li> </ul> <p>Check if the Plug is connected:</p> <pre><code>if [ -d \"$SNAP_DATA/licensing-service\" ]; then echo \"IS THE LICENSING PLUG INSERT: true\"; else echo \"IS THE LICENSING PLUG INSERT: false\"; fi\n</code></pre> <p>Before executing the commands, change the current directory to $SNAP_DATA.</p> <pre><code>cd $SNAP_DATA\n</code></pre> <p>Examples using CURL:</p> <p>Get capabilities:</p> <pre><code>curl -sS --no-buffer -XGET --unix-socket licensing-service/licensing-service.sock http://localhost/license-manager/api/v1/capabilities\n</code></pre> <p>Acquire the 4H license for ctrlX CORE Virtual. Use the license feature code from the capabilities to acquire a real license.</p> <pre><code>curl -sS --no-buffer -XPOST --unix-socket licensing-service/licensing-service.sock 'http://localhost/license-manager/api/v1/license' -H 'accept: application/json' -H 'Content-Type: application/json' -d \"{\\\"name\\\":\\\"SWL_XCR_ENGINEERING_4H\\\",\\\"version\\\":\\\"1.0\\\"}\"\n</code></pre> <p>Release a license:</p> <pre><code>curl -sS --no-buffer -XDELETE --unix-socket licensing-service/licensing-service.sock 'http://localhost/license-manager/api/v1/license/57ac4c58-4167-4afb-b4c2-e63c564c5b68'\n</code></pre> <p>Store license ID:</p> <p>To store the license ID, it is recommended to use the <code>/tmp</code> folder. This folder is accessible from the snap by default. Users can easily write the ID to <code>/tmp/myFancyFile</code>, which remains available until the system reboots, even after the app is removed.</p> <pre><code>#Assuming that the license ID is contained in 'myid'\nlicensefilelocation = /tmp/LICENSED\necho $myid &gt; $licensefilelocation\n</code></pre>"},{"location":"licensing.html#35-access-license-manager-in-plc-application","title":"3.5 Access License Manager in PLC Application","text":""},{"location":"licensing.html#351-ctrlx-automation-library-cxa_licensing","title":"3.5.1 ctrlX AUTOMATION Library CXA_LICENSING","text":"<p>In addition to the REST API, the License Manager can also be used in a PLC application. To use the according functions, the library CXA_LICENSING can be added to a PLC application in the Library Manager.</p> <p>Please refer to the ctrlX PLC Engineering documentation for information about the Library Manager.</p>"},{"location":"licensing.html#352-supported-functions","title":"3.5.2 Supported functions","text":"<p>The CXA_LICENSING library provides POUs to acquire and release licenses and to get capabilities. In addition, the library also comes with an example how to use the licensing mechanisms in a PLC application.</p> <p>The online documentation of the library in ctrlX PLC Engineering provides detailed information about the POUs and the example:</p> <p></p>"},{"location":"licensing.html#36-license-management-in-windows-applications","title":"3.6 License Management in Windows Applications","text":"<p>ctrlX WORKS also supports the License Manager.</p> <p>Please find the ctrlX WORKS Licensing API here in the ctrlX World Portal: ctrlX WORKS Licensing API</p> <p>This API provides licensing functions for Windows Applications, and comes with according samples for different programming languages and frameworks.</p>"},{"location":"licensing.html#40-floating-licenses","title":"4.0 Floating Licenses","text":"<p>Floating licenses are special licenses that are borrowed from a license server for a defined time interval. In a typical scenario the client (e.g. a ctrlX OS device in client mode) requests a floating license from a license server (e.g. a ctrlX OS device in license server mode). Both modes are supported by the license manager and are explained throughout the following chapters.</p> <p></p>"},{"location":"licensing.html#42-floating-license-client","title":"4.2 Floating License Client","text":"<p>It is assumed that the application is already integrated inside the licensing infrastructure as described within License Enforcement. The integration and usage of a floating license in addition to an existing non-floating license includes following steps:</p> <ol> <li>Globally enable floating functionality inside the license manager<ul> <li>A license server endpoint must be configured and contacting the license server must be explicitly enabled. These are part of the client settings and are usually configured once by a system administrator.</li> </ul> </li> <li>Extend the application's package-manifest.json file by the additional entry for the floating license</li> <li>Extend the application's licensing logic by an additional check for the floating license</li> </ol>"},{"location":"licensing.html#421-enabling-floating-license-functionality","title":"4.2.1 Enabling floating license functionality","text":"<p>When an application requests a floating license from the license manager, it is first checked whether contacting a floating license server is enabled. Enablement is usually performed by a system administrator during device configuration and can be done via the settings of the license manager. Only if floating functionality is enabled, the license manager (in client mode) will try to contact a configured license server to retrieve its licenses from.</p> <p></p>"},{"location":"licensing.html#422-adapt-package-manifestjson","title":"4.2.2 Adapt package-manifest.json","text":"<p>In order to support floating licenses, the package manifest file (see here) needs to be extended by the corresponding floating license. Within the ctrlX OS ecosystem, a floating license can be clearly identified by the technical license name. For floating licenses the second to last letter is fixed to 'F'. An exemplary entry within the package-manifest file for a regular license and its floating counterpart is shown below.</p> <p><code>json   \"licenses\": [     {       \"name\": \"SWL-XCx-VPN-VPNCLIENTxxxx-NNNN\",       \"title\": \"ctrlX OS License - VPN Client\",       \"description\": \"VPN Client supports OpenVPN and IPSec for ctrlX OS\",       \"required\": true,       \"i18n\": \"licenses.SWL-XCx-VPN-VPNCLIENTxxxx-NNNN\"     },     {       \"name\": \"SWL-XCx-VPN-VPNCLIENTxxxx-NNFN\",       \"title\": \"ctrlX OS License (floating) - VPN Client\",       \"description\": \"VPN Client supports OpenVPN and IPSec for ctrlX OS\",       \"required\": true,       \"i18n\": \"licenses.SWL-XCx-VPN-VPNCLIENTxxxx-NNFN\"     }   ],</code></p>"},{"location":"licensing.html#423-requesting-a-floating-license","title":"4.2.3 Requesting a floating license","text":"<p>The same mechanism to acquire / release a license by an application as described in API can be used for floating licenses. It is transparent for the application whether the license is retrieved from the internal on-device license storage or from a configured license server. The entire handling of connecting to a configured license server, generating a request and retrieving / processing the license response is encapsulated within the license manager.</p> <p>Using the VPN license example as shown above, the VPN application could use the logic as shown below:</p> <ol> <li> <p>First request the standard license:</p> <pre><code>{\n    \"name\": \"SWL-XCx-VPN-VPNCLIENTxxxx-NNNN\",\n    \"version\": \"1.0\"\n}\n</code></pre> </li> <li> <p>If the standard license was not found, request the floating license:</p> <pre><code>{\n    \"name\": \"SWL-XCx-VPN-VPNCLIENTxxxx-NNFN\",\n    \"version\": \"1.0\"\n}\n</code></pre> </li> </ol> <p>Important</p> <p>Note that the application should release the license once the application is stopped or removed as described here. Releasing the license means that the license will not be renewed and eventually returned to the the license server making it available for other devices.</p>"},{"location":"licensing.html#43-floating-license-server","title":"4.3 Floating License Server","text":""},{"location":"licensing.html#431-enabling-the-floating-license-server","title":"4.3.1 Enabling the floating license server","text":"<p>In order to be able to use the license server functionality, the ctrlX OS - Floating License Server license is required. Once this license has been uploaded the user interface will show a selector that allows (de-)activating the floating license server. In general any ctrlX OS device (with a physical TPM) can used as / turned into a license server.</p> <p><code>json   \"licenses\": [     {       \"name\": \"SWL-XCx-FLS-FLOATxSERVERx-NNNN\",       \"title\": \"ctrlX OS License - Floating License Server\",       \"description\": \"Enables using the device as a (floating) license server\",       \"required\": false,       \"i18n\": \"licenses.SWL-XCx-FLS-FLOATxSERVERx-NNNN\"     }   ],</code></p>"},{"location":"licensing.html#432-floating-license-server-settings","title":"4.3.2 Floating License Server Settings","text":"<p>If the floating license server is enabled, the settings page will adjust to the settings that can be made to the floating license server. As the following image shows, these settings include following:</p> <p></p> <p>Server Intervals control for how long licenses borrowed from the server will be valid and the interval at which the clients should renew its' licenses.</p> <ul> <li>Borrow Interval:</li> <li>The borrow interval (in seconds) determines the lifespan of the served licenses. After the borrow interval has passed   the license will be automatically returned to the floating server and removed from the floating client. In the exemplary   image the license would be served for 24 hours unless it is renewed.</li> <li>Renewal Interval:</li> <li>The renewal interval (in seconds) is used by licensing clients to determine when to renew its' licenses / update it's   current licenses with the license server. In the exemplary image the client would try every 3 hours to renew its license   that are currently in use and return the licenses that have been released. Lower renewal intervals mean faster updates with   the license server (thus quicker returns of licenses that have been released), however also mean higher load on the licensing   client and server.</li> </ul> <p>Client Authentication The administrator of the floating license server can also decide how the client needs to authenticate itself in order to be able to request and be granted floating licenses from the server. If the checkbox is activated, the server requests the client to authenticate itself via mutual TLS. This means that the client is expected to send a certificate which the server then verifies. If the checkbox is activated the selector allows two configurations:</p> <ol> <li>Manually trust client certificates:</li> <li>If this mode is activated, the server will verify the certificate using the chosen CA certificates and implicitly the    ctrlX OS root CA certificate. If certificate verification is successful, the    certificate will be placed into the certificate store Licensing under category untrusted. Only after the administrator    has manually trusted the certificate (e.g. placed into category trusted), the client will be able to successfully receive    floating clients. The concept is similar to how the OPC UA protocol works in regard to certificates / trust. The advantage    is that within this mode, the system administrator has full control over what devices should be granted access to the floating    licenses - however manual interaction is always required (whitelisting).</li> <li>Automatically trust client certificates</li> <li>If this mode is activated, the server will verify the certificate using the chosen CA certificates and implicitly the   ctrlX OS root CA certificate. Upon successful certificate validation, the server   will directly respond to the client request without manual intervention (e.g. click button \"trust\"). The main advantage is that   the license server will automatically serve ctrlX OS devices upon successful verification against the specified CA certificates   without manual interaction by a system administrator. However - if access shall not be granted to specific devices, these devices'   certificates would need to be manually added to the certificate store Licensing under category untrusted (blacklisting).</li> </ol>"},{"location":"licensing.html#44-licensing-certficate-store","title":"4.4 Licensing Certficate Store","text":"<p>Depending on the authentication scheme configured on the license server (see here), the client can be forced to authenticate itself (mutual TLS). Furthermore the server allows configuring CA certificates against which the client certificate is verified.</p> <p>These certificates (and keys) can be selected from a dedicated certificate store (Licensing).</p>"},{"location":"licensing.html#copyright","title":"Copyright","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG</p>"},{"location":"localization.html","title":"Using Localization","text":"<p>This document is part of the Bosch Rexroth ctrlX OS App Development Guideline, and gives hints on how to support user interface localization on ctrlX OS.</p> <p>Please refer to the App Development Guide for further information.</p>"},{"location":"localization.html#table-of-contents","title":"Table of Contents","text":"<p>1 Introduction</p> <p>2 Localization Files</p> <p>3 Best practice: How to make an app localizable</p>"},{"location":"localization.html#1-introduction","title":"1 Introduction","text":"<p>ctrlX OS uses the NGX-Translate library to localize Apps</p> <p>Details of this library can be found here: https://ngx-translate.org/</p> <p>The basic concept of localization is to</p> <ul> <li>extract localizable texts from HTML and Typescript</li> <li>and put them into language specific localization files.</li> </ul> <p>At runtime, localized texts are loaded from localization files depending on the currently selected language and displayed in the UI.</p>"},{"location":"localization.html#2-localization-files","title":"2 Localization Files","text":""},{"location":"localization.html#21-conventions","title":"2.1 Conventions","text":"<p>The texts to be translated are stored in json localization files. Localization files are loaded at runtime from</p> <pre><code>https://{ip-address}/assets/i18n/\n</code></pre> <p>To ensure that several localization files can be located in the assets directory in parallel, they have to comply to the following naming convention:</p> <pre><code>{App-Name}.{lang-ISO_639-1-code}.json\n</code></pre> <p>Localization files contain localizable texts for exactly one language and for exactly one app That means: Every app contains separate localization files per language.</p> <p>For ISO codes refer to https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes</p> <p>Examples:</p> <ul> <li>ctrlx-app.en.json</li> <li>ctrlx-app.de.json</li> </ul>"},{"location":"localization.html#22-content-and-structure","title":"2.2 Content and structure","text":"<p>Localization files are basically key/values lists. Each key/value pair represents one localizable string.</p> <p>The basic format of a key/value entry is:</p> <pre><code>\"&lt;key&gt;\":  \"&lt;translated text&gt;\"\n</code></pre>"},{"location":"localization.html#221-key-naming-convention","title":"2.2.1 Key naming convention","text":"<p>Keys have to follow the following convention to avoid conflicts when several localization files are loaded simultaneously at runtime:</p> <pre><code>&lt;app id&gt;.&lt;component&gt;.&lt;element&gt;[.type]\n</code></pre> <ul> <li>app id: unique app id (as defined during the app onboarding process, see App Development Guide for details)</li> <li>component: denotes the building block (angular component, service etc.) within an app where the translatable text is located</li> <li>element: denotes the ui-element within a component on which the text is placed</li> <li>type (optional): denotes the type of the ui-element. This can give  translators additional information,  that may be relevant for translation.</li> </ul> <p>For example, types in ctrlX OS are:</p> <ul> <li>title  (page / dialog titles)</li> <li>header (column headers etc.)</li> <li>tab (tab page titles)</li> <li>menu (sidebar menus and other menus)</li> <li>sub menu (sidebar menus and other menus)</li> <li>button (button text)</li> <li>tooltip (tooltip text)</li> </ul>"},{"location":"localization.html#222-localization-file-formats","title":"2.2.2 Localization file formats","text":"<p>Two formats of localization files are supported:</p> <ul> <li>the flat format</li> <li>the namespaced format</li> </ul> <p>Each of them has its pros and cons.</p>"},{"location":"localization.html#flat-format","title":"Flat format","text":"<p>In flat format each key/value pair corresponds to one line within the json file.</p> <p>The flat format is the straight forward approach that can be used especially in small webapps/weblibs that do not have much translatable text. This is quite simple. However, with increasing file length it becomes difficult to keep the overview about the file content.</p> <p>Localization file in flat format:</p> <pre><code>{\n  \"myapp.startPage.element1\": \"Localized Text 1\",\n  \"myapp.startPage.element2\": \"Localized Text 2\",\n  \"myapp.startPage.element3\": \"Localized Text 3\"\n}\n</code></pre>"},{"location":"localization.html#namespaced-format","title":"Namespaced format","text":"<p>To add structure to extensive localization files the namespaced format can be used.</p> <p>In this format the effective key (e.g. \"myapp.startPage.element1\") will be composed of the namespace (e.g. \"myapp.startPage\") and the key within the namespace (e.g. \"element1\"). This means that both formats are equivalent and represent the same localization information.</p> <p>Localization file in namespaced format:</p> <pre><code>{\n  \"myapp.startPage\": {\n    \"element1\": \"Localized Text 1\",\n    \"element2\": \"Localized Text 2\",\n    \"element3\": \"Localized Text 3\"\n  }\n}\n</code></pre>"},{"location":"localization.html#note","title":"Note","text":"<p>Comments and remarks are not supported in localization files</p>"},{"location":"localization.html#3-best-practice-how-to-make-an-app-localizable","title":"3 Best practice: How to make an app localizable","text":"<p>Note:</p> <p>This chapter describes a ctrlX OS best practice to add localization to an app. Bosch Rexroth does not guarantee that this practice will work for Partner Apps.</p> <p>Please see https://ngx-translate.org/ for additional information. This site also provides example for different options on how to add ngx translate to a web application.</p>"},{"location":"localization.html#31-install-ngx-translate-and-ngx-translate-multi-http-loader","title":"3.1 Install ngx-translate and ngx-translate-multi-http-loader","text":"<p>Use the following commands to install ngx-translate and ngx-translate-multi-http-loader:</p> <pre><code>    npm install @ngx-translate/core @ngx-translate/http-loader rxjs --save\n    npm install ngx-translate-multi-http-loader --save\n</code></pre>"},{"location":"localization.html#32-add-an-assetsi18n-folder-to-your-app-project","title":"3.2 Add an assets/i18n folder to your app project","text":"<pre><code>&lt;root&gt;\n  |- projects\n      |- &lt;app-name&gt;\n           |- src         &lt;= sources are here\n               |\n               |- assets\n               |   |- i18n    &lt;= localization files are located here\n               |       |- &lt;app-name&gt;.en.json\n               |       |- &lt;app-name&gt;.xy.json\n               |\n               |- ...\n</code></pre>"},{"location":"localization.html#33-add-the-translatemodule-to-appmodulets","title":"3.3 Add the TranslateModule to app.module.ts","text":"<pre><code>import { TranslateModule, TranslateLoader } from '@ngx-translate/core';\nimport { MultiTranslateHttpLoader } from 'ngx-translate-multi-http-loader';\n\nexport function createMultiTranslateHttpLoader(http: HttpClient): TranslateLoader {\n  return new MultiTranslateHttpLoader(http, [\n\n    //If the app uses lazy loaded modules:\n    { prefix: './&lt;app-name&gt;/assets/i18n/&lt;app-name&gt;.', suffix: '.json' },\n\n    //If the app does NOT use lazy loaded modules\n    { prefix: './assets/i18n/&lt;app-name&gt;.', suffix: '.json' },\n\n  ]);\n}\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    ...,\n    HttpClientModule,\n    TranslateModule.forRoot({\n      loader: {\n          provide: TranslateLoader,\n          useFactory: createMultiTranslateHttpLoader,\n          deps: [HttpClient]\n      },\n      defaultLanguage: 'en'\n    }),\n    ...\n</code></pre> <p>Note that TranslateModule.forRoot() must be called.</p> <p>For ctrlX OS, English (en) is defined as defaultLanguage. That means English is the fallback language if a translation is not available in the currently selected language.</p>"},{"location":"localization.html#34-localize-the-ui-related-parts-of-your-app","title":"3.4 Localize the UI related parts of your app","text":"<p>Please see details here: https://github.com/ngx-translate/core</p> <p>Copyright \u00a9 Bosch Rexroth AG 2022-2024</p> <p>This document, as well as the data, specifications and other information set forth in it, are the exclusive property of Bosch</p>"},{"location":"log.html","title":"Logging","text":""},{"location":"log.html#introduction","title":"Introduction","text":"<p>During development, test phase and at runtime it is very useful - and in case of problems essential - that an application publishes messages. These messages can be informations, diagnostics or errors according the event which triggered the message. These messages should be displayed and stored uniform.</p> <p>We recommend to use the build-in Linux systemd logging service called journald.</p>"},{"location":"log.html#the-using-of-linux-kernel-log-levels","title":"The Using of Linux Kernel Log Levels","text":"<p>The interface to journald depends from the programming language. But for all these predefined Linux log levels (values) are common:</p> <ol> <li>EMERGENCY    The system is unusable (and will be shut down)</li> <li>ALERT        There is a severe error, action must be taken immediately</li> <li>CRITICAL     There is a critical error</li> <li>ERROR        A job was aborted in case of an error</li> <li>WARNING      There is an abnormal condition but the actual job can be finished</li> <li>NOTICE       There is a normal but significant condition</li> <li>INFO         A messages informs about an internal state</li> <li>DEBUG        Message shows details regarding program flow or results</li> </ol> <p>Be carefull with level EMERGENCY: Messages with this level are sent to all consoles!</p>"},{"location":"log.html#logging-samples-in-the-sdk","title":"Logging Samples in the SDK","text":"<p>These folders of the ctrlX AUTOMATION SDK contain logging samples for different programming languages:</p> <ul> <li>samples-cpp/diagnostics.logbook</li> <li>samples-net/diagnostics.logbook</li> <li>samples-python/python.logbook</li> </ul>"},{"location":"log.html#support","title":"Support","text":"<p>If you've any questions visit the ctrlX AUTOMATION Community</p>"},{"location":"log.html#license","title":"License","text":"<pre><code>/*\n * SPDX-FileCopyrightText: Bosch Rexroth AG\n *\n * SPDX-License-Identifier: MIT\n */\n</code></pre>"},{"location":"numopenfilehandles.html","title":"How to Configure the maximal Number of Open File Handles","text":""},{"location":"numopenfilehandles.html#introduction","title":"Introduction","text":"<p>The maximum number of open file/socket handles is by default limited to 1024. This is not enough for some apps (e.g. connectivity apps or databases).</p> <p>The actual settings can be shown with:</p> <pre><code>ulimit -a\n</code></pre> <p>Maximum file handles:</p> <pre><code>cat /proc/sys/fs/file-max\n</code></pre> <p>Allocated, allocated but unused, maximum number of file handles:</p> <pre><code>cat /proc/sys/fs/file-nr\n</code></pre>"},{"location":"numopenfilehandles.html#solution","title":"Solution","text":"<p>For a lot of apps the number of 1024 maximal opened file handles is sufficient.</p> <p>If a larger number of opened file handles is required this can be done with the command <code>ulimit</code>, for example:</p> <pre><code>ulimit -n 16384\n</code></pre> <p>Your app should run this command in the startup phase of your app.</p> <p>Therefor we recommend to:</p> <ul> <li>Create a script in a sub folder e.g. ulimit-snap/ of your project.</li> <li>And to add into your snapcraft.yaml file a daemon entry to call this script at startup.</li> </ul> Script increase-ulimit.sh<pre><code>#!/bin/sh\nulimit -n 16384\n</code></pre> Daemon snapcraft.yaml<pre><code>parts:\nulimit-script:\n    plugin: dump\n    source: ./ulimit-snap\n\napps:\nulimit:\n    daemon: simple\n    command: increase-ulimit.sh\n</code></pre>"},{"location":"numopenfilehandles.html#complete-example-snap","title":"Complete Example Snap","text":"<p>In this SDK an complete example project creating a demo snap is stored under samples-snap/ulimit.</p> <p>The sample project folder also contains a README.md file with further informations.</p>"},{"location":"overview.html","title":"Overview","text":"<p>The ctrlX AUTOMATION SDK is the Software Development Kit of ctrlX AUTOMATION. With this SDK software applications (apps) can be developed for the Linux based ctrlX AUTOMATION CORE devices in various high level languages.</p> <p>A short introduction into ctrlX AUTOMATION you can find here: ctrlX AUTOMATION.</p>"},{"location":"overview.html#quick-step-guide-building-a-snap-from-a-sdk-sample-project","title":"Quick Step Guide Building a Snap from a SDK Sample Project","text":"<p>Creating a snap (app) from a SDK sample project in a few steps is described here:</p> <p>Quick Start Guide</p>"},{"location":"overview.html#important-topics","title":"Important Topics","text":"<p>Use the following sections of this documentation to learn more about the contents of the ctrlX AUTOMATION SDK.</p>"},{"location":"overview.html#setup-app-build-environment","title":"Setup App Build Environment","text":"<p>How to setup a Linux Ubuntu app build environment using a virtual or a bare-metal machine is described here: Setup Overview</p>"},{"location":"overview.html#samples","title":"Samples","text":"<ul> <li>Samples: A description of the included examples in the SDK and how to use them.</li> </ul>"},{"location":"overview.html#references","title":"References","text":"<ul> <li>References: An overview of useful links and some references</li> </ul>"},{"location":"overview.html#changes","title":"Changes","text":"<ul> <li>Changelog: Changes since last release</li> </ul>"},{"location":"overview.html#additional-information","title":"Additional Information","text":"<p>Here you can find additional documentation, help and support which goes beyond the scope of this SDK:</p> <ul> <li>Online Product Information</li> <li>ctrlX AUTOMATION Community</li> </ul>"},{"location":"package-assets.html","title":"Package Assets","text":""},{"location":"package-assets.html#basics","title":"Basics","text":"<p>Beside the metadata published using the snapcraft.yaml the package-assets interface provides a way to provide additional information of your app to the ctrlX CORE system. Currently the following information can be provided by the package-assets folder:</p> <ul> <li>A package manifest containing a declarative description of the app, including permissions, menus and reverse proxy configurations etc. </li> <li>Translation files for different parts of the app</li> <li>Open Source Software (OSS) information of used Software in the app</li> </ul> <p>Details for each topic can be found below.</p>"},{"location":"package-assets.html#providing-the-package-manifest","title":"Providing the Package Manifest","text":"<p>The third-party app has to provide the manifest file to the ctrlX CORE system. Thus, a data exchange has to be set up between the app and the Device Admin app. To exchange information, the content interface with the name \"package-assets\" is used. This content interface works opposite to the \"normal\" content interface. In this case, the plug provides data by mounting a directory into the space provided by the slot. Canonical calls this principle \"spool mode\".</p> <p>The following example shows the procedure step-by-step.</p> <ol> <li>Create the folder \"configs/package-assets\u201d in the root of your snap project.</li> <li>Update your snapcraft.yaml<ul> <li>Add a new part which copies the content of the \"configs\" directory to your $SNAP folder using the dump plugin.</li> <li>Add the slot \"package-assets\" to your slot configuration</li> </ul> </li> <li>Add the relevant files to \"configs/package-assets\" folder, for detailed information on each file see below.</li> </ol> <p>Example</p> snapcraft.yaml<pre><code>name: rexroth-myapp\n[...]\nparts:\n  configs:\n      plugin: dump\n      source: ./configs\n      organize:\n        'package-assets/*': package-assets/${SNAPCRAFT_PROJECT_NAME}/\n[...]\nslots:\n  package-assets:\n      interface: content\n      content: package-assets\n      source:\n        read:\n        - $SNAP/package-assets/${SNAPCRAFT_PROJECT_NAME}\n[...]\n</code></pre>"},{"location":"package-assets.html#the-package-manifest","title":"The Package Manifest","text":"<p>An app can provide own menu entries, use the reverse proxy infrastructure including permissions and the storage solution. This document describes the different integration points and how they work.</p> <p>The package manifest is essential for the integration points. Beside the snapcraft.yaml, it is strongly recommended that the app has to provide the package manifest to be integrated into the ctrlX CORE system. </p> <p>The package manifest file should follow the naming convention <code>&lt;app name&gt;.&lt;package-manifest&gt;.json</code> where <code>&lt;app name&gt;</code> and the <code>id</code> property in the package manifest are both set to the <code>name (technical app name)</code> as mentioned in the snapcraft documentation.</p>"},{"location":"package-assets.html#schema-file","title":"Schema File","text":"<p>1.1</p> <p>The schema for the package manifest JSON file is provided. By explicit assigning this schema file, the configured content will be validated in editors such as Visual Studio Code. </p> <p>Example</p> <pre><code>  \"$schema\": \"https://json-schema.boschrexroth.com/ctrlx-automation/ctrlx-os/apps/package-manifest/package-manifest.v1.4.schema.json\"\n</code></pre> Field Descriptions $schema string, valid link to the schema file.default: <code>https://json-schema.boschrexroth.com/ctrlx-automation/ctrlx-os/apps/package-manifest/package-manifest.v1.schema.json</code>,which references the latest 1er version. <p>The available versions of the schema file are: </p> Version Available in ctrlX Core Link 1.0 &gt;=V1.18 https://json-schema.boschrexroth.com/ctrlx-automation/ctrlx-os/apps/package-manifest/package-manifest.v1.0.schema.json 1.1 &gt;=V1.18 https://json-schema.boschrexroth.com/ctrlx-automation/ctrlx-os/apps/package-manifest/package-manifest.v1.1.schema.json 1.2 &gt;=V1.18 https://json-schema.boschrexroth.com/ctrlx-automation/ctrlx-os/apps/package-manifest/package-manifest.v1.2.schema.json 1.3 &gt;=V1.20 https://json-schema.boschrexroth.com/ctrlx-automation/ctrlx-os/apps/package-manifest/package-manifest.v1.3.schema.json 1.4 &gt;=V1.20 https://json-schema.boschrexroth.com/ctrlx-automation/ctrlx-os/apps/package-manifest/package-manifest.v1.4.schema.json"},{"location":"package-assets.html#version","title":"Version","text":"<p>1.0</p> <p>The version of the package manifest file</p> <p>Example</p> <pre><code>  \"version\": \"1.0.0\"\n</code></pre> Field Descriptions version string, the version"},{"location":"package-assets.html#identifier","title":"Identifier","text":"<p>1.0</p> <p>Unique identifier of the package</p> <p>Example</p> <pre><code>  \"id\": \"sdk-go-webserver\"\n</code></pre> Field Descriptions id string, the unique identifier of the package"},{"location":"package-assets.html#required-app","title":"Required App","text":"<p>1.2</p> <p>In specific scenarios (e.g. Brandlabeling (Theming App) or as ctrlX OS Partner) you might want to prohibit the uninstallation and deactivation of your app. This option is only allowed in specific scenarios and requires a justification as part of validation of the app.</p> <p>Example</p> <pre><code>  \"required\": true\n</code></pre> Field Descriptions required boolean, indicates if the app is required app"},{"location":"package-assets.html#scopes-and-permissions","title":"Scopes and Permissions","text":"<p>1.1</p> <p>Scopes provided by the package</p> <p>Example</p> <pre><code>\"scopes-declaration\": [\n  {\n    \"identifier\": \"ctrlx-helloworld.web\",\n    \"name\": \"Helloworld Scopes\",\n    \"description\": \"Scopes for the Hello World App\",\n    \"scopes\": [\n      {\n        \"identifier\": \"ctrlx-helloworld.web.all.rw\",\n        \"name\": \"Manage hello world\",\n        \"description\": \"Manage and modify hello world\",\n        \"i18n\": \"scopes.manage\"\n      },\n      {\n        \"identifier\": \"ctrlx-helloworld.web.all.r\",\n        \"name\": \"View hello world\",\n        \"description\": \"View (but not modify) hello world\",\n        \"i18n\": \"scopes.view\"\n      }\n    ]\n  }\n]\n</code></pre> Field Descriptions scopes-declaration An array, which contains the definitions of the scopes and permissions, see following table <p>The Definiton of the scopes-declaration object:</p> Field Descriptions identifier string, the identifier of the scope set and should start with the snap name name string, the name of the scope set description string, the description of the scope set scopes array, array of scopes objects <p>Defition of the scope object:</p> Field Descriptions identifier string, the identifier of the scope name string, the name of the scope description string, description of the scope i18n string, i18n tag, see language files and translation <p>If access is restricted to specific resources, define scopes. When using the Identity Management, an administrator can configure the users and groups allowed to access specific resources. The following example shows two simple scopes (read/write, all settings, read-only settings). In every routine, the web server has to check whether the provided token includes the scope.</p> <p>Remark</p> <p>Restrictions apply on the scope namings, identifiers, etc. (see below)</p> <p>Use the following schema for the main identifier of the scope:</p> <p><code>&lt;id&gt;.&lt;service&gt;</code></p> <ul> <li>id: Package identifier. Has to correspond to the snap name. <ul> <li>example: rexroth-solutions, rexroth-vpnmanager</li> </ul> </li> <li>service: Service identifier. <ul> <li>example: web</li> </ul> </li> </ul> <p>Some examples:</p> <ul> <li>rexroth-solutions.web</li> <li>rexroth-vpnmanager.web</li> </ul> <p>Use this schema for the identifier of the scope:</p> <p><code>&lt;id&gt;.&lt;service&gt;.&lt;scope_name&gt;.&lt;access&gt;</code></p> <ul> <li>id: Package identifier. Has to correspond to the snap name<ul> <li>Example: rexroth-solutions, rexroth-vpnmanager</li> </ul> </li> <li>service: Service identifier<ul> <li>Example: web</li> </ul> </li> <li>scope_name: Name of the specific scope<ul> <li>Example: solutions, connections, configurations, users</li> </ul> </li> <li>access: Type of access to the resource represented by this scope. Supported are:<ul> <li>r: read-only, allows read-only access to specific resources</li> <li>w: write-only, allows write-only access to specific resources</li> <li>rw: read/write, allows read-only and write access to specific resources</li> <li>x: execute, executes a specific action represented by a resource</li> </ul> </li> </ul> <p>Some examples:</p> <ul> <li>rexroth-vpnmanager.web.shortcuts.r: Read-only access to VPN shortcuts</li> <li>rexroth-vpnmanager.web.shortcuts.rw: Read and create VPN connection shortcuts</li> <li>rexroth-deviceadmin.web.own_password.w: Update (but not read) the password of the user who currently logged in</li> <li>rexroth-vpnmanager.web.shortcuts.x: Start/stop VPN connections via existing starters (shortcuts)</li> </ul>"},{"location":"package-assets.html#enforcing-permissions-in-your-service","title":"Enforcing permissions in your service","text":"<p>The web server has to enforce the defined permissions. The following pseudo code snippet shows a simple example in which the function ListAddresses checks whether the client has the permission to execute the function. The scope \"rexroth-device.all.rwx\" is a special scope reflecting an administrative access permission.</p> <p>Example</p> <pre><code>func ListAddresses(w http.ResponseWriter, r *http.Request) {\n\n    // Define valid scopes for resource access\n    scope := []string{\"networkmanager.all.r\", \"networkmanager.all.rw\", \"rexroth-device.all.rwx\"}\n\n\n    // Extract scopes from http request and compare them to valid scopes\n    // Return if not authorized\n    if ok, _ := checkPermissions(r, scope); !ok {\n        errors.ErrUnauthorized.Write(w)\n        return\n    }\n}\n</code></pre>"},{"location":"package-assets.html#admin-scope","title":"Admin Scope","text":"<p>By default, the Identity Management provides a special admin scope (\"rexroth-device.all.rwx\u201d) that should only be assigned to admin users.  It is recommended to grant users full access to your web application if they are provided with this permission. This facilitates the handling of administrator accounts.</p> <p>The following snippet shows the definition of the admin scope. You can see (and assign) the permission to users and/or groups.</p> <p>Example</p> <pre><code>  {\n      \"identifier\": \"rexroth-device\",\n      \"name\": \"Global device administration\",\n      \"description\": \"Global device administration permissions allow unrestricted access to all system resources\",\n      \"scopes\":[\n          {\n              \"identifier\": \"rexroth-device.all.rwx\",\n              \"name\": \"Administration access\",\n              \"Description\": \"Unrestricted, administrative access to system resources\"\n          }\n      ]\n  }\n</code></pre>"},{"location":"package-assets.html#services","title":"Services","text":"<p>1.0</p> <p>Services contains a set of services that a package provides</p> <p>Example</p> <pre><code>\"services\": {\n  \"proxyMapping\": [\n    {\n      \"name\": \"sdk-go-webserver\",\n      \"url\": \"/sdk-go-webserver/\",\n      \"binding\": \"unix://{$SNAP_DATA}/package-run/sdk-go-webserver/web.sock\",\n      \"restricted\": []\n    }\n  ]\n}\n</code></pre>"},{"location":"package-assets.html#proxy-mapping","title":"Proxy Mapping","text":"<p>1.0</p> <p>Proxy mapping is used by the reverse proxy to assign specific routes to a server running on a device.</p> <p>Example</p> <pre><code>\"services\": {\n  \"proxyMapping\": [\n    {\n      \"name\": \"rexroth-solutions.web\",\n      \"url\": \"/rexroth-solutions\",\n      \"binding\": \":5000\",\n      \"restricted\": [\n        \"/rexroth-solutions/api/v1.0\"\n      ]\n    }\n  ]\n}\n</code></pre> <p>The reverse proxy handles all external web-based (HTTP/HTTPS) requests to the device. The reverse proxy provides the following functionality:</p> <ul> <li>Automatic HTTPS: By default, all data exchanged between client and server is encrypted.</li> <li>Token validation: By default, only authenticated users may access resources on the device (except the login page). Requests with invalid tokens (lifetime expired, invalid signature) are rejected.</li> </ul> <p>The proxy mapping provides the configuration required by the reverse proxy to redirect requests for a specific URL to a web server running on the device.</p> <p>Providing a proxy configuration is optional in some cases (e.g. if your snap does not provide a web service). If a proxy configuration is provided, the following parameters are valid:</p> Field Descriptions name Name of the web service.  The format is: <code>&lt;id&gt;.&lt;service&gt;</code>The name has to be unique and should start with the snap name. Examples:  - rexroth-solutions.web  - rexroth-hmi.web url URL provided by the reverse proxy. When a client tries to access this URL, the reverse proxy transparently redirects the request to the web server. Thus, your web server has to be configured to listen to e.g. \"/cool-app\" and not \"/\". Must not conflict with other web service URLs, so it should start with the snap name, syntax: \"/{$SNAP_NAME}\". Examples:  - /rexroth-solutions  - /rexroth-hmi binding Resource identifier to which the reverse proxy redirects the requests. The resource can either be a port or a Unix socket. Using a Unix socket is highly recommended. Examples:  - :5000  - 192.168.1.17:5000  - \"unix://{$SNAP_DATA}/package-run/rexroth-solutions/rexroth-solutions.web.sock\" restricted Restricted URL. Only authenticated clients can access the URLs defined here. One important example is the API URL(s) - those URLs should be restricted in most use cases. Examples:  - /rexroth-solutions/api/v1.0 <p>Info</p> <p>Remark: If a snap provides multiple web servers, multiple ProxyMapping entries are allowed.</p>"},{"location":"package-assets.html#binding","title":"Binding","text":""},{"location":"package-assets.html#unix-sockets-recommended","title":"Unix sockets (recommended)","text":"<p>To use Unix sockets, the web server of your application has to bind against a Unix Domain Socket. Most web server frameworks already support this functionality. The benefit of Unix sockets is the additional security (file access can be restricted via file permissions) and the lower attack surface on network level (the service cannot be reached externally). To enable your snap and to provide the reverse proxy access to your Unix socket, use the content interface slot \"package-run\". It uses the same mechanism as the \"package-assets\" interface.</p> <p>Example</p> <pre><code>  package-run:\n    interface: content\n    content: package-run\n    source:\n      write:\n      - $SNAP_DATA/package-run/${SNAPCRAFT_PROJECT_NAME}\n</code></pre> <p>In the example mentioned above, your \"unix socket file\" should be created under <code>{$SNAP_DATA}/package-run/{$SNAP_NAME}/web.sock</code>. The file has to be managed completely by your application logic and - in contrast to a network socket, has to be deleted after unbinding. Also consider deleting the Unix domain socket before binding your web server before start-up.</p> <p>Now, publish the information on the socket file using the package-manifest via the ProxyMapping described above. The relevant part is the \"binding\" section below. Replace</p> <p>Warning</p> <p>The path length of a Unix socket is limited to 108 characters. Thus, ensure that the resolved path, e.g /var/snap/third-party-snap/current/package-run/third-party-snap/third-party-snap.web.sock does not exceed that limit and that the highlighted part does not exceed 50 characters. If required, shorten the path by replacing \"package-run\" with \"run\" and change the file name from \"third-party-snap.web.sock\" to \"web.sock\". </p> <p>Example</p> <pre><code>\"services\": {\n    \"proxyMapping\": [\n      {\n        \"name\": \"third-party-snap.web\",\n        \"url\": \"/cool-app\",\n        \"binding\": \"unix://{$SNAP_DATA}/package-run/third-party-snap/web.sock\"\n      }\n    ]\n},\n</code></pre>"},{"location":"package-assets.html#local-host-not-recommended","title":"Local host (not recommended)","text":"<p>Only bind to a local host if a Unix domain socket (see above) cannot be used. Your app has to bind to a specified port that is not used by other apps.</p> <p>Example</p> <pre><code>  \"services\": {\n    \"proxyMapping\": [\n      {\n        \"name\": \"third-party-snap.web\",\n        \"url\": \"/cool-app\",\n        \"binding\": \":4711\",\n      }\n    ]\n  }\n</code></pre>"},{"location":"package-assets.html#menus","title":"Menus","text":"<p>1.0</p> <p>An app can be integrated into the ctrlX CORE navigation by defining menu entries. There are three possible integration points:</p> <ul> <li>Sidebar: To allow the navigation to the main functionality of your apps</li> <li>Settings: To allow the navigation to your app settings</li> <li>Home Overview: To provide a customized tile for your application</li> </ul> <p></p> <p>Example</p> <pre><code>  \"menus\": {\n    \"sidebar\": [\n      {\n        \"id\": \"solutions\",\n        \"title\": \"Solutions\",\n        \"icon\": \"bosch-ic-solutions\",\n        \"permissions\": [\"solutions.r\", \"solutions.rw\"],\n        \"items\": [\n          {\n            \"id\": \"solutions-activeconfiguration\",\n            \"title\": \"Active Configuration\",\n            \"link\": \"/solutions/activeconfiguration\",\n            \"permissions\": [\"solutions.r\", \"solutions.rw\"],\n            \"items\": []\n          },\n          {\n            \"id\": \"solutions-overview\",\n            \"title\": \"Solutions Overview\",\n            \"link\": \"/solutions/solutions\",\n            \"permissions\": [\"solutions.r\", \"solutions.rw\"],\n            \"items\": []\n          }\n        ]\n      }\n    ],\n    \"settings\": [\n      {\n        \"id\": \"solutions-settings\",\n        \"title\": \"Solution Settings\",\n        \"icon\": \"bosch-ic-gear\",\n        \"link\": \"/solutions/settings\",\n        \"permissions\": [\"solutions.rw\"],\n        \"items\": []\n      }\n    ],\n    \"overview\": [\n      {\n        \"id\": \"solutions-overview\",\n        \"title\": \"Solutions\",\n        \"description\": \"Manage solutions on the control\",\n        \"icon\": \"bosch-ic-solutions\",\n        \"link\": \"/solutions/activeconfiguration\",\n        \"permissions\": [\"solutions.r\", \"solutions.rw\"],\n        \"items\": []\n      }\n    ]\n  }\n</code></pre> <p>If the third-party app uses a specified port and not our reverse proxy infrastructure, use the template variable \"${hostname}\" to allow the ctrlX CORE to replace it dynamically. E.g.:</p> <p>Example</p> <pre><code>  {\n    \"id\": \"node-red\",\n    \"title\": \"Node-RED\",\n    \"link\": \"http://${hostname}:1880/\"\n  }\n</code></pre> <p>If you want to open your application in your own tab, you can define the target tab. After this integration, a third-party app opens in a separate tab in the browser. If your application can integrate and validate the ctrlX CORE token. You can \"transfer\" the token using a query field. This is done with the template variable \"${bearertoken}\".</p> <p>Example</p> <pre><code>  \"menus\": {\n    \"sidebar\": [\n      {\n        \"id\": \"app-name\",\n        \"title\": \"My App Name\",\n        \"icon\": \"myApp-Icon\",\n        \"permissions\": [],\n        \"items\": [\n          {\n            \"id\": \"myApp-Id\",\n            \"title\": \"MySideBarTitle\",\n            \"link\": \"/app-name?access_token=${bearertoken}\",\n            \"target\":\"myApp-Id\",\n            \"permissions\": [],\n            \"items\": []\n          }\n        ]\n      }\n    ]\n  }\n</code></pre> Field Descriptions sidebar array of entries, which contains the definitions to the sidebar menus settings array of entries, which contains the definitions to the settings menus overview array of entries, which contains the definitions to the overview menus system array of entries, which contains the definitions to the system menus <p>The definition of the object entries</p> Field Descriptions items array of entries, which contains the definitions to the sublinks link string, link to the ressource target string, which specifies where the link is shown. Use \"_blank\" or a specific name to open the link in a new tab (recommended for 3rd-party apps) id string starting with the snap name, used as a unique item identifier to order items title string, the text representation of the entry point description string, the description of the entry point icon string, an icon, which represents the entry point. Use the icon library as a reference. category string, the category the entry point belongs to permissions array of string, an optional list of permissions to enable the entry point i18n string, i18n tag, see language files and translation"},{"location":"package-assets.html#commands","title":"Commands","text":"<p>1.0</p> <p>Example</p> <pre><code>  \"commands\": {\n    \"activeConfiguration\": {\n      \"save\": [\n        {\n          \"id\": \"ctrlx-helloworld\",\n          \"subject\": \"hello world\",\n          \"url\": \"/ctrlx-helloworld/api/v1/save\"\n        }\n      ],\n      \"load\": [\n        {\n          \"id\": \"ctrlx-helloworld\",\n          \"subject\": \"hello world\",\n          \"url\": \"/ctrlx-helloworld/api/v1/load\"\n        }\n      ]\n    }\n  }\n</code></pre> <p>The definition of commands object</p> Field Description commands object, which references commandScope, which references command, which referneces to commandRequest <p>The definition of commandRequest</p> Field Description id string, the identifier of this command subject string, denotes what will be saved or loaded after array of string, a list of command identifiers whose commands if present will always be executed before this command url string, The request URL execution object, The execution object is deprecated. Use url object instead <p>The definition of the execution object </p> Field Description method string, enum put post, the HTTP method called for executing this command url string, the URL used for executing this command"},{"location":"package-assets.html#documentation","title":"Documentation","text":"<p>1.1</p> <p>Contains documents like API references</p> <p>The API of the app can optionally be integrated in the API reference section of the help menu. Therefor you have to do following steps:</p> <p>Step 1:</p> <p>Example</p> <pre><code>\"documentation\": [\n  {\n    \"type\": \"api\",\n    \"name\": \"ctrlX OS - Solutions API\",\n    \"url\": \"/doc/api/?url=/solutions/doc/api/api.solutions.json\",\n    \"description\": \"Provides functionalities for persisting and managing app data on ctrlX OS devices.\",\n    \"i18n\": \"documentation.solutions\"\n  }\n]\n</code></pre> <p>Step 2:</p> <p>Provide the api itself as json file. 1. Create the folder \"api/solutions\u201d in the root of your snap project. 2. Copy the json file to this location</p> <p>Step 3:</p> <p>An entry 'api' in the 'parts' section of the snapcraft.yaml file is necessary.</p> <p>Example</p> <pre><code>parts:\n  api:\n    plugin: nil\n    source: api\n    override-build: make DESTDIR=$SNAPCRAFT_PART_INSTALL\n</code></pre> <p>Step 4:</p> <p>A makefile 'Makefile' in the api folder of your project is required, where you handle the copy of the api during installation of your app:</p> <p>Example</p> <pre><code>dirs := $(shell ls -d */)\nDESTDIR ?= $(PWD)/dist\n\ninstall:\n  install -d -m 755 $(DESTDIR)/static/doc/api\n  cp solutions/public/*.json $(DESTDIR)/static/doc/api\n</code></pre> <p>The definition of documentation</p> Field Description documentation array, a list of documents <p>The definition of document</p> Field Description type string, type of the document name string, name of the document url string, URL of the document description string, description of the document i18n string, i18n tag, see language files and translation"},{"location":"package-assets.html#configuration","title":"Configuration","text":"<p>1.1</p> <p>The definition of configuration </p> Field Description appDirectories array of object appDirectory appPrivateFiles array of strings <p>The definiton of appDirectory</p> Field Description name string, path of the app directory in the configuration and should start with the snap name description string, Short description of the content of the directory. Will be displayed as part of a configuration. icon string, an icon which represents the app. Use the icon library as a reference. copyOnLoad string, copy on load writeProtected boolean, write-protection of app directories scopes array of object scope, see Scopes and Permissions i18n string, i18n tag, see language files and translation"},{"location":"package-assets.html#certificate-stores","title":"Certificate Stores","text":"<p>1.1</p> <p>The certificate store block defines whether a snap service has to handle cryptographic keys or certificates. A snap should have different certificate stores for different services. These stores are defined in the package-assets file (see following code snippet)</p> <p>Example</p> <pre><code>\"certificatestores\": [\n  {\n    \"id\": \"examplestore\",\n    \"title\": \"Example Store\",\n    \"description\": \"This is only an example store for documentation purposes.\",\n    \"scopesR\":[\n      \"example.permission.r\"\n    ],\n    \"scopesRWX\":[\n      \"example.permission.rwx\"\n    ]\n  }\n]\n</code></pre> <p>The definition of certificatestores object </p> Field Description id string,Use a unique ID, as it is used to identify the store via the REST interface. Example:  - opcua  - vpnmanager title string, name used in the front end. Example:  - OPCUA  - VPN Manager description string, displayed in the front end. To describe the application and provide further information scopesR array of strings, a list of scopes that allow the user to have read access to this certificate store, Example:  - rexroth-solutions.web.all.r  - example.permission.r scopesRWX array of strings, a list of scopes that allow the user to have full access to this certificate store, Example:  - rexroth-solutions.web.all.rw  - example.permission.rwx <p>The following predefined folder structure applies to every certificate store:</p> <p>Hint</p> <p>SNAPCRAFT_PROJECT_NAME has to be replaced with the technical app name!</p> <p>Example</p> /$SNAP_COMMON/package-certificates/{SNAPCRAFT_PROJECT_NAME}/<pre><code>./application1\n    /ca\n    /own\n        /private\n        /certs\n    /rejected\n        /keys\n        /certs\n    /trusted\n        /keys\n        /certs\n./application2\n    /ca\n</code></pre> <p>It is also necessary to define the base path to the certificate storage in the snapcraft.yaml:</p> <p>Example</p> snapcraft.yaml<pre><code>name: rexroth-myapp\n[...]\nslots:\n  package-certificates:\n    interface: content\n    content: package-certificates\n    source:\n      write:\n      - $SNAP_COMMON/package-certificates/${SNAPCRAFT_PROJECT_NAME}\n[...]\n</code></pre> <p>Hint</p> <p>You can store your keys using a TPM.</p>"},{"location":"package-assets.html#apps","title":"Apps","text":"<p>1.2</p> <p>Contains configurations for specific rexroth apps</p> <p>Exmaple</p> <pre><code>  \"apps\": {\n    \"rexroth-remoteagent\": {\n    \"commands\": [\n        \"BACKUP\",\n        \"RESTORE\",\n        \"REBOOT\"\n      ]  \n    }\n  }\n</code></pre> <p>The definition of apps object</p> Field Description rexroth-remoteagent object, which references to rexroth-remoteagent rexroth-setup object, which references to rexroth-setup <p>The definition of rexroth-remoteagent object</p> Field Description commands array of string, remote device administration commands are used to execute commands on the device from the Nexeed Device Portal, example:  -  [\"BACKUP\",\"RESTORE\",\"REBOOT\"] <p>The definition of rexroth-setup </p> Field Description settings array of object setupSetting <p>The definition of setupSetting object </p> Field Description name string, name of the setting. Must be unique within the app's settings list. Serves as key in the ctrlx-setup.json file. Required for all types except 'snapshot'. Note that the name '$path' is reserved. description string, short localized description of the setting. url string, URL used to read (GET) and update (PUT) the setting. A URL starting with a slash is interpreted to be relative to https: //. Required for all types except 'snapshot'. type string, type of the setting. One of 'text', 'json', 'file', 'encryptedFile' and 'snapshot'. The default is 'text'. enum: \"text\",\"json\",\"file\",\"encryptedFile\",\"snapshot\""},{"location":"package-assets.html#dependencies","title":"Dependencies","text":"<p>1.3</p> <p>Dependencies required by the app providing the package manifest</p> <p>Example</p> <pre><code>\"dependencies\": {\n   \"dependsOn\": {\n     \"rexroth-deviceadmin\": \"~1.20.0\",\n     \"rexroth-automationcore\": \"~1.20.2\"\n   }\n}\n</code></pre> <p>The definition to dependencies object</p> Field Description dependsOn reference to dependencies <p>The definition of dependencies</p> Field Description &lt;name of app&gt;: &lt;version range&gt; definition of the version range using npmjs syntax, see npm SemVer Calculator for more details. <p>Possible notations for the version range</p> Notation Summary (Semantic Version) Description FallBack non-semantic version version Exact Version 1.2.3 requires exactly version 1.2.3 Exact Version match by string comparison \"20221023\"  == \"20221023\" &gt;version Newer Version &gt;1.2.3 requires version 1.2.4 or newer, e.g. 1.7.3 or 3.0.0, ... String based greater than, e.g. \"20221023\" &gt; \"20220701\" &lt;version Older Version &lt;2.2.3 requires version 2.2.2 or older, e.g. 2.1.3 or 1.0.0, ... String based greater than, e.g. \"20220701\" &lt; \"20221023\" &gt;=version At least Version or newer &gt;=1.2.3 requires version 1.2.3 or newer, e.g. 1.7.3 or 3.0.0, ... Exact or string based greater \"20221023\" &gt;= \"20220701\" &lt;=version Max Version or older &lt;=1.2.3 requires version 1.2.3 or older, e.g. 1.1.3 or 1.0.0, ... Exact or string based greater \"20221023\" &lt;= \"20221101\" ~version Same Major, Minor and newer Patch Will update you to all future patch versions, without incrementing the minor version. ~1.2.3 will allow releases from 1.2.3 to &lt;1.3.0. Not applicable ^version Same Major and newer Minor, Patch Will update you to all future minor/patch versions, without incrementing the major version. ^2.3.4 will use releases from 2.3.4 to &lt;3.0.0. Not applicable version version Multiple version notations Multiple version notations, e.g. to allow ranges. &gt;=1.20.0 &lt;3.0.0 will use releases from 1.20.0 to &lt;3.0.0 Not applicable <p>Currently the app dependencies are used to visualize the dependencies of an app during installation. There is no enforcement in place to forbid the installation of an app.</p>"},{"location":"package-assets.html#licenses","title":"Licenses","text":"<p>1.4</p> <p>The app shall provide information in the package-manifest about each license that is supported. Description and title shall be human readable. The \"required\" flag indicates whether a license is mandatory to use the application. Set the flag to true when the license is required and to false, when the license is optional. Multiple licenses can have the \"required\" flag set to true simultaneously. In this case, the app must ensure that it works if any of the 'required' licenses is available.</p> <p>Example</p> <pre><code>\"licenses\": [\n  {\n    \"name\": \"SWL-XC*-RUN-DLACCESSNRT**-NNNN\",\n    \"title\": \"ctrlX OS License - Customer App\",\n    \"description\": \"Integration of customer apps into ctrlX OS with access to the ctrlX Data Layer\",\n    \"required\": true\n  }\n],\n</code></pre> <p>The definition of licenses: </p> Field Description name string, identifier of the license title string, human readable title of the license description string, description of the license required boolean, indicates if an licenses is required to operate the application or unlocks optional functionalities i18n string, i18n tag, see language files and translation"},{"location":"package-assets.html#ui-extensions","title":"UI Extensions","text":"<p>1.4</p> <p>Contains ui extensions for the home screen. </p> <p>You can provide own widgets to be shown in the Home screen. These widgets need to be implemented as Web Components.</p> <p>In short, widgets are provided in a JavaScript file and define a custom HTML tag. This JavaScript file can be loaded into any web page and the widget is instantiated by just inserting its tag into an HTML file (just like standard tags like &lt;div&gt; or &lt;table&gt;). One JavaScript file can contain several Web Components. Your app must serve this JavaScript file, just like other assets, so that it can be addressed via a URL.</p> <p>For the Home screen to know about all the widgets, these need to be made publicly known in some way. This is done in the app's manifest in \"uiExtensions\" \u2192 \"dashboard\". Each element here defines one widget by providing the information needed to instantiate the widget (like the URL of the JavaScript file, where the widget is implemented, and the widget's tag name, size information) and metadata to display in the widget catalog. For a detailed description see the PackageManager-API, schema \"DashboardWidget\".</p> <p>Example</p> <pre><code>  \"uiExtensions\": {\n    \"dashboard\": [\n      {\n        \"order\": 10,\n        \"src\": \"/motion/widgets.js\",\n        \"tag\": \"rexroth-axes-widget\",\n        \"title\": \"Axes\",\n        \"description\": \"Shows the status of your axes\",\n        \"categories\": [\"Motion\"],\n        \"i18n\": \"dashboard.motion.axes\",\n        \"image\": \"/motion/assets/img/DC_AE_ctrlX_DRIVE-axes_Symbol_bl_192x192_202102.svg\",\n        \"initialSize\": {\n          \"rows\": 3,\n          \"cols\": 3\n        },\n        \"minSize\": {\n          \"rows\": 3,\n          \"cols\": 3\n        },\n        \"maxSize\": {\n          \"rows\": 3,\n          \"cols\": 3\n        }\n      }\n    ]\n  }\n</code></pre> <p>The definition of uiExtensions object</p> Field Description header array of uiExtensionHeaderItem dashboard array of uiExtensionDashboardItem, which references to dashboardWidgetExtension <p>The definition of uiExtensionHeaderItem object</p> Field Description order integer, order of the item in the header. Lower numbers are displayed first src string, the url of the web component's implementation file tag string, the tag name that creates a new instance of the web component <p>The definition of dashboardWidgetExtension object</p> Field Description order integer,order of the item in the header. Lower numbers are displayed first src string,the url of the web component's implementation file tag string,the tag name that creates a new instance of the web component title string,the widget's description as shown in the widget catalog icon string,the icon to be displayed in the widget catalog. icon library as a reference. image string,the path to the image to be displayed in the widget catalog initialSize reference to dashboardWidgetSize object minSize object, which references to dashboardWidgetSize object maxSize object, which references to dashboardWidgetSize object permissions array of string, list of permissions to view or interact with the widget, exmaple:  - [\"rexroth-deviceadmin.package-manager.r\",\"rexroth-deviceadmin.package-manager.rw\"] categories array of string, list of categories the widget is displayed, example:  - [\"System\",\"Other Category\"] i18n string, i18n tag, see language files and translation <p>The definition of dashboardWidgetSize object</p> Field Description cols number, number of columns in the dashboard grid rows number, number of rows in the dashboard grid"},{"location":"package-assets.html#example-package-manifestjson","title":"Example package-manifest.json","text":"Example <pre><code>  {\n    \"$schema\": \"https://json-schema.boschrexroth.com/ctrlx-automation/ctrlx-os/apps/package-manifest/package-manifest.v1.4.schema.json\",\n    \"version\": \"1.0.0\",\n    \"id\": \"ctrlx-helloworld\",\n    \"required\": false,\n    \"scopes-declaration\": [\n      {\n        \"identifier\": \"ctrlx-helloworld.web\",\n        \"name\": \"Helloworld Scopes\",\n        \"description\": \"Scopes for the Hello World App\",\n        \"scopes\": [\n          {\n            \"identifier\": \"ctrlx-helloworld.web.all.rw\",\n            \"name\": \"Manage hello world\",\n            \"description\": \"Manage and modify hello world\",\n            \"i18n\": \"scopes.manage\"\n          },\n          {\n            \"identifier\": \"ctrlx-helloworld.web.all.r\",\n            \"name\": \"View hello world\",\n            \"description\": \"View (but not modify) hello world\",\n            \"i18n\": \"scopes.view\"\n          }\n        ]\n      }\n    ],\n    \"services\": {\n      \"proxyMapping\": [\n        {\n          \"name\": \"ctrlx-helloworld.web\",\n          \"url\": \"/ctrlx-helloworld\",\n          \"binding\": \"unix://{$SNAP_DATA}/package-run/ctrlx-helloworld/ctrlx-helloworld.web.sock\",\n          \"caddyfile\": \"./caddyfile\",\n          \"options\": [\n            {\n              \"option\": \"websockets\",\n              \"value\": \"\"\n            },\n            {\n              \"option\": \"max_conns\",\n              \"value\": \"2\"\n            }\n          ],\n          \"restricted\": [\n            \"/ctrlx-helloworld/api/v1\",\n            {\n              \"path\": \"/my-app/api/v1.0\",\n              \"except\": [\n                \"/my-app/api/v1.0/except-path-1\",\n                \"/my-app/api/v1.0/except-path-2\"\n              ],\n              \"headersForwarding\": [\n                \"X-Auth-Name\",\n                \"X-Auth-ID\",\n                \"X-Auth-Scopes\",\n                \"X-Auth-Expires\",\n                \"X-Auth-Issued\",\n                \"X-Auth-PlcHandle\",\n                \"X-Auth-RemoteAuth\",\n                \"X-Auth-Nonce\"\n              ]\n            }\n          ]\n        }\n      ]\n    },\n    \"menus\": {\n      \"sidebar\": [\n        {\n          \"id\": \"helloworld\",\n          \"title\": \"Hello, World!\",\n          \"icon\": \"bosch-ic-world-frame\",\n          \"permissions\": [\n            \"ctrlx-helloworld.web.all.r\",\n            \"ctrlx-helloworld.web.all.rw\"\n          ],\n          \"items\": [\n            {\n              \"id\": \"helloworld-home\",\n              \"title\": \"Overview\",\n              \"link\": \"/ctrlx-helloworld\",\n              \"permissions\": [\n                \"ctrlx-helloworld.web.all.r\",\n                \"ctrlx-helloworld.web.all.rw\"\n              ],\n              \"items\": []\n            },\n            {\n              \"id\": \"helloworld-manage\",\n              \"title\": \"Manage\",\n              \"link\": \"/ctrlx-helloworld/manage\",\n              \"permissions\": [\"ctrlx-helloworld.web.all.rw\"],\n              \"items\": []\n            }\n          ]\n        }\n      ],\n      \"settings\": [\n        {\n          \"id\": \"helloworld-settings\",\n          \"title\": \"Hello World!\",\n          \"link\": \"/ctrlx-helloworld/settings\",\n          \"permissions\": [\"ctrlx-helloworld.web.all.rw\"],\n          \"items\": []\n        }\n      ],\n      \"overview\": [\n        {\n          \"id\": \"helloworld-home\",\n          \"title\": \"Overview\",\n          \"link\": \"/ctrlx-helloworld\",\n          \"icon\": \"bosch-ic-world-frame\",\n          \"permissions\": [\n            \"ctrlx-helloworld.web.all.r\",\n            \"ctrlx-helloworld.web.all.rw\"\n          ],\n          \"items\": []\n        }\n      ]\n    },\n    \"commands\": {\n      \"activeConfiguration\": {\n        \"save\": [\n          {\n            \"id\": \"ctrlx-helloworld\",\n            \"subject\": \"hello world\",\n            \"url\": \"/ctrlx-helloworld/api/v1/save\"\n          }\n        ],\n        \"load\": [\n          {\n            \"id\": \"ctrlx-helloworld\",\n            \"subject\": \"hello world\",\n            \"url\": \"/ctrlx-helloworld/api/v1/load\"\n          }\n        ]\n      }\n    },\n    \"documentation\": [\n      {\n        \"name\": \"My-App API\",\n        \"description\": \"Provides my-app related functionalities on ctrlX devices.\",\n        \"type\": \"api\",\n        \"url\": \"/my-app/doc/api\"\n      }\n    ],\n    \"configuration\": {\n      \"appDirectories\": [\n        {\n          \"name\": \"my-app\",\n          \"description\": \"My cool feature\",\n          \"icon\": \"my-icon\",\n          \"copyOnLoad\": true,\n          \"writeProtected\": true\n        }\n      ],\n      \"appPrivateFiles\": [\"^my-app/[^/]+\\\\.bak$\", \"^my-app/tmp\"]\n    },\n    \"certificatestores\": [\n      {\n        \"id\": \"ctrlx-helloworld.certificates\",\n        \"title\": \"Hello World Certificate Store\",\n        \"description\": \"Certficates &amp; Keys to connect to the World\"\n      }\n    ],\n    \"apps\": {\n      \"rexroth-remoteagent\": {\n        \"commands\": [\"BACKUP\", \"RESTORE\", \"REBOOT\"]\n      }\n    },\n    \"dependencies\": {\n      \"dependsOn\": {\n        \"rexroth-deviceadmin\": \"~1.20.0\"\n      }\n    },\n    \"licenses\": [\n      {\n        \"name\": \"SWL-XC*-RUN-DLACCESSNRT**-NNNN\",\n        \"title\": \"ctrlX OS License - Customer App\",\n        \"description\": \"Integration of customer apps into ctrlX OS with access to the ctrlX Data Layer\",\n        \"required\": true\n      }\n    ],\n    \"uiExtensions\": {\n      \"dashboard\": [\n        {\n          \"order\": 10,\n          \"src\": \"/myApp/widgets.js\",\n          \"tag\": \"rexroth-myapp-widget\",\n          \"title\": \"Hello World\",\n          \"description\": \"Say Hello to ctrlX OS World\",\n          \"categories\": [\"MyApp\"],\n          \"i18n\": \"dashboard.myapp.helloworld\",\n          \"image\": \"/myApp/assets/img/hello_world_192x192_202102.svg\",\n          \"initialSize\": {\n            \"rows\": 3,\n            \"cols\": 3\n          },\n          \"minSize\": {\n            \"rows\": 3,\n            \"cols\": 3\n          },\n          \"maxSize\": {\n            \"rows\": 3,\n            \"cols\": 3\n          }\n        }\n      ]\n    }\n  }\n</code></pre>"},{"location":"package-assets.html#the-language-files","title":"The language files","text":"<p>Language files are used to translate text sections into different languages. Bosch Rexroth Apps are shipped with english and german language files. Currently the multi language system (MLS) supports translations for the content of the package manifest texts which are organized in the <code>./package-assets/i18n</code> folder of the app.</p>"},{"location":"package-assets.html#translation-of-the-package-manifest","title":"Translation of the Package Manifest","text":"<p>One aspect of the MLS is the translation of the text fields provided by the package manifest, e.g. menu items, descriptions etc. To enable the app developer to provide translations for these fields a new property <code>i18n</code> was introduced. This property behaves as a tag for the parent object that requires translation for its childs. The value is defining the name of the tag in dot notation.</p> <p>Additionally you have to provide the language files for the package-manifest in the <code>./package-assets/i18n</code> folder.</p> <p>The package-manifest language file name should follow the pattern:</p> <pre><code> &lt;snap name&gt;.package-manifest.&lt;language tag&gt;.json\n</code></pre> <p>The snap name is the name of your app, configured by the snapcraft.yaml.</p> <p>In case of an app \"my-app\" that provides german translations, this would be <code>my-app.package-manifest.de.json</code>. It is recommended to provide a language file for english and german. The structure inside the language file must reflect the tags defined including the propery you would like to translate. You can either use dot, bracket or mixed notation in the file. Arrays are not supported.</p> <p>Example</p> myapp.package-manifest.json<pre><code>    \"menus\": {\n        \"sidebar\": [\n            {\n            \"id\": \"myapp\",\n            \"title\": \"My App\",\n            \"description\": \"A cool app that you should not miss\",\n            \"icon\": \"Bosch-Ic-home-outline\",\n            \"link\": \"/myapp/home\",\n            \"i18n\": \"sidebar.myapp\"\n            }\n        ],\n    },\n</code></pre> i18n/myapp.package-manifest.de.json (dot notation)<pre><code>{\n    \"sidebar.myapp.title\": \"Meine App\",\n    \"sidebar.myapp.description\": \"Eine coole App, die du nicht verpassen solltest\"\n}\n</code></pre> i18n/myapp.package-manifest.de.json (bracket notation)<pre><code>{\n    \"sidebar\": {\n        \"myapp\": {\n            \"title\": \"Meine App\",\n            \"description\": \"Eine coole App, die du nicht verpassen solltest\"\n        }\n    }\n}\n</code></pre> <p>Basically you can translate every aspect of the package-manifest this way.</p>"},{"location":"persist-device-settings.html","title":"Persisting Device Settings","text":""},{"location":"persist-device-settings.html#table-of-content","title":"Table of content","text":"<p>Introduction</p> <p>Using REST API endpoints</p> <p>Using Ubuntu\u2019s snapshot mechanism</p>"},{"location":"persist-device-settings.html#introduction","title":"Introduction","text":"<p>Apps can integrate into the ctrlX Setup functionality so that their device-specific app settings are saved or restored when a backup is created or restored. There are two ways of integration:</p> Using REST API endpoints Using Ubuntu\u2019s snapshot mechanism Fine-grained control with respect to the settings format and content Limited control with respect to the settings format and content App settings can be saved or restored in any system state The app will be disabled before taking or restoring its snapshot, which requires the system to be in SERVICE state Secrets can be stored as encrypted files Snapshot contents are stored unencrypted so that they must not include secrets Unchanged settings are skipped on restore Snapshot contents are always completely restored Requires a web server and the implementation of API endpoints Minimal implementation effort"},{"location":"persist-device-settings.html#using-rest-api-endpoints","title":"Using REST API endpoints","text":"<p>For using this integration approach, an app must provide REST API endpoints that allow to access its settings. Settings of apps that are not accessible through settings endpoints will not be included in a backup.</p>"},{"location":"persist-device-settings.html#register-app-settings","title":"Register app settings","text":"<p>An app declares the settings to be included into a backup in the \"apps\"/\"rexroth-setup\" section of its package manifest.</p> <p>Each setting consists of a setting name, a description, a URL used to read and update the settings value, and a value type:</p> <ul> <li>name (required): Name of the setting. Must be unique within the app\u2019s settings list.   Serves as key in the ctrlx-backup.json file. Note that the name \"$path\" is reserved.</li> <li>description: Short localized description of the setting.</li> <li>url (required): URL used to read (GET) and update (PUT) the setting. A URL starting   with a slash is interpreted to be relative to <code>https://localhost</code>.</li> <li>type: One of</li> <li>\"text\" (default): The value is saved as a quoted string.</li> <li>\"json\": The value is saved in JSON object format (see \"Merge operation for JSON-formatted settings\").</li> <li>\"file\": The value is persisted as a file.</li> <li>\"encryptedFile\": The value is persisted as an encrypted file if the backup is created with a password.</li> </ul> <p>package-manifest.json:</p> <pre><code>{\n  \"apps\": {\n    \"rexroth-setup\": {\n      \"settings\": [\n        {\n          \"name\": \"foo\",\n          \"description\": \"Description of foo\",\n          \"url\": \"/myapp/settings/foo\",\n          \"type\": \"text\"\n        },\n        {\n          \"name\": \"bar\",\n          \"description\": \"Description of bar\",\n          \"url\": \"/myapp/settings/bar\",\n          \"type\": \"json\"\n        },\n        {\n          \"name\": \"baz\",\n          \"description\": \"Description of baz\",\n          \"url\": \"/myapp/settings/baz\",\n          \"type\": \"file\"\n        },\n        {\n          \"name\": \"secret\",\n          \"description\": \"Description of secret\",\n          \"url\": \"/myapp/settings/secret\",\n          \"type\": \"encryptedFile\"\n        }\n      ]\n    }\n  }\n}\n</code></pre> <p>The Setup app calls the URLs with GET or PUT to read or update the settings when a backup is created or restored.</p> <p>Creating a backup with the above setting declarations might, e.g., result in the following <code>ctrlx-backup.json</code> output. The respective files (<code>baz.bin</code>, <code>secret.bin.aes</code>) would be included in the enclosing <code>ctrlx-backup.zip</code> archive.</p> <p>ctrlx-backup.json:</p> <pre><code>{\n  \"apps\": {\n    \"myApp\" : {\n      \"settings\": {\n        \"foo\": \"some value\",\n        \"bar\": {\n          \"enabled\": true,\n          \"title\": \"my title\"\n        },\n        \"baz\": {\n          \"$path\":\"apps/myApp/settings/baz.bin\"\n        },\n        \"secret\": {\n          \"$path\":\"apps/myApp/settings/secret.bin.aes\"\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"persist-device-settings.html#implement-settings-endpoints","title":"Implement settings endpoints","text":"<p>Apps must consider the following conditions and constraints in their implementations:</p> <ul> <li>App settings are applied after apps have been updated and device admin settings (users, scopes, licenses, ...) have been applied.</li> <li>The order in which requests are sent to read or update the settings is undefined.</li> <li>Persisted settings must be usable with newer versions of the app. A newer app version may introduce new settings and properties which must be tolerated (ignored) by older app versions. Incompatible changes (e.g. changing the meaning of enum values) between app versions must be avoided.</li> <li>Apps using the settings type \"json\" must implement the special semantics described in the following section.</li> </ul>"},{"location":"persist-device-settings.html#merging-json-formatted-settings","title":"Merging JSON-formatted settings","text":"<p>The restore operation allows fine-grained modifications by merging the backup content with the current state of the device. This way, new properties may be added to JSON objects (new users may, e.g., be added to the existing ones on the device). Conversely, properties can be removed by setting their values to <code>null</code>.</p> <p>Apps can use the merge feature by providing their property settings with type \"json\" and by implementing the following behavior:</p> Use case Example Description A non-existing property in the JSON structure will leave existing properties on the device untouched. <code>\"users\": {}</code> Does not change users on the device The value of a property in the JSON structure will update the corresponding property value on the device. <code>\"users\": {\"john\": {\"passwordHash\": \"...\"}}</code> Updates the passwordHash of user \"john\" A new property in the JSON structure will be added on the device. <code>\"users\": {\"jane\": {\"passwordHash\": \"...\"}}</code> Adds new user \"jane\" A property with a <code>null</code> value in the JSON structure will remove the corresponding property on the device. <code>\"users\": {\"john\": null}</code> Deletes user \"john\""},{"location":"persist-device-settings.html#success-behavior","title":"Success behavior","text":"<ul> <li>GET: Apps must respond with status code 200 if the request has succeeded. The response body must contain the setting value in the following format:</li> <li>\"text\" =&gt; text/plain</li> <li>\"json\" =&gt; application/json</li> <li>\"file\"/\"encryptedFile\" =&gt; application/octet-stream</li> <li>PUT: Apps must apply the setting value contained in the request body and respond with status code 204 and an empty response body if the request has succeeded.</li> </ul>"},{"location":"persist-device-settings.html#failure-behavior","title":"Failure behavior","text":"<ul> <li>Apps must respond with an error status code (4xx or 5xx) if a GET or PUT request has failed.</li> <li>The response body must contain a JSON object describing the problem by providing an appropriate status code and title (cf. example and schema below).</li> <li>The Setup app reports the problem response of a failed request as an error in the Logbook and via Web UI. Processing is continued with the next setting.</li> </ul>"},{"location":"persist-device-settings.html#problem-response-body-example","title":"Problem response body (example)","text":"<pre><code>{\n  \"status\": 400,\n  \"title\": \"Cannot parse value.\"\n}\n</code></pre>"},{"location":"persist-device-settings.html#problem-schema","title":"Problem schema","text":"<pre><code>Problem:\n  type: object\n  x-version: '1.0.0'\n  description: |\n    This document defines a \"problem detail\" as a way\n    to carry machine-readable details of errors in a\n    HTTP response to avoid the need to define new error\n    response formats for HTTP APIs.\n  required:\n    - type\n    - title\n  properties:\n    type:\n      type: string\n      format: uri\n      description: |\n        A URI reference [RFC3986] that identifies the problem type.\n        This specification encourages that, when de-referenced,\n        it provide human-readable documentation for the problem type\n        (e.g., using HTML [W3C.REC-html5-20141028]). When this member\n        is not present, its value is assumed to be \"about:blank\".\n      default: 'about:blank'\n      example: 'https://example.com/probs/out-of-credit'\n    title:\n      type: string\n      description: |\n        A short, human-readable summary of the problem type.\n        It SHOULD NOT change from occurrence to occurrence of the problem,\n        except for purposes of localization (e.g., using proactive content\n        negotiation; see [RFC7231], Section 3.4).\n        If the response is a diagnostics message, it contains\n        the text associated with the mainDiagnosisCode.\n      example: You do not have enough credit.\n    status:\n      type: integer\n      format: int32\n      description: |\n        The HTTP status code ([RFC7231], Section 6) generated by the\n        origin server for this occurrence of the problem.\n      example: 403\n    detail:\n      type: string\n      description: |\n        A human-readable explanation specific to this occurrence of the problem.\n        If the response is a diagnostics message, it contains the text associated with\n        the detailedDiagnosisCode.\n      example: Your current balance is 30, but that costs 50.\n    instance:\n      type: string\n      description: |\n        A URI reference that identifies the specific occurrence of the problem.\n        It may or may not yield further information if de-referenced.\n      example: /account/12345/msgs/abc\n    code:\n      type: string\n      deprecated: true\n      description: |\n        An error code issued by the system that caused the original problem.\n        This code can be used to track down the root cause of the error.\n      example: F360001\n    mainDiagnosisCode:\n      type: string\n      description: |\n        The main diagnosis code is issued by the system that caused the problem.\n        This code can be used to track down the root cause and source of the error.\n        It can be used to search in the documentation for a solution.\n        It SHOULD NOT change from occurrence to occurrence of the same problem.\n      example: 080F0100\n    detailedDiagnosisCode:\n      type: string\n      description: |\n        The detailed diagnosis code issued by the system that caused the problem.\n        This code can be used to track down the detailed cause and source of the error.\n        It can be used to search in the documentation for a solution.\n        The detailed diagnosis code gives additional information about the cause of the error.\n        It SHOULD NOT change from occurrence to occurrence of the same problem.\n      example: '00666001'\n    dynamicDescription:\n      type: string\n      description: |\n        A dynamic description gives detailed information about the occurrence of a problem.\n        It can change between different occurrences of the same error.\n      example: value = -4.5\n    severity:\n      type: string\n      description: 'Severity of a problem as defined RFC5424 of the Syslog standard, see https://tools.ietf.org/html/rfc5424'\n      example: Error\n      enum:\n        - Emergency\n        - Alert\n        - Critical\n        - Error\n        - Warning\n        - Notice\n        - Informational\n        - Debug\n    links:\n      type: array\n      description: |\n        Collection of links to fix the problem. E.g. links to online user manual,\n        to an online community (using tags) or a developer chat (e.g. Slack).\n      items:\n        type: string\n        format: uri\n        example: https://stackoverflow.com/questions/tagged/boschrexroth+controlx+f360001\n    moreInfo:\n      type: object\n      description: |\n        The moreInfo field allows you to add additional information that might be necessary to debug or trace down the cause of an error.\n        It might also contain information what is needed to resolve the problem.\n        There are loosely specified fields for specific problems that can be used in these situations, e.g.:\n        - On a 403 Forbidden error: The moreInfo can contain a field \"requiredPermissions\" with the required permissions seperated by comma\n        - On a 402 Payment required: The moreInfo can contain a field \"requiredLicenses\" with the required licenses seperated by comma\n      additionalProperties: true\n      example:\n        trace: ExampleClass.cpp#452 Null pointer exception\n        class: ExampleClass\n    cause:\n      type: array\n      description: |\n        Sometimes a problem might be caused by problems that occur in other components or are the root cause of a problem. In this\n        case the related problems can be added as a cause. Since it might be possible that multiple components have problems on a single\n        action, cause is an array. E.g. Loading failed because several components where not able to load the configuration.\n      items:\n        $ref: \"#/Problem\"\n</code></pre>"},{"location":"persist-device-settings.html#using-ubuntus-snapshot-mechanism","title":"Using Ubuntu\u2019s snapshot mechanism","text":"<p>An app may use Ubuntu\u2019s snapshot mechanism to save and restore its settings, cf. https://snapcraft.io/docs/snapshots. While this minimizes the implementation effort, the following issues should be considered:</p> <ul> <li>A snapshot typically contains much more files than should be part of the apps settings, e.g. log files, cached files, etc.  In order to keep backup file sizes manageable, apps should exclude irrelevant content from their snapshots if possible (cf. https://forum.snapcraft.io/t/excluding-data-from-snapshots/33643).</li> <li>Secrets are saved unencrypted in the snapshot and the backup file, respectively.</li> <li>Taking a snapshot fails if a file is locked or modified while taking the snapshot. Therefore, the Setup app disables apps before taking a snapshot, which requires that the system is in SERVICE state. Apps must be prepared to consistently save their state on \"disable\" events. When the snapshot has been taken, the Setup app enables the app again.</li> <li>Before restoring a snapshot, the Setup app disables the app. After the snapshot has been restored, the Setup app enables the app so that the app can initialize itself with the restored data. As the Setup app cannot find out if a snapshot contains changed settings, snapshots are always completely restored.</li> </ul> <p>The following entry in an app\u2019s package manifest enables the use of Ubuntu\u2019s snapshot mechanism for saving and restoring its settings:</p> <p>package-manifest.json:</p> <pre><code>{\n  \"apps\": {\n    \"rexroth-setup\": {\n      \"settings\": [\n        {\n          \"type\": \"snapshot\"\n        }\n      ]\n    }\n  }\n}\n</code></pre> <p>Creating a backup with the above settings declaration would result in the following <code>ctrlx-backup.json</code> output. The respective snapshot file (<code>app.snapshot</code>) would be included in the enclosing <code>ctrlx-backup.zip</code> archive.</p> <p>ctrlx-backup.json:</p> <pre><code>{\n  \"apps\": {\n    \"myApp\" : {\n      \"settings\": {\n        \"$path\": \"apps/myApp/settings/app.snapshot\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"persistdata.html","title":"Persisting Configurations","text":"<p>Copyright \u00a9 Bosch Rexroth AG 2024 This document, as well as the data, specifications and other information set forth in it, are the exclusive property of Bosch Rexroth AG. It may not be reproduced or given to third parties without our consent.</p> <p>Liability The information in this document is intended for product description purposes only and shall not be deemed to be a guaranteed characteristic, unless expressly stipulated by contract. All rights are reserved with respect to the content of this documentation and the availability of the product.</p>"},{"location":"persistdata.html#table-of-content","title":"Table of content","text":"<p>1 Introduction</p> <p>2 Get access to the Solutions storage</p> <p>3 Specify your app directories</p> <p>4 Register for saving and loading</p> <p>5 Implement saving and loading</p> <p>Appendix</p>"},{"location":"persistdata.html#1-introduction","title":"1 Introduction","text":"<p>This document shows how to integrate an app into the common ctrlX persistence and storage mechanisms. Persistence handling is done by the Solutions app (app.solutions), which is an essential part of any ctrlX CORE device. It provides a central storage for other apps that need to persist their app data. App data is saved to the storage or loaded from the storage on demand (via app editors, the \"Manage app data\" UI, or the Solutions REST API).</p> <p></p> <p>The diagram shows that the storage provided by the Solutions app is structured into two conceptual locations:</p> <ul> <li>The appdata location contains the files representing the current state of the apps and is owned by the apps.</li> <li>The archive contains saved configurations and is managed by the Solutions app.</li> </ul> <p>The responsibilities of the Solutions app and Apps that persist their data in the Solutions storage are allocated as follows:</p> <p>Solutions (app.solutions):</p> <ul> <li>Provide file storage and make appdata directory available via the activeConfiguration symlink</li> <li>Trigger and coordinate \"save\" and \"load\" operations and collect results</li> <li>Manage the archived configurations (Web UI, REST API)</li> </ul> <p>Apps:</p> <ul> <li>Participate in loading and saving</li> <li>Use and update the files in their appdata directories</li> <li>Must not change the contents of archived configurations</li> </ul>"},{"location":"persistdata.html#2-get-access-to-the-solutions-storage","title":"2 Get access to the Solutions storage","text":"<p>The Solutions app exports the base directory of the storage location as a slot using a content interface. Your app must provide a plug that connects to the slot so that the $SNAP_COMMON/solutions directory becomes visible in your file system:</p> <p>snapcraft.yaml:</p> <pre><code>plugs:\n  active-solution:\n    interface: content\n    content: solutions\n    target: $SNAP_COMMON/solutions\n</code></pre> <p>The <code>$SNAP_COMMON/solution</code> directory contains an <code>activeConfiguration</code> symlink. Use this symlink to get the path to the appdata directory which contains the currently active app data: <code>$SNAP_COMMON/solutions/activeConfiguration</code> \u2192 <code>$SNAP_COMMON/solutions/DefaultSolution/configurations/appdata/</code></p> <p>Note:</p> <p>Your app might start before the active-solution interface is connected by the system. You can handle this scenario in two ways:</p> <ul> <li>Use an entry-point script and check status of the active-solution interface using snapctl is-connected active-solution; e.g. create a script which has the following content and is defined in your snapcraft.yaml as the command to execute:</li> </ul> <pre><code>  #!/bin/bash\n\n    while ! snapctl is-connected active-solution\n    do\n        sleep 5\n    done\n\n    $SNAP/bin/&lt;your executable&gt;\n</code></pre> <ul> <li>Check existence of the folder <code>$SNAP_COMMON/solutions/activeConfiguration</code> in your application logic</li> </ul> <p>In a development environment, you can check the connection of the active-solution interface by</p> <ul> <li>calling snap connections and checking whether there is an entry with interface content[solutions] for the plug \\&lt;your app name&gt;:active-solution and slot rexroth-solutions:active-solution</li> <li>running a shell in the context of your app and checking the content of the folder <code>$SNAP_COMMON/solutions</code> which must contain a folder DefaultSolution and the two symlinks activeSolution and activeConfiguration. The shell can be started with snap run --shell \\&lt;your app name&gt;.\\&lt;your app command&gt;</li> </ul>"},{"location":"persistdata.html#3-specify-your-app-directories","title":"3 Specify your app directories","text":"<p>Within the appdata root directory, define a subdirectory with a unique name as your base directory. We recommend to use your app's name in lowercase letters to avoid conflicts with other apps and allow users to easily identify your data in the file system. The screenshot shows an example with the base directories of the Motion and PLC apps, among others.</p> <p></p> <p>You should also explicitly declare ownership of your app directories in your package manifest. The following example shows the declaration of the PLC base directory.</p> <p>package-manifest.json:</p> <pre><code>\"configuration\": {\n  \"appDirectories\": [\n    {\n      \"name\": \"plc\",\n      \"description\": \"PLC\",\n      \"icon\": \"bosch-ic-components\",\n      \"copyOnLoad\": true\n    }\n  ]\n}\n</code></pre> <ul> <li> <p>name (required): The name or path of the app directory</p> </li> <li> <p>description: The title to display in the \"Manage app data\" content view (should be consistent with title used e.g. in sidebar menu); if omitted or empty, the app directory does not appear in the content view</p> </li> <li> <p>icon: The app icon to display in the \"Manage app data\" content view (should be consistent with icon used e.g. in sidebar menu); if omitted or empty, no icon is displayed in the content view</p> </li> <li> <p>copyOnLoad (default: false): Set true to instruct the Solutions app to copy the data from your app directory in the archive to the active configuration on load; omit (or set false) to enable custom \"smart loading\"; see section \"From copying to smart loading\" for details</p> </li> </ul> <p>Since XCR-V-0120, app directories with active copyOnLoad are only copied if the corresponding app is installed and enabled on loading.</p> <ul> <li>writeProtected (default: true): App directories and their contents in the active configuration are protected against changes through the WebDAV interface and the Solutions UI by default. Set false to allow changes for a directory and its subdirectories, which requires that your app can detect and handle potential changes appropriately. Since XCR-V-0112.</li> </ul> <p>Since XCR-V-0120, the default value of the writeProtected attribute is true in order to protect app directories against unintended changes.</p> <p>Configuration contents should generally have the following properties:</p> <ul> <li>Compatible: Changes to content formats should not break existing applications (new format definitions accept old contents).</li> <li>Human-readable: Formats should be human-readable and therefore be text-based (which also allows comparisons between different versions). Names and values should be descriptive and understandable, e.g. by using well-known domain vocabulary.</li> <li>Extendable: Device and engineering functionality will enhance from version to version. You should make sure that your file formats are extendible to cope with new use cases.</li> </ul> <p>We recommend JSON as the file format where possible, as it supports these properties. You may also consider to provide corresponding JSON-schema files to enable guidance and validation. In any case, JSON files should contain a root object (NOT an array) to enable schema references and extendibility.</p> <p>Note</p> <p>An app may specify \"private files\" inside its appdata directories in order to exclude them from save and load operations. See appendix \"App-private files\" for details.</p>"},{"location":"persistdata.html#4-register-for-saving-and-loading","title":"4 Register for saving and loading","text":"<p>In order to participate in the save and load operations triggered by the Solutions app, your app must register its own save and load commands. The following example shows how to register a save and a load command for Motion settings by adding the respective command declarations to the package manifest:</p> <p>package-manifest.json:</p> <pre><code>\"commands\": {\n  \"activeConfiguration\": {\n    \"save\": [\n      {\n        \"id\": \"motion\",\n        \"subject\": \"motion settings\",\n        \"url\": \"/automation/api/v1/motion/admin/cfg/save\"\n      }\n    ],\n    \"load\": [\n      {\n        \"id\": \"motion\",\n        \"subject\": \"motion settings\",\n        \"url\": \"/automation/api/v1/motion/admin/cfg/load\"\n      }\n    ],\n  }\n}\n</code></pre> <p>For each command, the following elements must be specified:</p> <ul> <li>id (required): a string serving as the identifier of the save or load command; must be unique within the \u201ccommands/activeConfiguration/save\u201d and \u201ccommands/activeConfiguration/load\u201d paths, respectively</li> <li>subject (required): a string denoting what will be saved or loaded; used to inform users, e.g. in messages like \u201cLoading motion settings\u201d or \u201cFailed to load motion settings\u201d</li> <li>url (required): a string representing the request URL; URLs starting with a slash are interpreted to be relative to <code>https://localhost</code>. The URL is used for HTTP POST requests which include command parameters in the request body (see section \"Request parameters\" for details)</li> </ul> <p>By default there is no defined order of command execution. Starting with version XCR-V-0112, a command may declare that it needs to be executed after other commands. If this is required (which should be the exception), add an after element to your command declaration with an array containing the IDs of the predecessor commands.</p> <p>Hint for developers providing ctrlX Data Layer endpoints for loading and saving</p> <p>In order to make the ctrlX Data Layer endpoints for saving and loading a configuration consistent, the respective URLs should adhere to the following pattern:</p> <p>\\&lt;datalayer-basepath&gt;/\\&lt;technology&gt;/admin/cfg/\\&lt;operation&gt;</p> <p>Examples:</p> <ul> <li>/automation/api/v1/scheduler/admin/cfg/save(or load)</li> <li>/automation/api/v1/fieldbuses/ethercat/master/admin/cfg/save (or load)</li> <li>/automation/api/v1/motion/admin/cfg/save (or load)</li> </ul>"},{"location":"persistdata.html#5-implement-saving-and-loading","title":"5 Implement saving and loading","text":"<p>With the term \"participants\" we refer to apps that have registered save and load commands in order to participate in save and load operations as described in the previous section.</p>"},{"location":"persistdata.html#processing-sequences","title":"Processing sequences","text":"<p>Save and load operations triggered by the Solutions app are processed in phases. In each phase, the Solutions app sends requests to all registered participants sequentially in undefined order; that is, participants must not depend on each other.</p> <p>A save operation is processed in one phase:</p> <ol> <li>save: Save current app state into active configuration (appdata directory)</li> </ol> <p>A load operation is processed in five phases:</p> <ol> <li>query: Check if loading is possible in the current system state</li> <li>prepare: Perform any required preparatory steps</li> <li>load: Load archived configuration into the apps, and persist resulting app state to the active configuration (appdata directory)</li> <li>validate: Perform any required post-processing steps</li> <li>activate (if phases 1-4 have been finished without problems): Establish desired run state of the device; abort (otherwise): Do not change run state of the device</li> </ol> <p>If the query phase (1) has been completed without any error or problem response, the processing continues with the following phases (2-5) in the specified order. Otherwise, the load operation is canceled and the errors and problems are reported to the user.</p> <p>Any errors or problems that occur during phases 2-5 are collected and reported to the user when the whole operation is completed.</p> <p>A more detailed description of the load phases and example sequences can be found in the Appendix.</p> <p>Note: Starting with XCR-V-0120, a save operation is triggered when a load operation is completed. This ensures that the content of the active configuration (appdata directory) is consistent with the data that is active in the apps.</p> <p>The save requests of this special save operation have the same id as the preceding load requests. Participants may ignore those save requests if they update their app data on loading.</p>"},{"location":"persistdata.html#request-parameters","title":"Request parameters","text":"<p>The following information is sent as request parameters to all participants in all save and load phases:</p> <ul> <li>configurationPath: the directory of the configuration to be loaded, starting from the solutions directory, e.g. \"solutions/DefaultSolution/configurations/<code>&lt;configuration&gt;</code>\"; in case of a save operation, the configuration path should be ignored, as the target of saving is always the active configuration (appdata directory)</li> <li>id: a random code which identifies the instance of save or load operation, e.g. \"282xy5\"; also used to find corresponding messages in the Logbook; should be included in the dynamic description of diagnostic messages and trace messages by all participants; convention: put in square brackets at the end of diagnostic messages and trace messages; see section \"Diagnostic messages\" for details</li> <li>phase: specifies the current processing phase of a save or load operation; one of the phases described in section \"Processing sequences\"; e.g., \"load\"</li> </ul> <p>The request parameters are provided in the request body as a JSON object with the following structure (using the sample values from above):</p> <pre><code>{\n    \"configurationPath\": \"solutions/DefaultSolution/configurations/&lt;configuration&gt;\",\n    \"id\": \"282xy5\",\n    \"phase\": \"load\"\n}\n</code></pre>"},{"location":"persistdata.html#expected-behavior","title":"Expected behavior","text":"<p>Participants must consider the following conditions and constraints in their command implementations.</p> <p>Asynchronous command implementations (since XCR-V-0304)</p> <p>Long-running operations (more than one minute) have to be implemented as asynchronous commands.</p> <p>Asynchronous command implementations must respond with a status code 201 and a Location header containing a resource path. The Solutions app then uses the resource path to poll the state of the command execution. The response body is expected to be a JSON object with the following content: <code>json {   \"state\": \"running\", // one of \"pending\", \"running\", \"done\", or \"failed\"   \"result\": {} // optional; must contain problem object if state \"failed\" }</code></p>"},{"location":"persistdata.html#success-behavior","title":"Success behavior","text":"<ul> <li> <p>Synchronous implementations of save or load commands must respond with a success status code (2xx or 3xx), typically with 204 and an empty body.</p> </li> <li> <p>Asynchronous implementations of save or load commands must respond as specified above with the state \"done\" after completion.</p> </li> <li> <p>If there is no data to load, the command must reset its app to its initial state (no axes defined, no PLC program available, etc.). Related app data must completely be removed from the active configuration.</p> </li> <li> <p>If a phase is not relevant or unknown to the command, the command must respond with the status code 204 (and an empty body).</p> </li> </ul>"},{"location":"persistdata.html#failure-behavior","title":"Failure behavior","text":"<ul> <li> <p>Synchronous implementations of save or load commands must respond with an error status code (4xx or 5xx). The response body must contain a JSON object describing the occurred problem (see \"Problem Schema Definition\" in the Appendix for the required format).</p> </li> <li> <p>Asynchronous implementations of save or load commands must respond as specified above with the state \"failed\" and a result describing the occurred problem (see \"Problem Schema Definition\" in the Appendix for the required format).</p> </li> <li> <p>The Solutions frontend reports the following fields of the problem response for every failed save or load command:</p> </li> <li>mainDiagnosisCode and title</li> <li>detailedDiagnosisCode and detail</li> <li>dynamicDescription incl. the id of the save or load operation (see example below)</li> </ul> <p>The dynamicDescription field can provide specific information for the user, like the cause of the failure and hints how to resolve it (if cause and hint are not already provided through the main and detailed diagnosis). The field may contain \u201c\\n\u201c to separate cause and hint in the result output of the UI, e.g. \u201cFormat error in X.json.\\nAdapt file or use motion editor to fix/recreate axis. [282xy5]\u201d</p> <p>Common response if apps require Setup state for loading (since XCR-V-0116)</p> <p>If participants require Setup state for loading, they should in the query phase</p> <ul> <li>Respond with status code 409 (Conflict)</li> <li>Return a Problem object with the common mainDiagnosisCode 080F0E00 (\"Loading configuration not possible in current state\")</li> <li>Not write diagnoses to the Logbook</li> </ul>"},{"location":"persistdata.html#diagnostic-messages","title":"Diagnostic messages","text":"<p>The Solutions app only logs a general diagnostic message on start and finish of a save and load operation. Each participant should additionally log its own activities and occurred problems into the device\u2019s Logbook. Any diagnostic message or trace message related to saving or loading should include the current id at the end of the dynamic description in square brackets.</p> <p>Example of diagnostic entries as they would appear in the Logbook:</p> Level Date Unit Code Description Info 06/04/2020, 10:33:11.964 web.solutions 080A0401 Loading configuration successfully finished [282xy5] ... ... ... ... ... ... ... ... \\&lt;main diag code&gt;\\&lt;detailed diag code&gt; \\&lt;main diag text&gt;\\&lt;detailed diag text&gt;\\&lt;dynamic description text&gt; [282xy5]\\&lt;entity text&gt; Info 06/04/2020, 10:31:20.733 web.automation \\&lt;main diag code&gt; Trace message\\&lt;component name&gt;Scheduler successfully prepared for loading [282xy5] Info 06/04/2020, 10:31:19.820 web.solutions 080A0400 Loading configuration started [282xy5] <p>Note: The id of a save or load operation can also be found on and copied from the \"Manage app data\" page (Save or Load report) in order to search for corresponding messages in the Logbook. The diagnostic numbers may be used to find the beginning and end of the respective operation in the Logbook, e.g. \"080A0400\" denoting \"Loading configuration started\".</p>"},{"location":"persistdata.html#robustness","title":"Robustness","text":"<p>Command implementations must be robust with respect to the following conditions:</p> <ul> <li>The order in which requests are sent to the participants within a phase is undefined.</li> <li>Any command that is executed before or after a specific other command may fail.</li> <li>Invalid data or problems in general must not break the application, but should result in a user-friendly problem response or diagnostic message.</li> <li>The set of save and load phases may be extended. Participants must therefore respond to unknown phases with status code 204.</li> <li>New parameters may be added to the command request body to enable advanced use cases.</li> </ul>"},{"location":"persistdata.html#invariants","title":"Invariants","text":"<p>The coordinator (Solutions app) ensures the following properties:</p> <ul> <li>The activeConfiguration symlink is available and points to the directory containing the currently active appdata.</li> <li>Only a single save or load operation is processed at a time.</li> <li>The sequence of calls which are made to perform a save or load operation adheres to the specification (cf. Appendix).</li> <li>When a participant does not respond to a request, the request is canceled and reported as problem. Processing continues.</li> <li>Problems are collected and reported to the user, start and end messages for save and load operations are written to the Logbook.</li> </ul>"},{"location":"persistdata.html#from-copying-to-smart-loading","title":"From copying to smart loading","text":"<p>Apps must update their appdata subdirectory contents during the load operation to reflect the data which has been loaded and is now active in the apps.</p> <p>A first basic implementation may be to just copy the directory contents from the \"configuration to load\" to the corresponding appdata subdirectory. The Solutions app provides a default implementation of this file copy functionality. To activate this functionality, use the copyOnLoad option in your app directory declarations (cf. section \"Specify your app directories\").</p> <p>The following example shows how a set of copyOnLoad declarations would be applied for a given configuration:</p> <p>Example app directory declarations (pseudo code):</p> <pre><code>    a/b: copyOnLoad=false\n    a/b/c: copyOnLoad=true\n    a/b/c/h: copyOnLoad=false\n</code></pre> <p>Directories in the configuration to load:</p> <pre><code>    a\n    a/b\n    a/b/c/d\n    a/b/c/h\n    a/b/e/f\n    a/g\n</code></pre> <p>Result showing which directories would be copied (and why):</p> <pre><code>    a: true (default, as not declared)\n    b: false (declared)\n    c: true (declared)\n    d: true (inherited from c)\n    h: false (declared)\n    e: false (inherited from b)\n    f: false (inherited from e)\n    g: true (inherited from a)\n</code></pre> <p>However, an app might improve the load functionality by evaluating the changes to be applied during load. The app may determine that state changes (e.g., stopping the PLC for loading) are actually not required depending on the kind of data to load. Some participants may even be able to skip a load operation completely if their part of the configuration has not changed.</p> <p>If you want to take control and be able to evaluate differences between the configuration files and the appdata files,</p> <ul> <li>declare your base directory or specific subdirectories you would like to handle yourself in the package manifest</li> <li>omit the copyOnLoad option (or set copyOnLoad to false)</li> </ul> <p>Note: For compatibility reasons with previous ctrlX CORE releases, copyOnLoad is executed before the \"prepare\" phase. If you do not use copyOnLoad, you should persist your app data in the \"load\" phase as specified; see the \"Annotated load process\" in the Appendix for details</p>"},{"location":"persistdata.html#appendix","title":"Appendix","text":""},{"location":"persistdata.html#annotated-load-process","title":"Annotated load process","text":""},{"location":"persistdata.html#example-loading-sequences","title":"Example loading sequences","text":""},{"location":"persistdata.html#cancelled","title":"Cancelled","text":""},{"location":"persistdata.html#succeeded","title":"Succeeded","text":""},{"location":"persistdata.html#failed","title":"Failed","text":""},{"location":"persistdata.html#problem-schema-definition","title":"Problem schema definition","text":"<p>Failure responses to command requests must adhere to the following schema:</p>"},{"location":"persistdata.html#problemyaml","title":"Problem.yaml","text":"<pre><code>Problem:\n  type: object\n  x-version: '1.0.0'\n  description: &gt;\n    This document defines a \"problem detail\" as a way\n    to carry machine-readable details of errors in a\n    HTTP response to avoid the need to define new error\n    response formats for HTTP APIs.\n  required:\n    - type\n    - title\n  properties:\n    type:\n      type: string\n      format: uri\n      description: |\n        A URI reference [RFC3986] that identifies the problem type.\n        This specification encourages that, when dereferenced,\n        it provide human-readable documentation for the problem type\n        (e.g., using HTML [W3C.REC-html5-20141028]). When this member\n        is not present, its value is assumed to be \"about:blank\".\n      default: 'about:blank'\n      example: 'https://example.com/probs/out-of-credit'\n    title:\n      type: string\n      description: |\n        A short, human-readable summary of the problem type.\n        It SHOULD NOT change from occurrence to occurrence of the problem,\n        except for purposes of localization (e.g., using proactive content\n        negotiation; see [RFC7231], Section 3.4).\n      example: You do not have enough credit.\n    status:\n      type: integer\n      format: int32\n      description: |\n        The HTTP status code ([RFC7231], Section 6) generated by the\n        origin server for this occurrence of the problem.\n      example: 403\n    detail:\n      type: string\n      description: |\n        A human-readable explanation specific to this occurrence of the problem.\n      example: Your current balance is 30, but that costs 50.\n    instance:\n      type: string\n      description: |\n        A URI reference that identifies the specific occurrence of the problem.\n        It may or may not yield further information if dereferenced.\n      example: /account/12345/msgs/abc\n    code:\n      type: string\n      deprecated: true\n      description: |\n        An error code issued by the system that caused the original problem.\n        This code can be used to track down the root cause of the error.\n      example: F360001\n    mainDiagnosisCode:\n      type: string\n      description: |\n        The main diagnosis code is issued by the system that caused the problem.\n        This code can be used to track down the root cause and source of the error.\n        It can be used to search in the documentation for a solution.\n        It SHOULD NOT change from occurrence to occurrence of the same problem.\n      example: 080F0100\n    detailedDiagnosisCode:\n      type: string\n      description: |\n        The detailed diagnosis code issued by the system that caused the problem.\n        This code can be used to track down the detailed cause and source of the error.\n        It can be used to search in the documentation for a solution.\n        The detailed diagnosis code gives additional information about the cause of the error.\n        It SHOULD NOT change from occurrence to occurrence of the same problem.\n      example: '00666001'\n    dynamicDescription:\n      type: string\n      description: |\n        A dynamic description gives detailed information about the occurrence of a problem.\n        It can change between different occurrences of the same error.\n      example: value = -4.5\n    severity:\n      type: string\n      description: '\n        Severity of a problem as defined RFC5424 of the Syslog standard, see https://tools.ietf.org/html/rfc5424'\n      example: Error\n      enum:\n        - Emergency\n        - Alert\n        - Critical\n        - Error\n        - Warning\n        - Notice\n        - Informational\n        - Debug\n    links:\n      type: array\n      description: |\n        Collection of links to fix the problem. E.g. links to online user manual,\n        to an online community (using tags) or a developer chat (e.g. Slack).\n      items:\n        type: string\n        format: uri\n        example: https://stackoverflow.com/questions/tagged/boschrexroth+controlx+f360001\n    moreInfo:\n      type: object\n      additionalProperties: true\n      example:\n        trace: ExampleClass.cpp#452 Null pointer exception\n        class: ExampleClass\n</code></pre>"},{"location":"persistdata.html#app-private-files","title":"App-private files","text":"<p>(Supported from XCR-V-0112)</p> <p>Apps may need to store files in their appdata directories which are only needed at runtime. These files (or directories) have to be ignored on loading and when saving the appdata to an archived configuration.</p> <p>An app can specify such files using the \"appPrivateFiles\" element in the configuration section of its manifest. The element value is an array of strings where each string represents a regular expression following the RE2 syntax (https://golang.org/s/re2syntax). The expressions describe paths and names of files to be considered as private and are checked case-insensitively.</p> <p>The following example shows the declaration of \"appPrivateFiles\" with 3 regular expressions and the declaration of the app's root directory:</p>"},{"location":"persistdata.html#package-manifestjson","title":"package-manifest.json","text":"<pre><code>\"configuration\": {\n  \"appPrivateFiles\": [\n    \"^my-app/private/\",\n    \"^my-app/mixed/[^/]+\\\\.bak\",\n    \"^my-app/mixed/$\"\n  ],\n  \"appDirectories\": [\n    {\n      \"name\": \"my-app\",\n      \"description\": \"My app\",\n      \"icon\": \"bosch-ic-components\",\n      \"copyOnLoad\": true\n    }\n  ]\n}\n</code></pre> <p>Apps should only specify private files in their own app directories. Therefore, it is a good practice to start each regular expression with \"^my-app/\" where my-app is a root app directory of the app.</p> <p>Hints for the regular expressions: The characters \"[]().\\^\\$|?*+{}\" have special meanings and must be escaped with \"\\\" to be used uninterpreted. \"^\" matches the start of the string, \"$\" matches the end of the string. To provide \"\\\\\" in the manifest file which is in JSON format, you have to double it because the backslash is an escape character in JSON too.</p> <p>Examples for regular expressions (with an app root directory of \"my-app\")</p> Regular expression Meaning \"^my-app/private/\" defines the my-app/private directory and its content as private \"<sup>my-app/mixed/[</sup>/]+..bak\" defines all files with extension .bak within the my-app/mixed directory as private \"^my-app/mixed/$\" defines the my-app/mixed directory itself as private so that it is not removed if empty"},{"location":"persistdata.html#accessing-configuration-files-per-webdav","title":"Accessing configuration files per WebDAV","text":"<p>The configuration files are available via WebDAV protocol under the ctrlx-device web address with base path of \"solutions/webdav\", eg. access the configuration.json file content of appdata:</p> <pre><code>    https://localhost:8443/solutions/webdav/appdata/configuration.json\n</code></pre> <p>See also: golang WebDAV client and nodejs WebDAV client</p>"},{"location":"persistdata.html#accessing-configuration-files-with-winscp","title":"Accessing configuration files with WinSCP","text":"<p>WinSCP is a windows app, which allows access to a remote file system via WebDAV.</p>"},{"location":"persistdata.html#connect-to-a-ctrlx-core","title":"Connect to a ctrlX CORE","text":"<p>Start WinSCP, login with:</p> <pre><code>    File protocol:          WebDAV\n    Host name:              IP-address or hostname of the ctrlX CORE\n    Port number:            443 or 8443 for a ctrlX CORE^virtual^\n    User name and Password: credentials on the ctrlX CORE\n</code></pre> <p></p> <p>The user needs manage configuration rights to access the files.</p> <p>Access the configuration files located in /solutions/webdav</p> <p></p> <p>The folder \"appdata\" contains the files of the active configuration. The other folders are configuration archives.</p>"},{"location":"px.html","title":"Use Px as Local Proxy on a Windows Host","text":"<p>This documentation is for Windows hosts only without direct internet access.</p>"},{"location":"px.html#introduction","title":"Introduction","text":"<p>Host computers without direct internet access are using a proxy server to connect to the internet. In this case we have to provide the proxy service also for a SDK builder VM running on this host.</p> <p>We recommend to install and run px.exe as local proxy server on your Windows host. This local proxy forwards http and https requests to the configured remote proxy.</p> <p>Here some advantages of px.exe:</p> <ul> <li>Simple to install and configure</li> <li>Same port for http and https forwarding</li> <li>No need to store credential informations (user, password) in config file(s) because Px uses the encrypted Windows credentials.</li> <li>Preconfigured usage in the ctrlX AUTOMATION SDK QEMU VMs</li> </ul> <p>For more informations about Px see What is Px</p>"},{"location":"px.html#installation-of-px-as-local-proxy-server","title":"Installation of Px as Local Proxy Server","text":"<ul> <li>Open https://github.com/genotrance/px/releases/</li> <li>Click button Latest</li> <li>Click px-v?.?.?-windows.zip (v?.?.? e.g. v0.8.4)</li> <li>The zip archive will be downloaded</li> <li>Unzip the content e.g. to c:\\tools\\px</li> <li>Create a px-start.bat file in  with the content:</li> </ul> <pre><code>    cd c:\\tools\\px\n\n    px.exe\n</code></pre> <ul> <li>Manually call this bat file</li> </ul> <p>Enter this command for further usage of Px:</p> <pre><code>    px.exe --help\n</code></pre> <p>For automatically run at startup do following steps:</p> <ul> <li>Create a link to px-start.bat</li> <li>Open the startup folder with Windows logo key + R, enter shell:startup</li> <li>Move the link to px-start.bat into this folder</li> </ul> <p>Important</p> <p>Px provides both http and https access via default port 3128. If this port is not available on the host it can be changed in px.ini BUT: The alternative port has to be changed in the VM too - see Setup a QEMU VM and Setup a Virtual Box VM.</p>"},{"location":"px.html#proxy-settings-in-the-app-build-environment","title":"Proxy Settings in the App Build Environment","text":"<p>As mentioned a VM running on a host without direct internet access has to use a proxy server too.</p> <p>For the VM Px on the host is reachable via the URL http://10.0.2.2:3128</p> <p>Note: 10.0.2.2 is the IP address of the host from the perspective of the App Build Environment. See also QEMU Virtual Machine Networking</p> <p>For your information only - do not change if not necessary:</p> <p>This URL is stored as so called \"Proxy Settings\" in the VM e.g. in following files:</p> <ul> <li>/etc/environment *1)</li> <li>/etc/wgetrc</li> <li>~/.nuget/NuGet/NuGet.Config</li> </ul> <p>*1) Here these environment variables are defined:</p> <ul> <li><code>http_proxy=\"http://10.0.2.2:3128\"</code></li> <li><code>https_proxy=\"http://10.0.2.2:3128\"</code></li> <li><code>HTTP_PROXY=\"http://10.0.2.2:3128\"</code></li> <li><code>HTTPS_PROXY=\"http://10.0.2.2:3128\"</code></li> <li><code>no_proxy=localhost,127.0.0.1,.local</code></li> </ul>"},{"location":"px.html#troubleshooting","title":"Troubleshooting","text":"<p>Check proxy function in the App Build Environment:</p> <pre><code>    wget http://www.boschrexroth.com\n</code></pre> <p>If no error occurs the internet access via the proxy server is working. In this case remove the downloaded file.</p> <pre><code>    rm index.html*\n</code></pre> <p>Check the following points if there are problems with Px:</p> <ul> <li>Are the proxy settings Proxy Settings in the App Build Environment fitting to the px.ini file on the host?</li> <li>For more informations about the settings in px.in see px.ini on github</li> <li>Host PC: Is another proxy running e.g. cntlm?</li> <li>Host PC: Enable logging with parameter log = 1 in px.ini</li> </ul>"},{"location":"quick-start-guide.html","title":"Quick Start Guide","text":"<p>With the help of this guide you will be able to build your first snap with one of the example projects of the ctrlX AUTOMATION SDK in just a few steps.</p>"},{"location":"quick-start-guide.html#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Install ctrlX WORKS &gt;= 1.20 with function 'App Build Environment' on your Windows host computer</p> </li> <li> <p>If your Windows host computer is behind a proxy server, install and run PX.exe.</p> </li> </ul>"},{"location":"quick-start-guide.html#building-a-snap","title":"Building a Snap","text":"<p>Building a snap from a SDK sample project can be done in a few steps:</p> <ul> <li>From ctrlX WORKS create and start a new App Build Environment (QEMU VM) instance.</li> </ul> <p>Wait until the VM is shutting down automatically after the initialization phase. Then restart your VM. For more information see ctrlX WORKS Feature App Build Environment.</p> <ul> <li>When ctrlX WORKS enables the SSH link click this link to start a SSH session.</li> </ul> <p>On password prompt enter <code>boschrexroth</code></p> <ul> <li>Install the latest ctrlX AUTOMATION SDK from github</li> </ul> <p>See the installation instructions on: Installation of the ctrlX AUTOMATION SDK</p> <ul> <li> <p>Change to project folder ctrlx-automation-sdk/samples-cpp/datalayer.register.node</p> </li> <li> <p>Build one or both snaps</p> </li> </ul> <p>To build a snap for a ctrlX CORE<sup>virtual</sup> enter:</p> <pre><code>./build-snap-amd64.sh\n</code></pre> <p>To build a snap for a ctrlX CORE enter:</p> <pre><code>./build-snap-arm64.sh\n</code></pre> <p>As a result a snap file <code>sdk-cpp-registernode_...._amd64.snap</code> respectively <code>sdk-cpp-registernode_...._arm64.snap</code> will be created.</p> <p>Important</p> <p>Please ignore the following warnings during snap builds like 'Unable to determine library dependencies for ...'. These warnings occur with cross builds (on amd64 for arm64) because the used tool 'ldd' used by snapcraft cannot resolve the dependencies of the arm64 snap on amd64 host systems.</p> <p>To copy the snap(s) into your Windows file system start cmd.exe on your Windows host and enter this command:</p> <pre><code>scp -P 10022 boschrexroth@localhost:~/ctrlx-automation-sdk/samples-cpp/datalayer.register.node/*.snap .\n</code></pre> <ul> <li>Login into your ctrlX CORE and install the according snap</li> </ul> <p>Don't forget to set option 'Allow installation from unknown source' under Apps --&gt; Settings</p> <ul> <li>Select Settings --&gt; ctrlX Data Layer and check the nodes under path sdk-cpp-registernode/</li> </ul> <p>There should appear several nodes created by the snap.</p> <p>Important</p> <p>To setup a complete tool set to develop own applications (snaps) see following chapters:</p> <ul> <li> <p>Visual Studio Code</p> </li> <li> <p>SSH Connection</p> </li> <li> <p>All sample projects</p> </li> </ul>"},{"location":"references.html","title":"References","text":""},{"location":"references.html#api-references","title":"API References","text":"<ul> <li>ctrlX Datalayer .NET API</li> <li>ctrlX Datalayer Node.js API</li> <li>ctrlX Datalayer go API</li> </ul>"},{"location":"references.html#useful-weblinks-good-to-know","title":"Useful weblinks (good to know)","text":""},{"location":"references.html#snap-concept-and-the-framework","title":"Snap concept and the Framework","text":"<ul> <li>snapcraft.io</li> <li>apache celix</li> </ul>"},{"location":"references.html#bearer-tokens","title":"Bearer tokens","text":"<ul> <li>jwt.io</li> </ul>"},{"location":"references.html#miscellaneous","title":"Miscellaneous","text":"<ul> <li>ctrlX Data Layer</li> <li>Trusted Platform Module</li> <li>Logging</li> </ul>"},{"location":"remote-build.html","title":"Using Snapcraft Remote Build from Canonical","text":""},{"location":"remote-build.html#using-launchpad-build-farm","title":"Using Launchpad build farm","text":"<p>From snapcraft version 3.9+ Canonical enables anyone to run a multi-architecture snap build process on remote servers using the Launchpad build farm:</p> <pre><code>snapcraft remote-build --build-on=arm64,amd64 --launchpad-accept-public-upload\n</code></pre> <p>Important</p> <p>Using the snapcraft remote-build feature makes your projects public. So it is primarily useful for open source software projects.</p>"},{"location":"remote-build.html#further-information","title":"Further Information","text":"<p>You can find a detailed documentation here: Remote build</p> <p>For support please consult the Snapcraft Forum</p>"},{"location":"remote-debug-cpp.html","title":"Remote Debugging Snaps C++","text":""},{"location":"remote-debug-cpp.html#overview","title":"Overview","text":"<p>This document describes how applications can be debugged if they are running in the confined Ubuntu Core snap environment of a ctrlX CORE (Remote Debugging).</p> <p>In this document first is briefly described how ctrlX CORE instances are connected over TCP/IP and SSH.</p> <p>Then each following chapter describes for one programming language the  language-dependent features of snap debugging.</p>"},{"location":"remote-debug-cpp.html#connecting-ctrlx-core-devices","title":"Connecting ctrlX CORE devices","text":""},{"location":"remote-debug-cpp.html#ip-address-of-a-ctrlx-core","title":"IP Address of a ctrlX CORE","text":"<p>From the build environment ctrlX CORE devices are connected via TCP/IP. Assuming we are using a (QEMU) virtual machine as build environment the different kind of ctrlX CORE devices are reachable over these IP addresses:</p> <ol> <li>ctrlX CORE<sup>virtual</sup> with port forwarding: 10.0.2.2</li> <li>ctrlX CORE<sup>virtual</sup> with network adapter: 192.168.1.1</li> <li>ctrlX CORE: real IP address</li> </ol> <p>To point 1.: From the point of view of the virtual machine this is the IP address of the host computer. The ctrlX CORE<sup>virtual</sup> has no own IP address. The connections to the control are realized via port forwarding.</p>"},{"location":"remote-debug-cpp.html#set-up-ssh-public-key-authentication","title":"Set up SSH Public Key Authentication","text":"<p>Debugging is based on SSH, so SSH should be set up between the debugger client on the host computer and the debugger server on the ctrlX CORE. To make logging in easier public key authentification should be installed.</p> <p>For this kind of authorization a private / public key pair is generated. The private key is stored into a file kept secret on your host computer. The content of the public key is appended to the file ~/.ssh/authorized_keys in your home directory of the ctrlX CORE (remote computer).</p> <p>Important</p> <p>You need an account with root rights and a home directory on the ctrlX CORE.</p> <p>Creating the key pair and the installation both on the host computer and on the ctrlX CORE (remote computer) is described here</p> <p>Set up SSH public key authentication to connect to a remote system</p> <p>or here (in German)</p> <p>OpenSSH Public Key Authentifizierung unter Ubuntu.</p> <p>Additional hints:</p> <ul> <li>Use standard file names: \"id_rsa\" for the private and \"id_rsa.pub\" for the public key file.</li> <li>On the host computer set the (UNIX) permissions attributes for \"id_rsa\" to 600 (-rw-------)</li> <li>On the host computer use the file \"~/.ssh/config\" to configure several ssh connections to different ctrlX CORE devices.</li> </ul>"},{"location":"remote-debug-cpp.html#remote-debugging-c","title":"Remote Debugging C++","text":""},{"location":"remote-debug-cpp.html#introduction","title":"Introduction","text":"<p>Debugging C++ applications in their snap environment is done by two debugging tools:</p> <ul> <li>The gdb server is running on the remote target. During a debug session he will attach to the running process to be debugged.</li> <li>The gdb debugger is running on the build environment. At the start of a remote debugging session he will connect to the gdb server. For debugging all commands are sent to the server whow will execute them and send to response back to the gdb debugger.</li> </ul> <p>The snap daemon (snapd) provides the gdb server as buildin tool.</p> <p>Important</p> <p>The application has to stop on startup so that the gdb server can attach to the running process.</p> <p>For more informations about using gdb and gdb server in snap environment see https://snapcraft.io/docs/using-gdb-gdbserver.</p> <p>'Debugging with GDB' provides general informations about this debugging tool:https://sourceware.org/gdb/current/onlinedocs/gdb/</p>"},{"location":"remote-debug-cpp.html#overview_1","title":"Overview","text":"<p>This overview will give you a short explenation how remote debugging of a C++ snap application will work. A detailed description will follow in the next chapters.</p> <p>These are the basics points:</p> <ul> <li>Your C++ code has to raise a SIGSTOP signal in debug mode. This is done typically in the startup sequence or somewhere else where needed.</li> <li>You have to build your C++ snap in debug mode and install it on your ctrlX CORE.</li> <li>The snap application will be restarted manually via ssh with the command <code>sudo snap run --experimental-gdbserver=:12345 &lt;Snapname&gt;.&lt;Appname&gt;</code></li> <li>The execution of the application will stop when the SIGSTOP signal is raised so that the gdb server is able to connect.</li> <li>From your build environment the gdb debugger is started in remote mode. Provided with IP address and port nummber he can communicate with the gdb server on the ctrlX CORE.</li> <li>Now the debug process can be started using gdb debugger commands. Normally this is done from an IDE like VisualStudio Code.</li> </ul>"},{"location":"remote-debug-cpp.html#prerequisites","title":"Prerequisites","text":"<p>In the following chapters configuration and starting C++ snap application debugging is explained assuming that Visual Studio Code is used as IDE.</p> <p>Furthermore we assume that a hardware based ctrlX CORE (aarch64) with the IP address 192.168.1.1 is used and that there is an user with the name  <code>rootsshuser</code> installed whow has root and ssh permissions.</p>"},{"location":"remote-debug-cpp.html#prerequisites-for-the-ctrlx","title":"Prerequisites for the ctrlX","text":"<ul> <li>Snapd &gt; 2.46.1</li> <li>User <code>rootsshuser</code> with root and ssh access to the device.</li> </ul>"},{"location":"remote-debug-cpp.html#prerequisites-for-the-linux-build-environment","title":"Prerequisites for the Linux Build Environment","text":"<ul> <li>Package gdb-multiarch installed, if not enter  <code>sudo apt-get install -y gdb-multiarch</code></li> <li>Copy public key id_sa.pub to ctrlX CORE: <code>ssh-copy-id rootsshuser@192.168.1.1</code></li> <li>Download and extract the SDK zip archive</li> </ul>"},{"location":"remote-debug-cpp.html#getting-started","title":"Getting Started","text":"<p>The code and configuration examples are from the SDK sample in samples-cpp/datalayer.register.node</p> <p>So start Visual Studio Code, connect to your build enviroment and open this folder.</p>"},{"location":"remote-debug-cpp.html#raising-sigstop-in-the-c-code","title":"Raising SIGSTOP in the C++ Code","text":"<p>In main.cpp at the beginning of the 'int main()' function the code for raising the SIGSTOP signal is placed. The code is only compiled in debug mode:</p> <pre><code>    #ifdef MY_DEBUG\n        std::cout &lt;&lt; \"Starting 'raise(SIGSTOP)', waiting for debugger..\" &lt;&lt; std::endl;\n        raise(SIGSTOP);\n        std::cout &lt;&lt; \"Debugger connected, continuing program...\" &lt;&lt; std::endl;\n    #endif\n</code></pre>"},{"location":"remote-debug-cpp.html#build-the-debug-snap","title":"Build the Debug Snap","text":"<ul> <li>Select the Visual Studio Code extension CMake in the sidebar. At the top of the explorer window click on '...' (Views and more actions) and select 'Clean all Projects'.</li> <li>In the status bar at the bottom of the Visual Studio Code window click on the CMake field and select 'Debug' as build variant in the options drop box.</li> <li>In the main menu click 'Run Build Task' and select the CMake Build Kit (compiler). For our ctrlX CORE select 'GCC for aarch64...'. The build will start and create a debug mode snap 'registernode_..._arm64.snap'.</li> <li>Right click this file and select 'Download...'</li> </ul>"},{"location":"remote-debug-cpp.html#install-the-debug-snap","title":"Install the Debug Snap","text":"<p>Install the debug snap on your ctrlX CORE. The application will be started but stops immediately because of raising the SIGSTOP signal at the beginning of the main function.</p>"},{"location":"remote-debug-cpp.html#configuring-remote-debugging-in-visualstudio-code","title":"Configuring Remote Debugging in VisualStudio Code","text":"<p>From Visual Studio Code we want to start the application with the snap run command.</p> <p>For this the file tasks.json contains the task <code>Launch Remote GDB Server</code></p> <pre><code>    {\n      \"label\": \"Launch Remote GDB Server\",\n      \"type\": \"shell\",\n      \"problemMatcher\": \"$gcc\",\n      \"command\": \"ssh ${input:Root-User}@${input:Target-IP}  \\\"sudo snap run --experimental-gdbserver=:12345 registernode.registerNode\\\" \",\n    }\n</code></pre> <p>The tag 'command' starts the application under the gdb server via ssh.</p> <p>As second action we want to start the gdb debugger in remote mode so that he connects to the remote gdb server. Therefor in launch.json the configuration set <code>aarch64 ctrlX (remote)</code> is stored.</p> <pre><code>    {\n        \"name\": \"aarch64 ctrlX (remote)\",\n        \"type\": \"cppdbg\",\n        \"request\": \"launch\",\n        \"program\": \"${workspaceFolder}/generated/ubuntu22-gcc-aarch64/Debug/registerNode\",\n        \"cwd\": \"${workspaceFolder}\",\n        \"miDebuggerPath\": \"/usr/bin/gdb-multiarch\",\n        \"miDebuggerServerAddress\": \"192.168.1.1:12345\",\n        \"stopAtEntry\": true,\n        \"targetArchitecture\": \"arm64\",\n        \"externalConsole\": false,\n        \"MIMode\": \"gdb\",\n        \"setupCommands\": [\n            {\n                \"description\": \"Enable pretty-printing for gdb\",\n                \"text\": \"-enable-pretty-printing\",\n                \"ignoreFailures\": true\n            },\n        ]\n    }\n</code></pre> <p>The tag 'miDebuggerPath' select gdb-multiarch as debugger, 'miDebuggerServerAddress' set IP address and port number to connect to the remote gdb server.</p>"},{"location":"remote-debug-cpp.html#starting-the-application-with-visualstudio-code","title":"Starting the Application with VisualStudio Code","text":"<p>Select Main menu item Terminal --&gt; Run Task... --&gt; Launch GDB-Server</p> <p>In the Terminal window a wellcome message will appear:</p> <pre><code>    Welcome to \"snap run --gdbserver\".\n    You are right before your application is run.\n    Please open a different terminal and run:\n\n    gdb -ex=\"target remote :12345\" -ex=continue -ex=\"signal SIGCONT\"\n    (gdb) continue\n</code></pre> <p>or use your favorite gdb frontend and connect to :12345</p> <p>The gdb server has started the application which stops because of SIGSTOP. We are ready to connect with the gdb debugger.</p>"},{"location":"remote-debug-cpp.html#start-snap-debugging-with-the-visual-studio-code","title":"Start Snap Debugging with the Visual Studio Code","text":"<p>Important</p> <p>Attaching to the snap application succeeds only when there are no breakpoints active! <ul> <li>Select main menu Run --&gt; Remove All Breakpoints</li> <li>Select the 'Run and Debug' icon in the extension side bar.</li> <li>Select 'aarch64 ctrlX' in the top line of the explorer window</li> <li>Click the green start icon</li> </ul></p> <p>Now gdb is started and connected to the gdb server. With the DEBUG CONSOLE window Visual Studio Code provides an output area and a command line to enter gdb commands - see green area in picture below.</p> <ul> <li>Click into the gdb command line (green area in the picture above) and enter <code>-exec info b</code></li> <li>All active breakpoints are listed. Each breakpoint has an number (see cloumn 'Num')</li> <li>Delete all listed breakpoints specified by their number, beginning with 1: <code>-exec delete 1</code></li> <li>Ensure with <code>-exec info b</code> that no breakpoints are set.</li> <li>Press F5 (Start/Continue Debugging) several times until in the output area of the DEBUG CONSOLE the loaded libraries are listed and the yellow debug arrow points to the 'raise(SIGSTOP)' line.</li> </ul> <p>Now you can add further breakpoints and continue debugging in the known way.</p>"},{"location":"remote-debug-cpp.html#screenshots","title":"Screenshots","text":""},{"location":"remote-debug-python.html","title":"Remote Debugging Snaps Python","text":""},{"location":"remote-debug-python.html#overview","title":"Overview","text":"<p>This document describes how applications can be debugged if they are running in the confined Ubuntu Core snap environment of a ctrlX CORE (Remote Debugging).</p> <p>In this document first is briefly described how ctrlX CORE instances are connected over TCP/IP and SSH.</p> <p>Then each following chapter describes for one programming language the  language-dependent features of snap debugging.</p>"},{"location":"remote-debug-python.html#connecting-ctrlx-core-devices","title":"Connecting ctrlX CORE devices","text":""},{"location":"remote-debug-python.html#ip-address-of-a-ctrlx-core","title":"IP Address of a ctrlX CORE","text":"<p>From the build environment ctrlX CORE devices are connected via TCP/IP. Assuming we are using a (QEMU) virtual machine as build environment the different kind of ctrlX CORE devices are reachable over these IP addresses:</p> <ol> <li>ctrlX CORE<sup>virtual</sup> with port forwarding: 10.0.2.2</li> <li>ctrlX CORE<sup>virtual</sup> with network adapter: 192.168.1.1</li> <li>ctrlX CORE: real IP address</li> </ol> <p>To point 1.: From the point of view of the virtual machine this is the IP address of the host computer. The ctrlX CORE<sup>virtual</sup> has no own IP address. The connections to the control are realized via port forwarding.</p>"},{"location":"remote-debug-python.html#set-up-ssh-public-key-authentication","title":"Set up SSH Public Key Authentication","text":"<p>Debugging is based on SSH, so SSH should be set up between the debugger client on the host computer and the debugger server on the ctrlX CORE. To make logging in easier public key authentification should be installed.</p> <p>For this kind of authorization a private / public key pair is generated. The private key is stored into a file kept secret on your host computer. The content of the public key is appended to the file ~/.ssh/authorized_keys in your home directory of the ctrlX CORE (remote computer).</p> <p>Important</p> <p>You need an account with root rights and a home directory on the ctrlX CORE.</p> <p>Creating the key pair and the installation both on the host computer and on the ctrlX CORE (remote computer) is described here</p> <p>Set up SSH public key authentication to connect to a remote system</p> <p>or here (in German)</p> <p>OpenSSH Public Key Authentifizierung unter Ubuntu.</p> <p>Additional hints:</p> <pre><code>- Use standard file names: \"id_rsa\" for the private and \"id_rsa.pub\" for the public key file.\n- On the host computer set the (UNIX) permissions attributes for \"id_rsa\" to 600 (-rw-------)\n- On the host computer use the file \"~/.ssh/config\" to configure several ssh connections to different ctrlX CORE devices.\n</code></pre>"},{"location":"remote-debug-python.html#remote-debugging-python","title":"Remote Debugging Python","text":"<p>This chapter describes remote debugging of snap written in Python.</p> <p>In the sample project samples-python/datalayer.remote.debug all the features described in this chapter have been implemented.</p>"},{"location":"remote-debug-python.html#using-visual-studio-code-additional-tasks-in-launchjson","title":"Using Visual Studio Code - Additional Tasks in launch.json","text":"<p>On the host computer Visual Studio Code is used as Integrated Development Environment (IDE).</p> <p>For general informations regarding Python debugging in Visual Studio Code see https://code.visualstudio.com/docs/python/debugging, chapter \"Debugging by attaching over a network connection\".</p> <p>The Python Visual Studio Code extension has a Python debug client. For a remote debugging session we have add a configuration set with these parameters/values:</p> <ul> <li>The request type is \"attach\": \"request\": \"attach\",</li> <li>The IP address of the ctrlX CORE has to be provided e.g.: \"host\": \"192.168.2.61\",</li> <li>The port number where the debug server is listening has to be provided e.g.: \"port\": 12345,</li> <li>and a link to the exe</li> </ul> <p>Here you can find the complete file: samples-python/datalayer.remote.debug/.vscode/launch.json</p> <p>There are three launch configurations for remote debugging:</p> <ul> <li>\"Remote ctrlX COREvirtual - Port forwarding\"</li> <li>\"Remote ctrlX COREvirtual - Network adapter\"</li> <li>\"Remote ctrlX CORE\"</li> </ul>"},{"location":"remote-debug-python.html#preparing-your-python-project-for-remote-debugging","title":"Preparing your Python Project for Remote Debugging","text":"<p>Installing the required Python packages into your build environment ist described here: samples-python/python.md</p> <p>In our sample project the Python package  debugpy is used for remote debugging of Python code.</p>"},{"location":"remote-debug-python.html#the-python-package-debugpy","title":"The Python Package debugpy","text":"<p>The package debugpy provides a debug server and functions to configure the debug connection and to set breakpoints.</p> <p>The configuration of the debug connection and the start of the debug server have to be called in the Python application program so that the application stops (preferred in the startup phase) and waits for a debug client whow wants attach to the process.</p> <p>Setting breakpoints by program code is optional.</p> <p>To make the usage of debugpy easier the essential function calls are extracted and provided in the script samples-python/datalayer.remote.debug/debugging.py.</p> <ul> <li>debugging.init() scans the applications parameter list for --debug-port=... If this parameter is not found remote debugging will be not enabled. Usage see main.py.</li> <li>debugging.wait_for_client(port: int) is an internal function called by init(). It configures the remote debug connections and starts the debug server. The application is stopped until a debug client connects.</li> <li>With debugging.breakpoint() breakpoints can be set by the Python code itself - see main.py.</li> </ul>"},{"location":"remote-debug-python.html#packing-debugpy-into-your-snap","title":"Packing debugpy into your snap","text":"<p>snapcraft will pack debugpy into the snap because it is listed in the parameter \"install_requires\" of the function setup() in setup.py.</p>"},{"location":"remote-debug-python.html#creating-and-installing-a-snap","title":"Creating and Installing a snap","text":"<p>Start a terminal and enter</p> <pre><code>    snapcraft clean --destructive-mode\n    snapcraft --destructive-mode\n</code></pre> <p>Important</p> <p>To create a snap for a ctrlX CORE you need an aarch64 (arm64) building environment e.g. a QEMU VM with aarch64 emulation.</p> <p>Install the snap on your ctrlX CORE.</p> <p>After installation of the snap the app will be started at once - but without remote debugging enabled.</p>"},{"location":"remote-debug-python.html#start-your-python-app-in-remote-debugging-mode","title":"Start your Python App in Remote Debugging Mode","text":"<p>Connect via SSH to your ctrlX and start your app in debugging mode.</p> <p>Stop the snap:</p> <pre><code>    sudo snap stop sdk-py-remote-debug\n</code></pre> <p>Start the app providing a debug port as command line parameter:</p> <pre><code>    sudo snap run sdk-py-remote-debug.app --debug-port=12345\n</code></pre> <p>Important</p> <p>Ensure that the port number is the same as configured in launch.json.</p> <p>Now the app holds on startup and waits for a debug client to connect.</p>"},{"location":"remote-debug-python.html#do-remote-debugging-with-visual-studio-code","title":"Do Remote Debugging with Visual Studio Code","text":"<p>In Visual Studio Code</p> <ul> <li>Click the 'Run and Debug' icon in the side bar,</li> <li>select the according launch configuration for remote debugging</li> <li>and enter F5</li> </ul> <p>Visual Studio Code will connect to the debug server on the ctrlX CORE and attach to the process.</p> <p>Breakpoints can be set within the Python editor. Furthermore breakpoints set programatically are active.</p>"},{"location":"remote-debug-python.html#using-python-package-debugpy-in-your-own-projects","title":"Using Python Package debugpy in your own Projects","text":"<p>To use remote debugging in your own projects just do following steps:</p> <ul> <li>Copy the script samples-python/datalayer.remote.debug/debugging.py into your project folder</li> <li>Install debugpy into your development environment e.g. by adding 'debugpy' into the file requirerequirements.txt</li> <li>Add debugpy to the list of parameter install_requires=[...]</li> </ul>"},{"location":"s2sauth.html","title":"Service-to-Service Authentication","text":"<p>Service to Service (S2S) authentication provides an easy-to-use interface for applications to retrieve a JSON web token (JWT). By using this token, applications can access data from other resources.</p> <p>In order to integrate service-to-service authentication into your application follow the instructions below.</p> <p>Important</p> <p>Service-to-Service authentication is not available for apps which are installed from \"unkown sources\". Only apps which have been validated &amp; digitally signed by Bosch Rexroth AG are permitted to use the interface.</p>"},{"location":"s2sauth.html#add-content-plug-to-snapcraftyaml","title":"Add Content Plug to snapcraft.yaml","text":"<p>To be able to retrieve a token, the app has to provide two content slots. The definition for those slots must be added to the snapcraft.yaml:</p> <pre><code>slots:\n  secure-assets:\n    interface: content\n    content: secure-assets\n    source:\n      read:\n        - $SNAP/secure-assets/${SNAPCRAFT_PROJECT_NAME}\n  service-token:\n    interface: content\n    content: service-token\n    source:\n      write:\n        - $SNAP_DATA/service-token/${SNAPCRAFT_PROJECT_NAME}\n</code></pre> <p>Important</p> <p>The target of the secure-assets slot must point to a location in the read-only area of the application ($SNAP, see example above). The app validation will fail if this rule is violated.</p>"},{"location":"s2sauth.html#define-provide-permissions-secure-assets","title":"Define &amp; Provide Permissions (secure-assets)","text":"<p>The application must provide a file named <code>${SNAP_NAME}.scopes.json</code> located in <code>$SNAP/secure-assets/${SNAPCRAFT_PROJECT_NAME}</code> which defines the permissions that are requested by the application. One example would be:</p> <pre><code>{\n  \"id\": \"myapp\",\n  \"required-permissions\": [\"logbook.diag.r\", \"rexroth-deviceadmin.web.licensemanager.r\"]\n}\n</code></pre> <p>In this example, your app would request a token which provides access to the logbook (read-only) and the License Manager backend (read-only).</p> <p>Important</p> <p>The parameter <code>id</code> must match the id that is defined in the Package Manifest (refer to Package Manifest documentation for details)</p>"},{"location":"s2sauth.html#retrieve-and-use-authentication-token-service-token","title":"Retrieve and Use Authentication Token (service-token)","text":"<p>During runtime, the token will be provided to the application as a file named <code>&lt;id&gt;.token</code> (in the example shown above, this would be <code>myapp.token</code>) in the service-token folder (<code>$SNAP_DATA/service-token/${SNAPCRAFT_PROJECT_NAME}</code>).</p> <p>Important</p> <p>The content of the token file might not be up-to-date when the application is ready, especially after a (re-)start of the system. Using an outdated token will lead to an authentication failure. Therefore, the application must implement a logic which - if the authentication request has failed - parses the token file again and tries to re-authenticate. This must be repeated until the authentication succeeds.</p>"},{"location":"samples.html","title":"Overview","text":""},{"location":"samples.html#sample-projects","title":"Sample Projects","text":"<p>Applications (snaps) for ctrlX CORE targets can be written in several programming language or even as shell scripts.</p> <p>For creating your own applications, the ctrlX AUTOMATION SDK offers sample projects that can be used as source of code snippets as templates. The sample projects are saved in sub folders according to their programming language or their type.</p> <p>Here an overview of the sample project types and their subfolders.</p> <p>Important</p> <p>Run the install script listet in column three once before you are working with one or more sample projects. These scripts are located in /home/boschrexroth/scripts. See also install-scripts.</p> Sample Project Type Link to Projects Install Script C/C++ samples-cpp/README.md ~/scripts/install-cpp-aarch64-libs.sh Go samples-go/README.md ~/scripts/install-go.sh Python samples-python/README.md .NET samples-net/README.md ~/scripts/install-dotnet-sdk.sh Node.js samples-node/README.md ~/scripts/install-nodejs-npm.sh Snap samples-snap/README.md IEC 61131-3 samples-iec61131/README.md"},{"location":"samples.html#building-snaps","title":"Building Snaps","text":"<p>Important</p> <p>All project folders are containing these scripts to build snaps:</p> <ul> <li>build-snap-amd64.sh: Build an amd64 snap for a ctrlX CORE<sup>virtual</sup>.</li> <li>build-snap-arm64.sh: Build an arm64 (aarch64) snap for a ctrlX CORE.</li> </ul> <p>You can call these scripts from the command line:</p> <pre><code>./build-snap-amd64.sh\n./build-snap-arm64.sh\n</code></pre> <p>or from Visual Studio Code:</p> <ul> <li>Select main menu item Terminal --&gt; Run Build Task</li> <li>Select <code>build snap amd64</code> for building a snap for a ctrlX COREvirtual</li> <li>Select <code>build snap arm64</code> for building a snap for a ctrlX CORE.</li> </ul> <p>At the end of the build process the snap file should be available in the root folder of your project.</p> <p>See below for further Run Build Task items.</p>"},{"location":"samples.html#installing-a-snap-manually","title":"Installing a Snap Manually","text":"<p>Right click the snap file in the Visual Studio Code EXPLORER and select 'Download'. Visual Studio Code stores it in your home directory on your host computer. For Windows 10 this is %USERPROFILE%, in Linux this is: ~/</p> <p>Start a Web browser, login into your ctrlX CORE:</p> <ul> <li>Select Settings - Apps</li> <li>Switch to Service Mode</li> <li>Click Install from file</li> <li>Select the downloaded file</li> <li>Switch to Operation Mode</li> </ul>"},{"location":"samples.html#building-and-installing-a-snap-automated-by-script","title":"Building and Installing a Snap Automated by Script","text":"<p>Using the bash script build-upload-log-snap.sh in the ctrlX AUTOMATION SDK folder scripts/ You can create a snap file, upload it, install it on a ctrlX CORE and view the log output.</p> <p>The script can be started either from the command line or with the additional Run Build Task items of the Visual Studio Code IDE.</p>"},{"location":"samples.html#starting-script-from-the-command-line","title":"Starting Script from the Command Line","text":"<p>Change into a sample project folder (e.g. samples-cpp/datalayer.client) and enter</p> <pre><code> ../../scripts/build-upload-log-snap.sh -help\n</code></pre> <p>All parameters and their default values are listed.</p> <p>E.g. to build and install a snap for a ctrlX COREvirtual with Network Adapter enter</p> <pre><code>../../scripts/build-upload-log-snap.sh -NA\n</code></pre> <p>But we recommend calling this script from Visual Studio Code. See next chapter.</p>"},{"location":"samples.html#starting-script-as-visual-studio-build-task","title":"Starting Script as Visual Studio Build Task","text":"<p>Additional to the two Build Tasks mentioned above there are further tasks:</p> <ul> <li>Build upload snap - ctrlX COREvirtual Network Adapter</li> <li>Build upload snap - ctrlX COREvirtual Port Forwarding</li> <li>Build upload log snap - ctrlX CORE 192.168.1.1</li> <li>Build upload snap</li> </ul> <p>The first three tasks are calling the script with the parameter set needed for the according destination. There is sno need to select further parameters.</p> <p>If you are choosing the last item each parameter is prompted.</p> <p>Feel free to add more tasks or adapt the existing ones.</p>"},{"location":"setup_overview.html","title":"Setup Overview","text":"<p>To develop ctrlX CORE applications with the ctrlX AUTOMATION SDK we need a so called App Build Environment which is a Ubuntu 20.04 Linux operating system with a special set of software packages installed and certain settings.</p> <ul> <li> <p>The chapter Quick Start Guide provides the fastest way to create an app with one of the SDKs sample projects.</p> </li> <li> <p>In ctrlX WORKS App Build Environment the recommended way creating and running an App Build Environment is described.</p> </li> <li> <p>Important Installation Scripts gives an overview of scripts needed to install programming language dependent tools.</p> </li> <li> <p>If ctrlX WORKS cannot be used the chapter QEMU Virtual Machine shows how QEMU can be installed as standalone app and how a QEMU VM can be setup as App Build Environment.</p> </li> <li> <p>VirtualBox Virtual Machine describes how to setup such a VM to use it as App Build Environment.</p> </li> <li> <p>Native Ubuntu shows how to setup a bare-metal machine to use it as App Build Environment.</p> </li> <li> <p>Install Sources from github describes how to download and install the github repository ctrlX AUTOMATION Software Development Kit https://github.com/boschrexroth/ctrlx-automation-sdk</p> </li> </ul>"},{"location":"setup_qemu_ctrlx_works.html","title":"ctrlX WORKS App Build Environment","text":"<p>If in the ctrlX WORKS setup the function 'ctrlX CORE App Build Environment' is enabled ctrlX WORKS allows to create App Build Environments. Internally these are QEMU Virtual Machines running Ubuntu server LTS which are configured during first startup.</p> <p>From the ctrlX WORKS UI each environment can be started, stopped or deleted. Furthermore a SSH shell can be started to login.</p> <p>Apart from ctrlX WORKS and px.exe, no other software tools are required.</p>"},{"location":"setup_qemu_ctrlx_works.html#checking-the-internet-connection","title":"Checking the Internet Connection","text":"<p>Important</p> <p>For the installation of an App Build Environment a functioning internet connection is required.</p> <p>If your host uses a proxy server install and run px.exe.</p> <p>You can test whether your internet connection is working by clicking this link Ubuntu 22.04 LTS. A site with Ubuntu server cloud images should appear.</p>"},{"location":"setup_qemu_ctrlx_works.html#installation-of-the-app-build-environment-function-in-ctrlx-works","title":"Installation of the App Build Environment Function in ctrlX WORKS","text":"<p>During the ctrlX WORKS setup select function 'ctrlX CORE App Build Environment'.</p> <p>Out of an already installed ctrlX WORKS you can start the setup wizard with Settings - Setup - Add or remove features.</p>"},{"location":"setup_qemu_ctrlx_works.html#handling-of-app-build-environments","title":"Handling of App Build Environments","text":"<p>Select 'App Build Environments' on the side bar of ctrlX WORKS. The list of installed App Build Environments will be shown.</p>"},{"location":"setup_qemu_ctrlx_works.html#create-an-app-build-environment","title":"Create an App Build Environment","text":"<ul> <li>Click the <code>+</code> icon in the right corner of the page.</li> <li>The dialog 'Add ctrlX CORE App Build Environment' will appear.  Now the new instance can be configured.</li> <li>Name: Enter a unique name.</li> <li>Storage location: Enter/select a destination directory where the files are stored.</li> <li>Port forwarding: Here port forwardings from the Windows host to the VM guest are defined. Per default for SSH the port 10022 of the Windows host is forwarded to port 22 of the guest VM. Do NOT change 22! You can change 10022 if you want to run several environments concurrently.</li> <li>Select 'Use HTTP and HTTPS proxy on localhost:3128' if your host uses a proxy. In this case install and run px.exe</li> <li>Create a new Add Build Environment with OK or abort with Cancel</li> </ul> <p>Important</p> <p>The new environment has a default user acount boschrexroth:boschrexroth</p>"},{"location":"setup_qemu_ctrlx_works.html#start-an-app-build-environment","title":"Start an App Build Environment","text":"<ul> <li>Start a App Build Environment with the play <code>&gt;</code> icon.</li> <li>On first start the Ubuntu image will be downloaded and the environment will be installed. This will take some time. In this phase no login will be possible. When the initialization phase is finished the VM will shutdown automatically.</li> <li>Click the play icon again to restart the App Build Environment.</li> <li>When the environment is up ctrlX WORKS will show 'Online' in column State.</li> </ul>"},{"location":"setup_qemu_ctrlx_works.html#working-with-an-app-build-environment","title":"Working with an App Build Environment","text":""},{"location":"setup_qemu_ctrlx_works.html#preparations","title":"Preparations","text":"<p>Additional information on ssh see: SSH Connection</p> <p>On your Windows host start cmd.exe and run these commands.</p> <p>Delete entry regarding 127.0.0.1 in the file know_hosts:</p> <pre><code>ssh-keygen.exe -R [127.0.0.1]:10022\n</code></pre> <p>Create the directory /home/boschrexroth/.ssh - on password prompt enter always enter boschrexroth:</p> <pre><code>ssh.exe -p 10022 boschrexroth@127.0.0.1 \"mkdir -p ~/.ssh\"\n</code></pre> <p>Copy your public key (here: id_rsa.pub) to the App Build Environment:</p> <pre><code>scp.exe -P 10022 %USERPROFILE%\\.ssh\\id_rsa.pub boschrexroth@127.0.0.1:~/.ssh/id_rsa.pub.tmp\n</code></pre> <p>Append the public key to the file authorized_keys, change file permissions and remove temporary file:</p> <pre><code>ssh.exe -p 10022 boschrexroth@127.0.0.1 \"cat ~/.ssh/id_rsa.pub.tmp &gt;&gt;~/.ssh/authorized_keys &amp;&amp; chmod 600 ~/.ssh/authorized_keys &amp;&amp; rm ~/.ssh/id_rsa.pub.tmp\"\n</code></pre>"},{"location":"setup_qemu_ctrlx_works.html#start-a-ssh-session","title":"Start a ssh session","text":"<p>You can open a SSH connection (secure shell) by clicking the according link in the column SSH of ctrlX WORKS 'App Build Environments' view.</p> <p>If your preparations succeeded no password is needed otherwise enter boschrexroth</p> <p>Please regard instructions in chapter Important Install Scripts.</p>"},{"location":"setup_qemu_ctrlx_works.html#stop-an-app-build-environment","title":"Stop an App Build Environment","text":"<ul> <li>Click the Stop icon.</li> <li>If your public key id_rsa.pub is not contained in ~/.ssh/authorized_keys you will be asked for a password.</li> <li>If the login succeeded the poweroff command will be send - the environment will shut down safely.</li> </ul> <p>Important</p> <p>Do NOT stop the environment by clicking the close icon in the title bar of the console window! This can damage the file system of your environment.</p>"},{"location":"setup_qemu_ctrlx_works.html#change-an-app-build-environment","title":"Change an App Build Environment","text":"<p>If the environment has the State Offline a click of the Pencil icon opens the configuration page.</p> <p>Important</p> <p>Once created the parameters 'Storage location' and 'Use HTTP...' cannot be changed.</p>"},{"location":"setup_qemu_ctrlx_works.html#delete-an-app-build-environment","title":"Delete an App Build Environment","text":"<p>If the environment is Offline you can delete it by clicking the Waste Bin icon. The whole folder will be deleted.</p>"},{"location":"setup_qemu_ubuntu.html","title":"QEMU Virtual Machine","text":"<p>This chapter describes how to setup and run App Build Environments without using ctrlX WORKS.</p> <p>Remember ctrlX WORKS provides all necessary actions required to deal with App Build Environments.</p> <p>This is the recommended constellation:</p> <ul> <li> <p>Despite QEMU supports both Windows and Linux we are recommending to use a Windows host operating system .</p> </li> <li> <p>Host and guest machine should use CPU architecture amd64. Snaps for a arm64 targets are build via cross build.</p> </li> <li> <p>The following assumes that ctrlX AUTOMATION SDK has been installed in the /home/boschrexroth/ctrlx-automation-sdk  (or simplified ~/ctrlx-automation-sdk) directory.</p> </li> </ul>"},{"location":"setup_qemu_ubuntu.html#installation-on-windows-10-host","title":"Installation on Windows 10 Host","text":""},{"location":"setup_qemu_ubuntu.html#qemu-on-windows","title":"QEMU on Windows","text":"<p>Download and install the newest version of QEMU for Windows from https://qemu.weilnetz.de/w64/.</p> <p>Important</p> <p>Add the installation path of your qemu software to the system environment variable %PATH%.</p> <p>See How do I set or change the PATH system variable?</p>"},{"location":"setup_qemu_ubuntu.html#install-windows-hypervisor-platform","title":"Install Windows Hypervisor Platform","text":"<p>We recommend to install Windows Hypervisor Platform:</p> <ul> <li>Right click on the Windows button and select \u2018Apps and Features\u2019.</li> <li>Select Programs and Features on the right under related settings.</li> <li>Select Turn Windows Features on or off.</li> <li>Select Windows Hypervisor Platform - NOT Hyper-V.</li> <li>Close dialog with OK.</li> </ul> <p>This feature can also be installed via command line:</p> <ul> <li>Start cmd.exe as administrator (run as ...)</li> <li> <p>Enter</p> <p>dism /online /Enable-Feature /FeatureName:HypervisorPlatform /All</p> </li> </ul> <p>Hints:</p> <ul> <li>After enabling Windows Hypervisor Platform a system restart may be required.</li> <li>The feature Hyper-V is automatically disabled.</li> <li> <p>You can disable the feature with:</p> <p>dism /online /Disable-Feature /FeatureName:HypervisorPlatform</p> </li> <li> <p>If you use Virtual Box also please enable the internal Hyper-V option for each virtual machine.</p> </li> </ul>"},{"location":"setup_qemu_ubuntu.html#install-pxexe-as-local-proxy-server","title":"Install Px.exe as Local Proxy Server","text":"<p>See Use PX.exe as Local Proxy on a Windows Host.</p>"},{"location":"setup_qemu_ubuntu.html#installation-on-linux-host","title":"Installation on Linux Host","text":"<p>You have to install both QEMU and KVM on your host system. Therefor you can run this script:</p> <pre><code>~/ctrlx-automation-sdk/scripts/environment/install-qemu.sh\n</code></pre>"},{"location":"setup_qemu_ubuntu.html#running-the-qemu-virtual-machine","title":"Running the QEMU Virtual Machine","text":""},{"location":"setup_qemu_ubuntu.html#create-an-instance-of-a-qemu-virtual-machine","title":"Create an Instance of a QEMU Virtual Machine","text":"<p>Do following steps:</p> <ul> <li>Create a new folder (on a disk with enough free disk space)</li> <li>Copy the content of the SDK folder ~/ctrlx-automation-sdk/scripts/environment into your instance folder.</li> </ul> <p>Hint: You can download the folder from here</p> <p>~/ctrlx-automation-sdk/scripts/environment/</p>"},{"location":"setup_qemu_ubuntu.html#start-the-qemu-virtual-machine","title":"Start the QEMU Virtual Machine","text":"<p>To start the QEMU VM instance change to its installation folder and run one of these script files:</p> <ul> <li>__launch-amd64-noproxy (.bat, .sh) : If the VM has direct internet access</li> <li>__launch-amd64-proxy (.bat, .sh):    If the VM has to use a proxy server on the host computer</li> </ul> <p>The VM is started as console application, you can see the trace output.</p> <p>We recommend to not use this console directly because a lot of shell functions are not supported.</p> <p>During first boot a lot of software will be installed - so please be patient.</p> <p>If this process is finished the VM will shutdown. Just run the launch script to restart the VM.</p>"},{"location":"setup_qemu_ubuntu.html#network-connection-to-your-qemu-virtual-machine","title":"Network Connection to your QEMU Virtual Machine","text":"<p>From the point of view of your host computer, the VM does not have own network interface cards. Services running on the VM are available via port forwarding.</p> <p>This port forwarding is configured in the launch... script with one or more hostfwd= settings e.g.:</p> <pre><code>-netdev user,id=eth0,hostfwd=tcp::10022-:22\n</code></pre> <p>Here port 10022 of the host is forwarded to port 22 (SSH) of the VM. If port 10022 is used on the host the VM will not start. In this case please enter a free host port number in the launch script e.g. 20022.</p> <p>For forwarding further ports e.g. 502 (Modbus) just extend this line e.g.:</p> <pre><code>-netdev user,id=eth0,hostfwd=tcp::10022-:22,hostfwd=tcp::502-:502\n</code></pre> <p>Important</p> <p>From your host computer a SSH connection can be established using 127.0.0.1:10022</p> <p>During the first connection with Visual Studio Code enter: ssh -p 10022 boschrexroth@127.0.0.1 password is boschrexroth</p>"},{"location":"setup_qemu_ubuntu.html#shutdown","title":"Shutdown","text":"<p>It's very important to shutdown the QEMU VM properly. So initiate a shutdown e.g. with this command on your VM console:</p> <pre><code>sudo poweroff\n</code></pre>"},{"location":"setup_qemu_ubuntu.html#qemu-virtual-machine-networking","title":"QEMU Virtual Machine Networking","text":"<p>The QEMU software represents a virtual network between the host operating system and the virtual machine.</p> <p>Important</p> <p>This virtual network is only seen by the virtual machine NOT by the host operating system.</p> <p>Furthermore QEMU provides a gateway, a DNS and an optional SMB server for its VM.</p> <p>Per default this virtual network has the subnet 10.0.2.0/24 and from the perspective of the QEMU VM these IP addresses are assigned:</p> <ul> <li>10.0.2.15 IP address of the VM itself</li> <li>10.0.2.2  Gateway and host operating system</li> <li>10.0.2.3  DNS server</li> <li>10.0.2.4  SMB server</li> </ul> <p>For deeper information visit QEMU Documentation/Networking</p>"},{"location":"setup_qemu_ubuntu.html#troubleshooting-tips","title":"Troubleshooting, Tips","text":""},{"location":"setup_qemu_ubuntu.html#general","title":"General","text":"<p>Read error messages carefully, search in the internet for these messages and hints for troubleshooting.</p>"},{"location":"setup_qemu_ubuntu.html#performance","title":"Performance","text":"<p>Deactivate all other virtual machines on your host to avoid performance disadvantages.</p> <p>An emulated AARCH64 QEMU VM is slow - be patient.</p>"},{"location":"setup_qemu_ubuntu.html#httphttps-access","title":"http/https Access","text":"<p>Check the http/https access of your host to the internet - respectively to the Ubuntu sites e.g. with:</p> <pre><code>wget -p http://ports.ubuntu.com/ubuntu-ports\n</code></pre> <p>If failed check your DNS settings and server(s).</p>"},{"location":"setup_qemu_ubuntu.html#snap-store-status","title":"Snap Store Status","text":"<p>Check the Snap Store Status if snaps cannot be installed.</p>"},{"location":"setup_qemu_ubuntu.html#winscp-and-putty","title":"WinSCP and Putty","text":"<p>On your Windows host you can use WinSCP combined with PuTTy instead of the Windows ssh and scp.</p>"},{"location":"setup_ubuntu.html","title":"Native Ubuntu","text":""},{"location":"setup_ubuntu.html#introduction","title":"Introduction","text":"<p>You can use a bare-metal machine with an Ubuntu Desktop or Ubuntu Server operating system to develop apps with the ctrlX AUTOMATION SDK.</p> <p>The installation of the required packages, the ctrlX AUTOMATION SDK and some of the programming language installation scripts is equal to the procedure for a VirtualBox Virtual Machine.</p> <p>You can find the informations in VirtualBox Virtual Machine from chapter 'Setup Standard Packages' to the end of the document.</p>"},{"location":"setup_ubuntu.html#install-the-ctrlx-automation-sdk","title":"Install the ctrlX AUTOMATION SDK","text":"<p>See here Install Sources from github</p>"},{"location":"setup_windows_virtualbox_ubuntu.html","title":"VirtualBox Virtual Machine","text":"<p>This guide shows how to use an Ubuntu Desktop running in a virtual machine using the VirtualBox on a Windows 10 host system as a development environment to develop ctrlX AUTOMATION apps.</p>"},{"location":"setup_windows_virtualbox_ubuntu.html#prerequisites","title":"Prerequisites","text":"<ul> <li>Can only be installed on AMD64/Intel64 host computer systems.</li> <li>You need to have admin rights on your host to be able to install the software.</li> </ul>"},{"location":"setup_windows_virtualbox_ubuntu.html#install-virtualbox","title":"Install VirtualBox","text":"<p>The software can be downloaded from here: https://www.virtualbox.org/.</p>"},{"location":"setup_windows_virtualbox_ubuntu.html#setup-virtual-machine-and-install-ubuntu-desktop-2204-lts","title":"Setup Virtual Machine and Install Ubuntu Desktop 22.04 LTS","text":"<p>Download an iso-image from Ubuntu 22.04.2 LTS</p> <p>Create a virtual machine, select these settings:</p> <ul> <li>min 8 GB Ram</li> <li>min. 15 GB Disk, VDI Type</li> <li>all processors</li> <li>insert Ubuntu *.iso into virtual CD Drive</li> <li>Map free internet connection via network settings (Adapter 1, Bridged Adapter)</li> <li>Map real/virtual control via network settings (Adapter 2, Bridged Adapter)</li> </ul> <p>Start machine and follow installation instructions.</p> <p>Install Virtual Box GuestAdditions.</p> <p>Configure IP Address to connect to your control.</p>"},{"location":"setup_windows_virtualbox_ubuntu.html#running-the-virtual-machine","title":"Running the Virtual Machine","text":"<p>Start a SSH session and login into your virtual machine.</p>"},{"location":"setup_windows_virtualbox_ubuntu.html#setup-corporate-proxy-optional","title":"Setup Corporate Proxy (Optional)","text":"<p>If you are in a corporate environment, which uses a http/https-Proxy, then you may want to set the proxy configuration to be able to download software from within your VM.</p> <p>For this, you need to run a proxy on your Windows environment and redirect the distribution to this proxy running on localhost. If you are directly connected to a router or the internet, then this step can be skipped.</p> <p>A recommended proxy program to be used on your Windows host system is https://github.com/genotrance/px.</p> <p>To set the environment variable in the distribution use:</p> <pre><code>sudo nano /etc/environment\n</code></pre> <p>Add the following variables:</p> <pre><code>http_proxy=\"http://10.0.2.2:3128\"\nhttps_proxy=\"http://10.0.2.2:3128\"\nHTTP_PROXY=\"http://10.0.2.2:3128\"\nHTTPS_PROXY=\"http://10.0.2.2:3128\"\n</code></pre> <p>You need to set this configuration also for <code>wget</code>.</p> <pre><code>sudo nano /etc/wgetrc\n</code></pre> <p>Search for the http proxy settings and make sure you configure:</p> <pre><code>https_proxy = http://10.0.2.2:3128/\nhttp_proxy = http://10.0.2.2:3128/\nuse_proxy = on\n</code></pre> <p>You might want to update your distribution and install essential packages for development.</p> <pre><code>sudo apt update\nsudo apt upgrade\n</code></pre>"},{"location":"setup_windows_virtualbox_ubuntu.html#setup-standard-packages","title":"Setup Standard Packages","text":"<p>In QEMU based VMs created by ctrlX WORKS, required packages are installed automatically.</p> <p>Here you have to install them manually:</p> <ol> <li> <p>Open the according user-data-img file e.g. with Windows notepad. In the text part of this file you will find the section packages (here the first lines only):</p> <p>packages:     - zip     - unzip</p> </li> <li> <p>Copy the package list, remove the '-' character and create a comand line e.g.</p> <p>sudo apt-get install -y zip unzip ...</p> </li> </ol> <p>Important</p> <p>Install ALL listed packages.</p>"},{"location":"setup_windows_virtualbox_ubuntu.html#dependencies-for-crossbuild-multiarch","title":"Dependencies for Crossbuild (Multiarch)","text":"<p>Multiarch lets you install library packages from multiple architectures on the some machine. In our case we use the architectures amd64 and arm64.</p> <p>The according commands are also available in cloud-config.</p> <p>Therefor copy the commands under section runcmd: subtitle '# https://wiki.ubuntu.com/MultiarchSpec' and '# Qualify architecture'</p> <pre><code>sudo dpkg --add-architecture arm64\n...\n</code></pre> <p>Important</p> <p>Run ALL listed commands.</p> <p>Furthermore run:</p> <pre><code>sudo apt-get -y update\nsudo apt-get -y upgrade\nsudo apt-get -y install libsystemd-dev:arm64\nsudo apt-get -y install libsystemd-dev:amd64\nsudo apt-get -y install libssl-dev:amd64\nsudo apt-get -y install libssl-dev:arm64\nsudo apt-get -y install libzmq3-dev:amd64\nsudo apt-get -y install libzmq3-dev:arm64\n</code></pre>"},{"location":"setup_windows_virtualbox_ubuntu.html#important-install-scripts","title":"Important Install Scripts","text":"<p>In chapter Important Install Scripts all install scripts of a QEMU VM created by ctrlX WORKS are explained.</p> <p>These scripts can be copied from the file cloud-config.</p> <p>Open this file with a web browser by clicking the link, copy the according lines into new script files on your VM, set the x permission and run them.</p> <p>Each script file in cloud-config is identified with a comment e.g. # install-sdk.sh, skip the line <code>- content:</code> and copy all lines until <code># Create in /tmp ...</code></p> <p>Important</p> <p>Running install-sdk.sh is mandatory.</p>"},{"location":"ssh_connection.html","title":"Using SSH to Connect to a Virtual Machine","text":""},{"location":"ssh_connection.html#overview","title":"Overview","text":"<p>Regardless of whether you want to connect to a VM or a real machine, \"Secure Shell\" (SSH) is used.</p> <p>The SSH address of a virtual machine running with default port forwarding is localhost:10022 Here port 10022 of the host is forwarded to port 22 of the virtual machine (guest)).</p> <p>The address of real machine is IP:22 e.g. 192.168.1.1:22</p> <p>The most important SSH tools are available for Windows and Linux:</p> <ul> <li>ssh is secure shell</li> <li>scp is secure copy</li> </ul>"},{"location":"ssh_connection.html#public-key-authentication","title":"Public Key Authentication","text":"<p>Instead of user/password authentication, we recommend public key authentication. Here you have a privat key and a public key (text) file. The public key file is copied to the computer you want to connect to, the private key is secret.</p> <p>SSH tools are using you private key during a SSH connection instead of user/password.</p> <p>Creating a key pair and copy it to the remote computer is described here: What is SSH Public Key authentication?</p>"},{"location":"ssh_connection.html#port-specification-for-ssh-and-scp","title":"Port Specification for ssh and scp","text":"<p>Port 22 is the default port for a SSH connection. To communicate with a VM running with port forwarding you have to specify the port number e.g.</p> <ul> <li>scp -p 10022 ...</li> <li>scp -P 10022 ...</li> <li>ssh-copy-id -p 10022 ...</li> </ul> <p>Important</p> <p>scp expects it's option P in uppercase!</p>"},{"location":"ssh_connection.html#git-bash-for-windows-10-hosts","title":"Git Bash for Windows 10 Hosts","text":"<p>Because ssh-copy-id isn't available under Windows you can install Git for Windows which provides Git Bash.</p> <p>From a git bash session you can call ssh-copy-id as shown above.</p>"},{"location":"storage-extension.html","title":"Storage extension","text":"<p>Storage extension is a feature to extend the internal storage by an external media like \u03bcSD card or USB device. Storage extension was introduced with Device Admin 1.18.</p> <p>This storage is encrypted and bond to one ctrlX CORE, so it cannot be used to transfer data from one ctrlX CORE to another one. If a data transfer is required, please see documentation of Data exchange.</p> <p>Attention</p> <ul> <li>All data on the storage extension partition will be erased! Be sure you back up your data before.</li> <li>The partition will be formatted with ext4 and encrypted with dmcrypt.</li> <li>Each app has an own, exclusive area on the storage extension partition, no other app can access this location.</li> </ul>"},{"location":"storage-extension.html#requirements","title":"Requirements","text":"<p>To use the extended storage in your app, some changes are needed in your app. The minimum requirements are shown in the samples.</p> <p>The storage extension mount point must be added as a mount-control plug in the snapcraft.yaml. Additionally your app needs the mount-observe plug and a remove hook.</p> <p>And as the last step some modifications of the start script of your app are required.</p> <p>The storage extension parent for your app is mounted by the Device Admin. The location is <code>/writable/system-data/var/run/mnt/storage-extension/${SNAPCRAFT_PROJECT_NAME}</code>.</p>"},{"location":"storage-extension.html#development","title":"Development","text":"<p>Attention</p>"},{"location":"storage-extension.html#root-user-required","title":"Root user required","text":"<p>The storage extension plug is on the denylist. Therefore only signed apps can use storage extension. To avoid trouble during the development, a root user for the ctrlX is required and the denylist has to be empty.</p>"},{"location":"storage-extension.html#empty-the-denylist","title":"Empty the denylist","text":"<pre><code>    sudo -s\n    mkdir -p /etc/writable/integrity\n    echo [] &gt;/etc/writable/integrity/denylist.json\n    snap restart rexroth-deviceadminw.web\n</code></pre> <p>After clearing the denylist it's possible to test storage extension without signed apps.</p>"},{"location":"storage-extension.html#configuration","title":"Configuration","text":"<p>Some modifications in your app are required to use storage extension.</p>"},{"location":"storage-extension.html#snapcraftyaml","title":"Snapcraft.yaml","text":"<p>The storage extension plug is required in snapcraft.yaml. The type of the plug is mount-control, the necessary parameters are shown in the sample:</p>"},{"location":"storage-extension.html#example","title":"Example","text":"snapcraft.yaml<pre><code>name: storage-extension-sample\ntitle: Storage extension sample app\nbase: core20\nversion: 0.0.1\nsummary: Storage extension sample\ndescription: |\n    Storage extension sample\ngrade: stable\nconfinement: strict\n\nparts:\n    &lt;...&gt;\n    backup:\n        plugin: nil\n        source: backup\n        overrride-build: |\n        snapcraftctl build\n        mkdir -p $SNAPCRAFT_PART_INSTALL/meta\n        cp $SNAPCRAFT_PART_SRC/snapshots.yaml $SNAPCRAFT_PART_INSTALL/meta\n\nplugs:\n    storage-extension-mnt:\n        interface: mount-control\n        mount:\n            - what: /writable/system-data/var/run/mnt/storage-extension/${SNAPCRAFT_PROJECT_NAME}\n            where: $SNAP_COMMON/storage-extension/${SNAPCRAFT_PROJECT_NAME}\n            options:\n                - rw\n                - bind\n\napps:\n    sample:\n        command: bin/sample\n        plugs:\n            - storage-extension-mnt\n            - mount-observe\n</code></pre> <p>Remark: the variable <code>${SNAPCRAFT_PROJECT_NAME}</code> is a known variable by snapcraft and will be replaced with the project name (here: storage-extension-sample). So no modifications in this block is required! The variable <code>$SNAP_COMMON</code> is known in the snap context.</p> <p>Your app needs the plugs mount-observe and the defined storage extension plug (here: storage-extension-mnt). If one of the plugs are missing, your app won't run like expected.</p>"},{"location":"storage-extension.html#remove-hook","title":"Remove hook","text":"<p>There has to be a remove hook in your app. Otherwise, it's not possible to remove your app if a storage extension is available.</p> <p>To add the remove hook, the file <code>remove</code> has to be placed in the <code>snap/hooks</code> folder.</p> <p>Don't forget to mark the file as executable:</p> <pre><code>    chmod +x remove\n</code></pre> <p>Remove</p> <pre><code> snapctl umount $SNAP_COMMON/storage-extension/$SNAP_NAME\n</code></pre> <p>Remark: The variables <code>$SNAP_COMMON</code> and <code>$SNAP_NAME</code> are known in the snap context.</p>"},{"location":"storage-extension.html#app-start-script","title":"App start script","text":"<p>Before your app can start and use the storage extension, the storage extension mount must be done. Therefore, your start script has to mount the storage extension.</p>"},{"location":"storage-extension.html#example_1","title":"Example","text":"script.sh<pre><code>#!/usr/bin/env bash\n\n# check if storage extension is ready to use (prepared by Device Admin)\nmount | grep /var/snap/rexroth-deviceadmin/common/storage-extension\nif [ $? -ne 0 ]; then\n    # No storage extension detected - abort script\n    echo No storage extension found\n    exit 1\nfi\n\n# storage extension detected, mount for your app\nsnapctl mount -o rw,bind /writable/system-data/var/run/mnt/storage-extension/$SNAP_NAME $SNAP_COMMON/storage-extension/$SNAP_NAME\n\n$SNAP/your-app.sh\n</code></pre>"},{"location":"storage-extension.html#exclude-from-backup-support","title":"Exclude from backup support","text":"<p>All your data from the storage extension are added to the backup by default. You typically use the storage extension when you have increased memory requirements in your app. Therefore it is necessary to exclude the storage extension from the backup.</p> <p>This will be done by adding a \"part\" in your snapcraft.yaml and add a snapshots.yaml to the project.</p>"},{"location":"storage-extension.html#example_2","title":"Example","text":"snapshots.yaml<pre><code>exclude:\n    # Exclude storage-extension partition from backup\n    - $SNAP_COMMON/storage-extension/*\n</code></pre>"},{"location":"storage-extension.html#sample-app","title":"Sample app","text":"<p>This sample app ( storage-extension-sample ) is the minimum set to use storage extension. Feel free to add the content to your app.</p>"},{"location":"storage-extension.html#use-storage-extension","title":"Use storage extension","text":"<p>To use storage extension, mount the media with the option \"To extend system data\".</p> <p>Attention</p> <p>The partition will be formatted and encrypted. All data on the partition will be lost!</p> <p>After clicking \"continue\" the storage extension will be added to the system and the control will be rebooted.</p> <p>After the next reboot the storage extension will be available for the system.</p> <p>Each app has its own area, the path is <code>$SNAP_COMMON/storage-extension/&lt;app-name&gt;</code>.</p> <p>Remarks</p> <ul> <li>By pressing the remove safely button, you can remove the storage extension (this will be finished with a restart of the control).</li> <li> <p>Warning</p> Be careful: You cannot reuse the partition without formatting and encrypting it again. So all data will be lost! </li> <li>Only one partition can be used as storage-extension at one time</li> <li>Data on storage-extension is not part of backup/restore</li> <li>If necessary, you have to switch to service state to mount or unmount storage-extension partitions</li> </ul>"},{"location":"tpm2.html","title":"TPM2","text":""},{"location":"tpm2.html#introduction","title":"Introduction","text":"<p>The ctrlX CORE devices provide the capability to securely generate and store keys with a hardware security module, specifically a Trusted Platform Module 2.0 (TPM2).</p> <p>This TPM can be used additionally to Certificate Management described in Getting Started - Package Manifest.</p>"},{"location":"tpm2.html#connecting-apps-to-the-tpm2","title":"Connecting apps to the TPM2","text":"<p>The app.deviceadmin provides a socket interface, which allows to use the TPM2. Behind the scenes, there is a \"Access Broker/Ressource Manager\" working, managing concurrent sessions accessing the TPM2.</p> <p>Following steps are necessary to connect to TPM2 socket:</p> <p><ul> <li>Adapt your snapcraft.yaml</li> <ul> <li>Needed plugs</li> <ul> <li>tpm2-socket: Provides your snap with the tpm2.sock file.</li> <li>(Optional) system-configuration: Provides a file with environment variables for configuring your TSS, called \"envvars\".</li> </ul> <li>Provide your app with the plugs</li> </ul> <li>Use the TPM inside your application</li> <ul> <li>Compile the TSS as you need</li> <li>Source the envvars</li> <li>Use the TSS as usual ...</li> </ul> </ul></p> <p>More details on the Trusted Software Stack (TSS) below.</p>"},{"location":"tpm2.html#example-snapcraftyaml","title":"Example snapcraft.yaml","text":"<pre><code>plugs:\n  tpm2-socket:\n    interface: content\n    content: tpm2-socket\n    target: $SNAP_DATA/tpm2-socket\n  system-configuration:\n    interface: content\n    content: system-configuration\n    target: $SNAP_DATA/system-configuration\n\napps:\n  example-app:\n    [...]\n    plugs: [tpm2-socket, system-configuration, network]\n</code></pre> <p>See also the sample in samples-snap/tpm2-webserver</p>"},{"location":"tpm2.html#integration-with-certificate-manager","title":"Integration with Certificate Manager","text":"<p>If you provide the package-certificate slots, and use the appropriate directory structure, TPM2 usage perfectly integrates into Certificate Manager.</p>"},{"location":"tpm2.html#using-the-tpm2-inside-software","title":"Using the TPM2 inside software","text":"<p>After having everything in place, the usage of the TPM is straightforward. Instead of connecting to <code>/dev/tpmrm0</code>, use <code>$SNAP_DATA/tpm2-socket/tpm2.sock</code>. <code>envvars</code> provides you with everything needed, for example:</p> <pre><code>  export TPM2TOOLS_TCTI=\"cmd:nc -U $SNAP_DATA/tpm2-socket/tpm2.sock\"\n</code></pre>"},{"location":"tpm2.html#storage-root-key-srk","title":"Storage Root Key (SRK)","text":"<p>The SRK of the TPM is permanently stored at 0x81000001 provided by TPM2_SRK_PARENT environment variable.</p> <p>Note</p> <p>Although the SRK is stored in NVRAM of TPM, it cannot be guaranteed to be always present. It must be tolerable by your application, that the SRK was replaced by another key, or even is totally absent.</p> <p>Following two examples or snippets, how to generate the SRK with the correct Primary-Key-Template.</p> <pre><code>echo \"0000000: 0001\" | xxd -r - unique.dat\ndd if=/dev/zero bs=1 count=256 &gt;&gt; unique.dat\ntpm2_createprimary \\\n    --hierarchy=owner \\\n    --key-algorithm=rsa2048:aes128cfb \\\n    --hash-algorithm=sha256 \\\n    --key-context=prim.ctx \\\n    -a 'restricted|decrypt|fixedtpm|fixedparent|sensitivedataorigin|userwithauth|noda' \\\n    --unique-data=unique.dat\n</code></pre> <p>In Golang, use following template:</p> <pre><code>import \"github.com/google/go-tpm/tpm2\"\n\nvar DefaultSrkTemplate = tpm2.Public{\n        Type:       tpm2.AlgRSA,\n        NameAlg:    tpm2.AlgSHA256,\n        Attributes: tpm2.FlagFixedTPM | tpm2.FlagFixedParent | tpm2.FlagSensitiveDataOrigin | tpm2.FlagUserWithAuth | tpm2.FlagNoDA | tpm2.FlagRestricted | tpm2.FlagDecrypt,\n        AuthPolicy: nil,\n        RSAParameters: &amp;tpm2.RSAParams{\n            Symmetric: &amp;tpm2.SymScheme{\n                Alg:     tpm2.AlgAES,\n                KeyBits: 128,\n                Mode:    tpm2.AlgCFB,\n            },\n            Sign:        nil,\n            KeyBits:     2048,\n            ExponentRaw: 0,\n            ModulusRaw:  make([]byte, 256),\n        },\n    }\n</code></pre> <p>For further details for golang, please see the Golang example.</p>"},{"location":"tpm2.html#trusted-software-stack","title":"Trusted Software Stack","text":"<p>You will need some of the following parts of the TSS inside your snap:</p> <ul> <li>tpm2-tss https://github.com/tpm2-software/tpm2-tss</li> <li>tpm2-tools https://github.com/tpm2-software/tpm2-tools</li> <li>tpm2-tss-engine https://github.com/tpm2-software/tpm2-tss-engine</li> <li>tpm2-openssl https://github.com/tpm2-software/tpm2-openssl</li> </ul> <p>More information and more tools:</p> <ul> <li>https://tpm2-software.github.io/</li> <li>https://github.com/tpm2-software</li> </ul>"},{"location":"tpm2.html#usage-with-openssl","title":"Usage with OpenSSL","text":"<p>tpm2-tss-engine as an example, setting first the environment variables:</p> <pre><code>export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$SNAP/usr/lib/x86_64-linux-gnu/engines-1.1\nexport OPENSSL_ENGINES=$SNAP/usr/lib/x86_64-linux-gnu/engines-1.1\n</code></pre> <p>You can then use OpenSSL option <code>-engine tpm2tss</code> together with files generated by <code>tpm2tss-genkey</code>. Existing keys from tpm2-tools or the Certificate Manager can be converted:</p> <pre><code>tpm2tss-genkey -P $TPM2_SRK_PARENT -u key.pub -r key.priv key.tpm2tss\n</code></pre>"},{"location":"tpm2.html#other-languages","title":"Other languages","text":"<p>Useful projects:</p> <p>Golang</p> <ul> <li>https://github.com/google/go-tpm</li> <li>https://github.com/google/go-tpm-tools</li> <li>https://github.com/salrashid123/signer</li> </ul> <p>Attention</p> <p>If using go-tpm, you need to implement your own functions for opening, reading and writing the TPM socket, as the integrated functions close and reopen the socket with every read/write sequence. See: https://github.com/google/go-tpm/blob/master/tpmutil/run_other.go</p> <p>Python</p> <ul> <li>https://github.com/tpm2-software/tpm2-pytss</li> </ul>"},{"location":"vscode.html","title":"Setup Visual Studio Code to work with the ctrlX AUTOMATION SDK","text":"<p>As Integrated Development Environment (IDE) we recommend to use Visual Studio Code.</p> <p>So-called \"extensions\" expand the functionality of this IDE, so that you have all the functions available that are required for the development of ctrlX applications.</p> <p>This chapter describes how to install Visual Studio Code and required extensions.</p>"},{"location":"vscode.html#install-visual-studio-code","title":"Install Visual Studio Code","text":"<p>The installation of Visual Studio Code is described here https://code.visualstudio.com.</p> <p>Important</p> <p>Visual Studio Code is installed on your workstation computer.</p>"},{"location":"vscode.html#install-visual-studio-code-extensions","title":"Install Visual Studio Code Extensions","text":"<p>Visual Studio Code is a framework with a lot of plugins - so called extensions. A set of extensions has to be installed to work with the ctrlX AUTOMATION SDK.</p> <p>How to install extensions is described here https://code.visualstudio.com/docs/editor/extension-marketplace</p> <p>Important</p> <p>An extension can be installed LOCAL (=on your workstation computer) and/or REMOTE (=on your remote virtual/real machine).</p>"},{"location":"vscode.html#extensions-for-remote-connections","title":"Extensions for Remote Connections","text":"<p>If your workstation computer and your App Build Environment is NOT the same, you have to install the 'Remote SSH' extension to establish remote connections (SSH). This extension has to be installed LOCAL.</p>"},{"location":"vscode.html#extensions-to-work-with-the-sdk-development-environment","title":"Extensions to Work with the SDK Development Environment","text":"<p>In order to work with the sample projects of the SDK you will need to install additional extensions into your build environment. This can be done easily from within Visual Studio Code as soon as you open a project folder.</p> <p>Which extension you need depends from the kind of project you are working with. Visual Studio Code scans the files in the folder and makes proposals.</p> <p>Important</p> <p>If your build environment is not your workstation computer select the \"Install in ...\" option.</p> <p>Here's an example: Install in SSH</p> <p></p>"},{"location":"working-with-app-builder-envs.html","title":"Working with App Build Environments (QEMU VMs)","text":"<p>This document describes how to work with App Build Environments (QEMU based VMs).</p>"},{"location":"working-with-app-builder-envs.html#best-practice-working-with-app-build-environments","title":"Best Practice working with App Build Environments","text":"<p>We recommend to use App Build Environments (QEMU VMs) as follows:</p> <ol> <li>Create a new App Build Environment with ctrlX WORKS and start it (the Ubuntu Server Cloud Image is automatically downloaded).</li> <li>We recommend to work with the free and open source distributed version control system git: Create a repository for your project and clone it into your App Buiulder Environment.</li> <li>Create a new branch for your working package.</li> <li>Do your work within this branch, commit and push your changes as often as it makes sense.</li> <li>If your work is done and all changes are pushed remove your App Build Environment.</li> </ol> <p>Working in such a manner ensures that you are always working with the latest software components and avoids problems with the file size of your App Build Environment. Furthermore creating backups is superfluous.</p> <p>For more information about file handling regarding the App Build Environment see ctrlX App Build Environment Ubuntu 22.04.</p>"},{"location":"samples-cpp/index.html","title":"Samples C/C++","text":""},{"location":"samples-cpp/index.html#prerequisites","title":"Prerequisites","text":"<ul> <li>ctrlX WORKS</li> <li>ctrlX AUTOMATION App Build Environment</li> <li>ctrlX AUTOMATION SDK installed in the App Build Environment</li> <li> <p>ctrlX CORE<sup>virtual</sup> or ctrlX CORE</p> </li> <li> <p>Visual Studio Code installed on your host computer</p> </li> </ul> <p>Visual Studio Code extensions (Install in SSH):</p> <ul> <li>C/C++ for Visual Studio Code (Microsoft)</li> <li>C/C++ Extension Pack (Microsoft)</li> <li>CMake Tools (Microsoft)</li> </ul>"},{"location":"samples-cpp/index.html#find-out-the-supported-samples","title":"Find out the supported samples","text":""},{"location":"samples-cpp/index.html#basic-samples","title":"Basic Samples","text":"<ul> <li>Hello World recommendation -&gt; start with this example</li> <li>Hello PLC</li> <li>ctrlX Data Layer Provider Simple</li> <li>ctrlX Data Layer Provider Subscription</li> <li>ctrlX Data Layer Client Simple</li> <li>ctrlX Data Layer Client Subscription</li> <li>Diagnostics Logbook</li> <li>ctrlX Data Layer Diagnosis</li> </ul>"},{"location":"samples-cpp/index.html#advanced-samples","title":"Advanced Samples","text":"<ul> <li>ctrlX Data Layer EtherCAT I/O's</li> <li>ctrlX Data Layer Shared Memory</li> <li>ctrlX Data Layer Provider All Data Types</li> <li>ctrlX Data Layer Client All Data Types</li> </ul>"},{"location":"samples-cpp/index.html#debug-and-run","title":"Debug and Run","text":"<ol> <li>Build the executable via cmake plugin.</li> <li>Launch the app with the debugger attached by pressing F5.</li> </ol>"},{"location":"samples-cpp/index.html#build-and-install","title":"Build and Install","text":"<ul> <li>Launch Visual Studio Code as your IDE</li> <li>If the IDE is started remote connect via Remote Explorer extension to your builder environment (SSH target)</li> <li>Ensure that Visual Studio Code extensions \"C/C++ Extension Pack\" and \"CMake Tools\" are installed in your SSH target.</li> <li>Open the folder of the desired cpp sample under  <code>samples-cpp/</code></li> </ul>"},{"location":"samples-cpp/index.html#build-a-snap","title":"Build a Snap","text":"<p>See Samples Overview</p> <p>Important: Before building an arm64 snap run script <code>public/scripts/environment/scripts/install-cpp-aarch64-libs.sh</code> once!</p>"},{"location":"samples-cpp/index.html#create-an-executable-for-debugging","title":"Create an Executable for Debugging","text":"<p>Select the CMake symbol in the sidebar, click '...' at the top of the explorer window and select 'Clean Reconfigure All Projects'.</p> <p>Then make these settings in the status bar (blue area) :</p> <ul> <li>CMake (Current build variant): Select 'Debug'</li> <li>Active kit: Select 'GCC ... x86...'</li> <li>Select 'x64...' as build target</li> </ul> <p>Click Build and observe the progress in the output window - the build process should finish without errors (exit code 0).</p> <p>Now the executable for debugging is available in the subdirectory: generated/ubuntu22-gcc-x64/Debug/</p> <p>To start debugging select 'Run and Debug' in the side bar, select 'x64...' as launch configuration an press F5 (or green start button).</p> <p>The executable will be started and the debugger will set automatically a breakpoint at the beginning of the main() function.</p>"},{"location":"samples-cpp/index.html#troubleshooting","title":"Troubleshooting","text":"<p>All automatically created files are located in subfolders <code>build</code> and <code>generated</code>.  </p> <p>If there are unclear messages during the build process, it might help to delete the folders <code>build</code> and <code>generated</code> and restart the build process.</p>"},{"location":"samples-cpp/index.html#support","title":"Support","text":"<p>If you've found an error in these sample, please file an issue</p> <p>If you've any questions visit the ctrlX AUTOMATION Community</p>"},{"location":"samples-cpp/index.html#official-documentation","title":"Official Documentation","text":"<p>https://docs.automation.boschrexroth.com/</p>"},{"location":"samples-cpp/datalayer.client.alldata/index.html","title":"README datalayer.client.alldata","text":""},{"location":"samples-cpp/datalayer.client.alldata/index.html#introduction","title":"Introduction","text":"<p>This sample app performs ctrlX Data Layer operations in cpp.</p>"},{"location":"samples-cpp/datalayer.client.alldata/index.html#prerequisites","title":"Prerequisites","text":"<p>The sample requires that the app datalayer.provider.alldata is running in the SDK build environment or as snap on the crlX CORE.</p>"},{"location":"samples-cpp/datalayer.client.alldata/index.html#function-description","title":"Function Description","text":"<p>The app demonstrates how values of existing nodes of the ctrlX Data Layer can be accessed.</p>"},{"location":"samples-cpp/datalayer.client.alldata/index.html#implementation-description","title":"Implementation Description","text":"<p>ctrlx_datalayer_helper.h Cpontains helper methods for creating ctrlX Datalayer Client and/or Provider instances.</p> <p>datalayerclient.cpp und datalayerclient.h are defining a class which manages the ctrlX Data Layer client access:</p> <ul> <li>Starting/stopping the ctrlX Data Layer access</li> <li>Access of ctrlX Data Layer nodes of different data type</li> <li>Callback methods for ctrlX Data Layer access</li> </ul> <p>In main.cpp an endless loop is running:</p> <ul> <li>An instance of the class DataLayerClient is created</li> <li>The instance is called to do ctrlX Data Layer access</li> <li>The instance is deleted</li> <li>Sleep some time</li> </ul>"},{"location":"samples-cpp/datalayer.client.alldata/index.html#debug-and-run","title":"Debug and Run","text":"<ol> <li>Build the executable via cmake plugin.</li> <li>Launch the app with the debugger attached by pressing F5.</li> </ol>"},{"location":"samples-cpp/datalayer.client.alldata/index.html#build-and-install-the-snap","title":"Build and Install the Snap","text":"<p>Build and install the snap like described here.</p>"},{"location":"samples-cpp/datalayer.client.alldata/index.html#test-the-snap","title":"Test the Snap","text":"<ul> <li>Open a SSH connection to your ctrlX CORE</li> <li>Check trace output: <code>sudo snap logs -f sdk-cpp-client-alldata</code></li> </ul>"},{"location":"samples-cpp/datalayer.client.alldata/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"samples-cpp/datalayer.client.simple/index.html","title":"README datalayer.client.simple","text":""},{"location":"samples-cpp/datalayer.client.simple/index.html#introduction","title":"Introduction","text":"<p>The sample app reads the values of some ctrlX Data Layer nodes of a ctrlX CORE.</p>"},{"location":"samples-cpp/datalayer.client.simple/index.html#prerequisite","title":"Prerequisite","text":"<p>A running ctrlX WORKS App Build Environment like described here</p>"},{"location":"samples-cpp/datalayer.client.simple/index.html#function-description","title":"Function Description","text":"<p>The app demonstrates how values of the ctrlX Data Layer nodes can be read.</p>"},{"location":"samples-cpp/datalayer.client.simple/index.html#implementation-description","title":"Implementation Description","text":"<p>In main.cpp the ctrlX Data Layer system is started and a client connection is established.</p> <p>Then an endless loop is running:</p> <ul> <li>Some ctrlX Data Layer values are read and their values are printed.</li> <li>After a sleep of the loop is repeated.</li> </ul> <p>The loop ends and the main method exits when the ctrlX Data Layer client connection was broken.</p> <p>With the help of the entry 'restart-condition: always' in snapcraft.yaml the snap is automatically restarted.</p>"},{"location":"samples-cpp/datalayer.client.simple/index.html#debug-and-run","title":"Debug and Run","text":"<ol> <li>Build the executable via cmake plugin.</li> <li>Launch the app with the debugger attached by pressing F5.</li> </ol> <p>Prerequisite to debug is the VS Code extension: C/C++.</p>"},{"location":"samples-cpp/datalayer.client.simple/index.html#build-and-install-the-snap","title":"Build and Install the Snap","text":"<p>Build and install the snap like described here.</p>"},{"location":"samples-cpp/datalayer.client.simple/index.html#test-the-snap-running-on-a-ctrlx-core","title":"Test the Snap running on a ctrlX CORE","text":"<p>Only if SSH access is available!</p> <ul> <li>Install the snap</li> <li>Open a SSH connection to your ctrlX CORE</li> <li>Check trace output: <code>sudo snap logs -f sdk-cpp-client-simple</code></li> </ul>"},{"location":"samples-cpp/datalayer.client.simple/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"samples-cpp/datalayer.client.sub/index.html","title":"README datalayer.client.sub","text":"<p>This sample app demonstrates how ctrlX Data Layer nodes are subscribed in single and multi mode.</p>"},{"location":"samples-cpp/datalayer.client.sub/index.html#functional-description","title":"Functional Description","text":"<p>The sample app subscribes to two different ctrlX Data Layer nodes:     - framework/metrics/system/cpu-utilisation-percent     - framework/metrics/system/memavailable-mb If a value changes the app writes it to the terminal and also the size, type, address and timestamp.</p>"},{"location":"samples-cpp/datalayer.client.sub/index.html#implementation-description","title":"Implementation Description","text":"<p>ctrlx_datalayer_helper.h contains helper functions the create ctrlX Data Layer provider and/or client instances.</p> <p>In datalayerclientsub.cpp the class DataLayerClientSub is implemented. Here all activities for the ctrlX Data Layer access are handled.</p> <p>In main.cpp the main function first creates an instance of DataLayerClientSub and then runs an endless loop. If an error occurs the application is exited.</p> <p>Running as a snap in the ctrlX CORE it will be restarted by snapd because of the <code>restart-condition: always</code> entry in snap/snapcraft.yaml.</p>"},{"location":"samples-cpp/datalayer.client.sub/index.html#debug-and-run","title":"Debug and Run","text":"<ol> <li>Build the executable via cmake plugin.</li> <li>Launch the app with the debugger attached by pressing F5.</li> </ol>"},{"location":"samples-cpp/datalayer.client.sub/index.html#build-and-install-the-snap","title":"Build and Install the Snap","text":"<p>Build and install the snap like described here.</p>"},{"location":"samples-cpp/datalayer.client.sub/index.html#test-the-snap","title":"Test the Snap","text":"<ul> <li>Open a SSH connection to your ctrlX CORE</li> <li>Check trace output: <code>sudo snap logs -f sdk-cpp-sub</code></li> </ul>"},{"location":"samples-cpp/datalayer.client.sub/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"samples-cpp/datalayer.diagnosis/index.html","title":"ctrlX Data Layer Diagnosis","text":"<p>This sample app uses some ctrlX Data Layer addresses to handle with diagnostics.</p>"},{"location":"samples-cpp/datalayer.diagnosis/index.html#introduction","title":"Introduction","text":"<p>It demonstrates how to</p> <ul> <li>register and unregister diagnostics</li> <li>subscribe to specific diagnostic events</li> <li>set and reset diagnostic logs</li> <li>confirm diagnostic errors</li> <li>get the highest priority pending log</li> <li>get the actual pending list of errors and warnings</li> <li>get diagnostic texts from diagnostic numbers</li> </ul>"},{"location":"samples-cpp/datalayer.diagnosis/index.html#prerequisites","title":"Prerequisites","text":"<ul> <li>Installed app rexroth-automationcore</li> </ul>"},{"location":"samples-cpp/datalayer.diagnosis/index.html#debug-and-run","title":"Debug and Run","text":"<ol> <li>Build the executable via cmake plugin.</li> <li>Launch the app with the debugger attached by pressing F5.</li> </ol>"},{"location":"samples-cpp/datalayer.diagnosis/index.html#build-and-install-the-snap","title":"Build and Install the Snap","text":"<p>Build and install the snap like described here.</p>"},{"location":"samples-cpp/datalayer.diagnosis/index.html#test-the-snap","title":"Test the Snap","text":"<ul> <li>Open the web interface of your ctrlX CORE</li> <li>Check output in the web interface</li> </ul>"},{"location":"samples-cpp/datalayer.diagnosis/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"samples-cpp/datalayer.ecat.io/index.html","title":"data Layer EtherCAT IO","text":"<p>This sample app toggles some Fieldbus I/O's.</p>"},{"location":"samples-cpp/datalayer.ecat.io/index.html#introduction","title":"Introduction","text":"<p>It demonstrate how it is possible to read inputs and write outputs.</p>"},{"location":"samples-cpp/datalayer.ecat.io/index.html#prerequisites-for-the-ctrlx-core","title":"Prerequisites for the ctrlX CORE","text":"<ul> <li>ctrlX EtherCAT Master App</li> <li>ctrlX I/O Engineering</li> <li>S20-EC-BK</li> <li>S20-DI-16</li> <li>S20-DO-16</li> </ul>"},{"location":"samples-cpp/datalayer.ecat.io/index.html#debug-and-run","title":"Debug and Run","text":"<ol> <li>Build the executable via build-debug.sh (or cmake plugin).</li> <li>Launch the app with the debugger attached by pressing F5.</li> </ol>"},{"location":"samples-cpp/datalayer.ecat.io/index.html#build-and-install-the-snap","title":"Build and Install the Snap","text":"<p>Build and install the snap like described here.</p>"},{"location":"samples-cpp/datalayer.ecat.io/index.html#test-the-snap","title":"Test the Snap","text":"<ul> <li>Open the web interface of your ctrlX CORE</li> <li>Check output in the web interface</li> </ul>"},{"location":"samples-cpp/datalayer.ecat.io/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"samples-cpp/datalayer.provider.alldata/index.html","title":"Sample app sdk-cpp-provider-alldata","text":"<p>This cpp sample app is a ctrlX Data Layer Provider which can be used in two wayes:</p> <ol> <li>As a sample how in cpp variables of different data types can be involved into ctrlX Data Layer Variants.</li> <li>As a test ctrlX Data Layer Provider during development of a ctrlX Data Layer Client. These client apps can be written in one of the SDK supported languages or can be Node-RED or REST API applications.</li> </ol>"},{"location":"samples-cpp/datalayer.provider.alldata/index.html#introduction","title":"Introduction","text":"<p>Two ctrlX Data Layer branches are provided: <code>sdk/cpp/datalayer/provider/alldata/dynamic</code> and <code>sdk/cpp/datalayer/provider/alldata/static</code>.</p> <p>The branches are providing sub nodes for most of the ctrlX Data Layer Variant types.</p> <p>The static branch and its nodes cannot be changed by ctrlX Data Layer Client interactions. It can be used to read data and to test the min and max data values within the own application.</p> <p>The dynamic branch however is changeable. Nodes can be written or deleted or created by clients. Furthermore new nodes or whole sub branches can be created.</p>"},{"location":"samples-cpp/datalayer.provider.alldata/index.html#implementation","title":"Implementation","text":""},{"location":"samples-cpp/datalayer.provider.alldata/index.html#maincpp","title":"main.cpp","text":"<p>The main function establishes the ctrlX Data Layer connection. If the app is running within a snap on the ctrlX a IPC connection is used automatically. This connection doesn't need user credentials.</p> <p>For a debugging session or in remote mode a tcp connection which need user credentials and an address is used. Therefore in the code user, password and address are predefined with default values.</p>"},{"location":"samples-cpp/datalayer.provider.alldata/index.html#datacontainer-class","title":"DataContainer Class","text":"<p>DataContainer is a simple data container class representing the data and error state of a node seen in the dynamic and/or static branch.</p>"},{"location":"samples-cpp/datalayer.provider.alldata/index.html#providernodealldata-class","title":"ProviderNodeAllData Class","text":"<p>ProviderNodeAllData is a IProviderNode implementation and provides a ctrlX Data Layer sub branch. The sub branch can be static or dynamic. Static means that the values of the nodes and the structure of he branch  cannot be changed by ctrlX Data Layer clients. In a dynamic branch everything can be changed.</p> <p>All nodes of such a sub branch are 'virtual' because the node behind is always the same ProviderNodeAllData instance. Therefore it registers itself with a wildcard address (e.g. .../dynamic/**) at the ctrlX Data Layer. The 'seen' nodes are DataContainer instances managed in a list and accessed by the on... callback functions of the ProviderNodeAllData class.</p>"},{"location":"samples-cpp/datalayer.provider.alldata/index.html#debug-and-run-within-the-app-build-environment","title":"Debug and Run within the App Build Environment","text":"<ol> <li>Build the executable via cmake plugin.</li> <li>Launch the app with the debugger attached by pressing F5.</li> </ol>"},{"location":"samples-cpp/datalayer.provider.alldata/index.html#build-and-install-the-snap","title":"Build and Install the Snap","text":"<p>Build and install the snap like described here.</p>"},{"location":"samples-cpp/datalayer.provider.alldata/index.html#test-the-snap","title":"Test the Snap","text":"<ul> <li>Open the web interface of your ctrlX CORE</li> <li>Check output in the web interface</li> </ul>"},{"location":"samples-cpp/datalayer.provider.alldata/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"samples-cpp/datalayer.provider.simple/index.html","title":"README datalayer.provider.simple","text":""},{"location":"samples-cpp/datalayer.provider.simple/index.html#introduction","title":"Introduction","text":"<p>This sample app creates a new ctrlX Data Layer folder 'sdk/cpp/datalayer/provider/simple/' with nodes of different datatypes.</p>"},{"location":"samples-cpp/datalayer.provider.simple/index.html#functional-description","title":"Functional Description","text":"<p>It demonstrates how you can create ctrlX Data Layer nodes with different data types. These nodes can be accessed by any ctrlX Data Layer client app. The metadata of the nodes are provides by a metadata database.</p>"},{"location":"samples-cpp/datalayer.provider.simple/index.html#implementation-description","title":"Implementation Description","text":"<p>All actions are implemented in main.cpp:</p> <ul> <li>Start ctrlX Data Layer system</li> <li>Connect as ctrlX Data Layer provider</li> <li>Register a flatbuffers schema</li> <li>Register metadata database</li> <li>Register several ctrlX Data Layer nodes: sdk/cpp/datalayer/provider/simple/</li> <li>Endless loop where the ctrlX Data Layer connection is observed</li> <li>Shutdown if the ctrlX Data Layer connection is broken</li> </ul> <p>Important</p> <p>If the app is running as snap on a ctrlX CORE it will be restarted if it has exited on error.</p>"},{"location":"samples-cpp/datalayer.provider.simple/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"samples-cpp/datalayer.provider.sub/index.html","title":"README datalayer.provider.sub","text":""},{"location":"samples-cpp/datalayer.provider.sub/index.html#introduction","title":"Introduction","text":"<p>This sample provider app creates a new ctrlX Data Layer folder 'sdk/cpp/datalayer/provider/sub/' and handles all client subscriptions selfs.</p>"},{"location":"samples-cpp/datalayer.provider.sub/index.html#functional-description","title":"Functional Description","text":"<p>It demonstrates how you can create ctrlX Data Layer nodes and handle all client subscriptions selfs. These nodes can be accessed by any ctrlX Data Layer client app.</p>"},{"location":"samples-cpp/datalayer.provider.sub/index.html#implementation-description","title":"Implementation Description","text":"<p>All actions are implemented in src/provider/*.cpp:</p> <ul> <li>Start ctrlX Data Layer system</li> <li>Connect as ctrlX Data Layer provider</li> <li>Register several ctrlX Data Layer nodes: sdk/cpp/datalayer/provider/sub/</li> <li>Endless loop where the ctrlX Data Layer connection is observed</li> <li>Shutdown if the ctrlX Data Layer connection is broken</li> </ul> <p>Important</p> <p>If the app is running as snap on a ctrlX CORE it will be restarted if it has exited on error.</p>"},{"location":"samples-cpp/datalayer.provider.sub/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"samples-cpp/datalayer.sharedmemory/index.html","title":"README sdk.cpp.datalayer.sharedmemory","text":""},{"location":"samples-cpp/datalayer.sharedmemory/index.html#introduction","title":"Introduction","text":"<p>This sample project shows how shared memory is used for data exchange between two applications.</p> <p>Therefor the features of the ctrlX Data Layer are used.</p> <p>Normally realtime applications (Celix bundles) are using sharded memory for data exchange, but non realtime apps are also able to use it - like our two executables.</p> <p>Important</p> <p>Executables using shared memory for data exchange have to run within the same environment (ctrlX CORE or App Builder Environment). Shared memory over a TCP connection is NOT possible.</p>"},{"location":"samples-cpp/datalayer.sharedmemory/index.html#function-description","title":"Function Description","text":"<p>When the user has written outputs once, the owner will start copying from output to input.</p> <ul> <li>The owner executable provides two shared memory areas.</li> <li>From the perspective of the user executable their names are 'input' and 'output'.</li> <li>The user reads the input data, increments the values and writes them to the output area.</li> <li>The owner copies the changed values to the input area.</li> <li>Then again the user reads and increases them.</li> <li>When the numerical value has reached 225, the user app sets it back to 1.</li> </ul> <p>If the input values are 0 this indicates that the user had no access - this is an error situation.</p>"},{"location":"samples-cpp/datalayer.sharedmemory/index.html#implementation","title":"Implementation","text":"<p>main_owner.cpp implements the owner app and main_user.cpp the user app.</p>"},{"location":"samples-cpp/datalayer.sharedmemory/index.html#main_ownercpp","title":"main_owner.cpp","text":"<p>If the  executable is running in the App Builder Environment it has to start the ctrlX Data Layer system with the parameter <code>boStartBroker=true</code>. In this case the ctrlX Data Layer broker which handles the shared memory features is started also within the App Builder Environment.</p> <p>Running on the ctrlX CORE the owner has to start the ctrlX Data Layer system with the parameter <code>boStartBroker=false</code> because the ctrlX Data Layer broker has already been started by the rexroth-automationcore snap.</p> <p>Because shared memory is used, the ctrlX Data Layer (and it's broker) must run on the same environment. Accordingly, the provider connection string must always be DL_IPC (ipc://).</p> <p>After connecting to the ctrlX Data Layer shared memories for input and output are created and both fitted with the same memory map. The memory map is internally a Flatbuffers describing the data structure of the shared memory.</p> <p>After the values of the shared memory are set to 0 the owner apps waits in an endless loop for our user app to read and change the values.</p>"},{"location":"samples-cpp/datalayer.sharedmemory/index.html#main_usercpp","title":"main_user.cpp","text":"<ul> <li> <p>The user app starts the ctrlX Data Layer system always with <code>boStartBroker=false</code>. For the access of shared memory provided by an other process the user app does not require a ctrlX Data Layer client connection.</p> </li> <li> <p>The user tries to read the memory map of the input area. This is done in a loop until it succeeds.</p> </li> <li> <p>In an endless loop all values of the input area are read, incremented and written to the output area.</p> </li> <li> <p>The value is changed from 255 to 1 - 0 is skipped.</p> </li> </ul>"},{"location":"samples-cpp/datalayer.sharedmemory/index.html#debug-and-run","title":"Debug and Run","text":"<ol> <li>Build the executable via cmake plugin.</li> <li>Launch the app with the debugger attached by pressing F5.</li> </ol>"},{"location":"samples-cpp/datalayer.sharedmemory/index.html#build-and-install-the-snap","title":"Build and Install the Snap","text":"<p>Build and install the snap like described here.</p> <p>To use shared memory in the restricted snap environment of the ctrlX CORE our snap has to be connected to the datalayer-shm slot provided by the snap rexroth-automation-core snap.</p> <p>Unfortunately for unsigned snaps this is not done automatically during the ctrlX snap installation.</p> <p>As a workaround this has to be done manually. Therefor open a ssh connection to the ctrlX and enter:</p> <pre><code>sudo snap connect sdk-cpp-sharedmemory:datalayer-shm rexroth-automationcore:datalayer-shm\n</code></pre>"},{"location":"samples-cpp/datalayer.sharedmemory/index.html#test-the-snap","title":"Test the Snap","text":"<ul> <li>Open the web interface of your ctrlX CORE</li> <li>Select Settings --&gt; ctrlX Data Layer</li> <li>Select the node sdk/cpp/datalayer/sharedmemory/input</li> <li>The values in the byte array should be changed - AND NEVER be 0. This can be used by a test criterion.</li> </ul>"},{"location":"samples-cpp/datalayer.sharedmemory/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"samples-cpp/diagnostics.logbook/index.html","title":"README","text":"<p>The sample App diaglogbook demonstates how messages are sent to journald and the CtrlX Diagnostics Logbook.</p>"},{"location":"samples-cpp/diagnostics.logbook/index.html#the-using-of-linux-kernel-log-levels","title":"The using of Linux Kernel  Log Levels","text":"<p>We recommend to use Linux log levels to define the severity of a log message.</p> <p>There are eight log levels defined by the Linux kernel:</p> <ol> <li>EMERGENCY    The system is unusable (and will be shut down)</li> <li>ALERT        There is a severe error, action must be taken immediately</li> <li>CRITICAL     There is a critical error</li> <li>ERROR  A job was aborted in case of an error</li> <li>WARNING     There is an abnormal condition but the actual job can be finished</li> <li>NOTICE     There is a normal but significant condition</li> <li>INFO         A messages informs about an internal state</li> <li>DEBUG     Message shows details regarding program flow or results</li> </ol> <p>Be carefull with level EMERGENCY: Messages with this level are sent to all consoles!</p>"},{"location":"samples-cpp/diagnostics.logbook/index.html#debug-and-run","title":"Debug and Run","text":"<ol> <li>Build the executable via cmake plugin.</li> <li>Launch the app with the debugger attached by pressing F5.</li> </ol>"},{"location":"samples-cpp/diagnostics.logbook/index.html#build-and-install-the-snap","title":"Build and Install the Snap","text":"<p>Build and install the snap like described here.</p>"},{"location":"samples-cpp/diagnostics.logbook/index.html#test-the-snap","title":"Test the Snap","text":"<ul> <li>Open the web interface of your ctrlX CORE</li> <li>Check the output of the diagnosis logbook</li> </ul>"},{"location":"samples-cpp/diagnostics.logbook/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"samples-cpp/hello.plc/index.html","title":"README hello.plc","text":""},{"location":"samples-cpp/hello.plc/index.html#introduction","title":"Introduction","text":"<p>This sample project shows the ctrlX Data Layer access to ctrlX PLC variables of a ctrlX CORE or ctrlX CORE<sup>virtual</sup>.</p>"},{"location":"samples-cpp/hello.plc/index.html#prerequisites","title":"Prerequisites","text":"<ul> <li>ctrlX WORKS with <code>ctrlX PLC Engineering</code> installed.</li> <li>ctrlX CORE with app PLC installed.</li> <li>IMPORTANT: Do not use this project in a control that is in production or in which the PLC program or its variables must not be changed.</li> </ul>"},{"location":"samples-cpp/hello.plc/index.html#function-description","title":"Function Description","text":"<p>The app browses all PLC variables mapped to the ctrlX Data Layer.</p> <p>If the attached app 'hello_plc_application' has been installed, its variables will be overwritten:</p> <ul> <li>\"HelloDeveloper\" is written to each variable of type STRING.</li> <li>\"1337\" is written to each variable of type INT16 (ctrlX-Plc: INT).</li> <li>\"0.815f\" is written in each variable of type FLOAT32 (ctrlX-Plc: REAL).</li> </ul> <p>All variables with another data type are ignored.</p>"},{"location":"samples-cpp/hello.plc/index.html#debug-and-run","title":"Debug and Run","text":"<ol> <li>Build the executable via cmake plugin.</li> <li>Launch the app with the debugger attached by pressing F5.</li> </ol>"},{"location":"samples-cpp/hello.plc/index.html#build-and-install-the-snap","title":"Build and Install the Snap","text":"<p>Build and install the snap like described here.</p>"},{"location":"samples-cpp/hello.plc/index.html#test-the-snap","title":"Test the Snap","text":""},{"location":"samples-cpp/hello.plc/index.html#read-access-to-variables-of-your-plc-application","title":"Read Access to Variables of your PLC Application","text":"<ul> <li>Install your default PLC application in the ctrlX CORE.</li> <li>Install this sample project as snap or start it in the App Build Environment</li> </ul> <p>All DL variables will be listet but not overwritten.</p>"},{"location":"samples-cpp/hello.plc/index.html#readwrite-access-to-the-variables-of-our-test-plc-application","title":"Read/Write Access to the Variables of our Test PLC Application","text":"<ul> <li>Download the file hello_plc_application.export from sub folder plc_application/</li> <li>Create a new PLC project with ctrlX PLC Engineering.</li> <li>Select the node PLC Logic in the project tree with the cursor.</li> <li>Click main menu item Project -&gt; Import... and import the whole content.</li> <li>Login into your PLC runtime (project will be compiled and downloaded).</li> <li>Start your PLC application (F5) - be sure your ctrlX is in Operting</li> <li>Install this sample project as snap or start it in the App Build Environment</li> </ul> <p>All DL variables will be listet, INT, REAL (Float) and STRING values are overwritten.</p>"},{"location":"samples-cpp/hello.plc/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"samples-cpp/hello.world/index.html","title":"README hello.world","text":"<p>The sample hello.world prints out \"Hello World\" on the CtrlX CORE.</p>"},{"location":"samples-cpp/hello.world/index.html#introduction","title":"Introduction","text":"<p>This sample demonstrates how you can build your first C/C++ snap.</p> <p>The project hello.world provides a simple application example to print out \"Hello World\" in ctrlX CORE devices: ctrlX CORE or ctrlX CORE<sup>virtual</sup>.</p> <p></p>"},{"location":"samples-cpp/hello.world/index.html#debug-and-run","title":"Debug and Run","text":"<ol> <li>Build the executable via cmake plugin.</li> <li>Launch the app with the debugger attached by pressing F5.</li> </ol>"},{"location":"samples-cpp/hello.world/index.html#troubleshooting","title":"Troubleshooting","text":"<p>All automatically created files are located in folders <code>build</code> and <code>generated</code>. If there are unclear messages during the build process, it might help to delete the folders <code>build</code> and <code>generated</code> and restart the build process.</p>"},{"location":"samples-cpp/hello.world/index.html#support","title":"Support","text":"<p>If you've any questions visit the ctrlX AUTOMATION Community</p>"},{"location":"samples-cpp/hello.world/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"samples-go/index.html","title":"Samples Go","text":""},{"location":"samples-go/index.html#find-out-the-supported-samples","title":"Find out the supported samples","text":""},{"location":"samples-go/index.html#basic-samples","title":"Basic Samples","text":"<ul> <li>ctrlX Data Layer Client</li> <li>ctrlX Data Layer Client Extended (Subscribe, Bulk Read)</li> <li>ctrlX Data Layer Provider</li> <li>ctrlX Data Layer Provider Subscription</li> <li>Web Server</li> <li>WebDAV Client</li> </ul>"},{"location":"samples-go/index.html#advanced-samples","title":"Advanced Samples","text":"<ul> <li>Application Data</li> <li>Usage of TPM2</li> </ul>"},{"location":"samples-go/index.html#build-a-snap","title":"Build a Snap","text":"<p>See Samples Overview</p>"},{"location":"samples-go/index.html#install-ctrlx-data-layer-build-and-runtime-environment","title":"Install ctrlX Data Layer build and runtime environment","text":"<pre><code>ctrlx-automation-sdk/scripts/install-ctrlx-datalayer.sh\n</code></pre>"},{"location":"samples-go/appdata/index.html","title":"README Go appdata","text":""},{"location":"samples-go/appdata/index.html#introduction","title":"Introduction","text":"<p>This sample shows how to load and save data according to the ctrlx storage concept.</p>"},{"location":"samples-go/appdata/index.html#debug-and-run","title":"Debug and Run","text":"<p>Launch the app with the debugger attached by pressing F5.</p>"},{"location":"samples-go/appdata/index.html#build-and-install","title":"Build and Install","text":"<ol> <li>Launch Visual Studio Code.</li> <li>Click on the Remote Explorer from the menu.</li> <li>Connect via SSH to your Ubuntu development environment.</li> <li>In the menu item File - Open Folder select the folder samples-go/appdata.</li> </ol>"},{"location":"samples-go/appdata/index.html#build-a-snap","title":"Build a Snap","text":"<p>Select main menu item Termninal - Run Build Task select the architecture of your ctrlX CORE:     amd64 for ctrlX CORE<sup>virtual</sup>     arm64 for ctrlX CORE</p> <p>A snap file will be build.</p>"},{"location":"samples-go/appdata/index.html#install-the-snap","title":"Install the Snap","text":"<p>Right click the snap file in the File explorer window and select download. The file will be downloaded into a destination directory on your host computer.</p> <ul> <li>Login into your ctrlX, from the home page click Install an app.</li> <li>Switch to Service Mode</li> <li>Select Install from file and select the snap file on your host computer.</li> <li>When installation is finished switch to Operation Mode.</li> </ul>"},{"location":"samples-go/appdata/index.html#test-the-snap","title":"Test the Snap","text":"<ul> <li>From the ctrlX home page Cclick Diagnostics -&gt; Logbook</li> <li>Click Settings on the right top corner</li> <li>Enable Show system messages</li> <li>Navigate to Filter -&gt; Units and check your snap.sdk-go-appdata.app.service</li> <li>Now you should the see the app output diagnostics.</li> <li> <p>Press Refresh to update.</p> </li> <li> <p>If you have root permissions, you can also watch the output on any ssh console with the command:</p> </li> </ul> <pre><code>sudo snap logs -f sdk-go-appdata.app\n</code></pre>"},{"location":"samples-go/appdata/index.html#provide-foss-info","title":"Provide FOSS Info","text":"<p>If your programcode contains additional open source software, the FOSS Info (Free and Open Source Software) must be filled in order to publish your App to the ctrlX Store.</p> <ol> <li>Navigate to the folder configs/package-assets in the root path of your snap project</li> <li>Open the file app.'snap-name'.fossinfo.json</li> <li>Add license information of the used open source software with the following json-structure:</li> </ol> <pre><code>   {\n        \"name\": \"\",\n        \"version\": \"\",\n        \"homepage\": \"\",\n        \"usage\": \"\",\n        \"integrationMechanism\": \"\",\n        \"copyright\": {\n            \"text\": \"\"\n        },\n        \"licenses\": [\n            {\n                \"name\": \"\",\n                \"spdx\": \"\",\n                \"text\": \"\"\n            }\n        ]\n    }\n</code></pre>"},{"location":"samples-go/appdata/index.html#install-the-app","title":"Install the App","text":"<p>Login into ctrlX and install the App (Apps).</p>"},{"location":"samples-go/appdata/index.html#gratulations-were-finished-lets-start-coding","title":"Gratulations - We're finished - Let's start coding","text":""},{"location":"samples-go/appdata/index.html#support","title":"Support","text":""},{"location":"samples-go/appdata/index.html#developer-community","title":"Developer Community","text":"<p>Please join the Developer Community</p>"},{"location":"samples-go/appdata/index.html#sdk-forum","title":"SDK Forum","text":"<p>Please visit the SDK Forum</p>"},{"location":"samples-go/appdata/index.html#issues","title":"Issues","text":"<p>If you've found an error in these sample, please file an issue</p>"},{"location":"samples-go/appdata/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"samples-go/appdata/assets/index.html","title":"<code>/assets</code>","text":"<p>Other assets to go along with your repository (images, logos, etc).</p>"},{"location":"samples-go/appdata/cmd/index.html","title":"<code>/cmd</code>","text":"<p>Main applications for this project.</p> <p>The directory name for each application should match the name of the executable you want to have (e.g., <code>/cmd/myapp</code>).</p> <p>Don't put a lot of code in the application directory. If you think the code can be imported and used in other projects, then it should live in the <code>/pkg</code> directory. If the code is not reusable or if you don't want others to reuse it, put that code in the <code>/internal</code> directory. You'll be surprised what others will do, so be explicit about your intentions!</p> <p>It's common to have a small <code>main</code> function that imports and invokes the code from the <code>/internal</code> and <code>/pkg</code> directories and nothing else.</p> <p>Examples:</p> <ul> <li>https://github.com/heptio/ark/tree/master/cmd (just a really small <code>main</code> function with everything else in packages)</li> <li>https://github.com/moby/moby/tree/master/cmd</li> <li>https://github.com/prometheus/prometheus/tree/master/cmd</li> <li>https://github.com/influxdata/influxdb/tree/master/cmd</li> <li>https://github.com/kubernetes/kubernetes/tree/master/cmd</li> <li>https://github.com/satellity/satellity/tree/master/cmd/satellity</li> <li>https://github.com/dapr/dapr/tree/master/cmd</li> </ul>"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/index.html","title":"jwt-go","text":"<p>A go (or 'golang' for search engine friendliness) implementation of JSON Web Tokens.</p> <p>IMPORT PATH CHANGE: Starting from v3.2.1, the import path has changed from <code>github.com/dgrijalva/jwt-go</code> to <code>github.com/golang-jwt/jwt</code>. After the original author of the library suggested migrating the maintenance of <code>jwt-go</code>, a dedicated team of open source maintainers decided to clone the existing library into this repository. See dgrijalva/jwt-go#462 for a detailed discussion on this topic.</p> <p>Future releases will be using the <code>github.com/golang-jwt/jwt</code> import path and continue the existing versioning scheme of <code>v3.x.x+incompatible</code>. Backwards-compatible patches and fixes will be done on the <code>v3</code> release branch, where as new build-breaking features will be developed in a <code>v4</code> release, possibly including a SIV-style import path.</p> <p>SECURITY NOTICE: Some older versions of Go have a security issue in the crypto/elliptic. Recommendation is to upgrade to at least 1.15 See issue dgrijalva/jwt-go#216 for more detail.</p> <p>SECURITY NOTICE: It's important that you validate the <code>alg</code> presented is what you expect. This library attempts to make it easy to do the right thing by requiring key types match the expected alg, but you should take the extra step to verify it in your usage.  See the examples provided.</p>"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/index.html#supported-go-versions","title":"Supported Go versions","text":"<p>Our support of Go versions is aligned with Go's version release policy. So we will support a major version of Go until there are two newer major releases. We no longer support building jwt-go with unsupported Go versions, as these contain security vulnerabilities which will not be fixed.</p>"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/index.html#what-the-heck-is-a-jwt","title":"What the heck is a JWT?","text":"<p>JWT.io has a great introduction to JSON Web Tokens.</p> <p>In short, it's a signed JSON object that does something useful (for example, authentication).  It's commonly used for <code>Bearer</code> tokens in Oauth 2.  A token is made of three parts, separated by <code>.</code>'s.  The first two parts are JSON objects, that have been base64url encoded.  The last part is the signature, encoded the same way.</p> <p>The first part is called the header.  It contains the necessary information for verifying the last part, the signature.  For example, which encryption method was used for signing and what key was used.</p> <p>The part in the middle is the interesting bit.  It's called the Claims and contains the actual stuff you care about.  Refer to RFC 7519 for information about reserved keys and the proper way to add your own.</p>"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/index.html#whats-in-the-box","title":"What's in the box?","text":"<p>This library supports the parsing and verification as well as the generation and signing of JWTs.  Current supported signing algorithms are HMAC SHA, RSA, RSA-PSS, and ECDSA, though hooks are present for adding your own.</p>"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/index.html#examples","title":"Examples","text":"<p>See the project documentation for examples of usage:</p> <ul> <li>Simple example of parsing and validating a token</li> <li>Simple example of building and signing a token</li> <li>Directory of Examples</li> </ul>"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/index.html#extensions","title":"Extensions","text":"<p>This library publishes all the necessary components for adding your own signing methods.  Simply implement the <code>SigningMethod</code> interface and register a factory method using <code>RegisterSigningMethod</code>.  </p> <p>Here's an example of an extension that integrates with multiple Google Cloud Platform signing tools (AppEngine, IAM API, Cloud KMS): https://github.com/someone1/gcp-jwt-go</p>"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/index.html#compliance","title":"Compliance","text":"<p>This library was last reviewed to comply with RTF 7519 dated May 2015 with a few notable differences:</p> <ul> <li>In order to protect against accidental use of Unsecured JWTs, tokens using <code>alg=none</code> will only be accepted if the constant <code>jwt.UnsafeAllowNoneSignatureType</code> is provided as the key.</li> </ul>"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/index.html#project-status-versioning","title":"Project Status &amp; Versioning","text":"<p>This library is considered production ready.  Feedback and feature requests are appreciated.  The API should be considered stable.  There should be very few backwards-incompatible changes outside of major version updates (and only with good reason).</p> <p>This project uses Semantic Versioning 2.0.0.  Accepted pull requests will land on <code>main</code>.  Periodically, versions will be tagged from <code>main</code>.  You can find all the releases on the project releases page.</p> <p>While we try to make it obvious when we make breaking changes, there isn't a great mechanism for pushing announcements out to users.  You may want to use this alternative package include: <code>gopkg.in/golang-jwt/jwt.v3</code>.  It will do the right thing WRT semantic versioning.</p> <p>BREAKING CHANGES:*  * Version 3.0.0 includes a lot of changes from the 2.x line, including a few that break the API.  We've tried to break as few things as possible, so there should just be a few type signature changes.  A full list of breaking changes is available in <code>VERSION_HISTORY.md</code>.  See <code>MIGRATION_GUIDE.md</code> for more information on updating your code.</p>"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/index.html#usage-tips","title":"Usage Tips","text":""},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/index.html#signing-vs-encryption","title":"Signing vs Encryption","text":"<p>A token is simply a JSON object that is signed by its author. this tells you exactly two things about the data:</p> <ul> <li>The author of the token was in the possession of the signing secret</li> <li>The data has not been modified since it was signed</li> </ul> <p>It's important to know that JWT does not provide encryption, which means anyone who has access to the token can read its contents. If you need to protect (encrypt) the data, there is a companion spec, <code>JWE</code>, that provides this functionality. JWE is currently outside the scope of this library.</p>"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/index.html#choosing-a-signing-method","title":"Choosing a Signing Method","text":"<p>There are several signing methods available, and you should probably take the time to learn about the various options before choosing one.  The principal design decision is most likely going to be symmetric vs asymmetric.</p> <p>Symmetric signing methods, such as HSA, use only a single secret. This is probably the simplest signing method to use since any <code>[]byte</code> can be used as a valid secret. They are also slightly computationally faster to use, though this rarely is enough to matter. Symmetric signing methods work the best when both producers and consumers of tokens are trusted, or even the same system. Since the same secret is used to both sign and validate tokens, you can't easily distribute the key for validation.</p> <p>Asymmetric signing methods, such as RSA, use different keys for signing and verifying tokens. This makes it possible to produce tokens with a private key, and allow any consumer to access the public key for verification.</p>"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/index.html#signing-methods-and-key-types","title":"Signing Methods and Key Types","text":"<p>Each signing method expects a different object type for its signing keys. See the package documentation for details. Here are the most common ones:</p> <ul> <li>The HMAC signing method (<code>HS256</code>,<code>HS384</code>,<code>HS512</code>) expect <code>[]byte</code> values for signing and validation</li> <li>The RSA signing method (<code>RS256</code>,<code>RS384</code>,<code>RS512</code>) expect <code>*rsa.PrivateKey</code> for signing and <code>*rsa.PublicKey</code> for validation</li> <li>The ECDSA signing method (<code>ES256</code>,<code>ES384</code>,<code>ES512</code>) expect <code>*ecdsa.PrivateKey</code> for signing and <code>*ecdsa.PublicKey</code> for validation</li> </ul>"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/index.html#jwt-and-oauth","title":"JWT and OAuth","text":"<p>It's worth mentioning that OAuth and JWT are not the same thing. A JWT token is simply a signed JSON object. It can be used anywhere such a thing is useful. There is some confusion, though, as JWT is the most common type of bearer token used in OAuth2 authentication.</p> <p>Without going too far down the rabbit hole, here's a description of the interaction of these technologies:</p> <ul> <li>OAuth is a protocol for allowing an identity provider to be separate from the service a user is logging in to. For example, whenever you use Facebook to log into a different service (Yelp, Spotify, etc), you are using OAuth.</li> <li>OAuth defines several options for passing around authentication data. One popular method is called a \"bearer token\". A bearer token is simply a string that should only be held by an authenticated user. Thus, simply presenting this token proves your identity. You can probably derive from here why a JWT might make a good bearer token.</li> <li>Because bearer tokens are used for authentication, it's important they're kept secret. This is why transactions that use bearer tokens typically happen over SSL.</li> </ul>"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/index.html#troubleshooting","title":"Troubleshooting","text":"<p>This library uses descriptive error messages whenever possible. If you are not getting the expected result, have a look at the errors. The most common place people get stuck is providing the correct type of key to the parser. See the above section on signing methods and key types.</p>"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/index.html#more","title":"More","text":"<p>Documentation can be found on pkg.go.dev.</p> <p>The command line utility included in this project (cmd/jwt) provides a straightforward example of token creation and parsing as well as a useful tool for debugging your own integration. You'll also find several implementation examples in the documentation.</p>"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/MIGRATION_GUIDE.html","title":"MIGRATION GUIDE","text":""},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/MIGRATION_GUIDE.html#migration-guide-v321","title":"Migration Guide (v3.2.1)","text":"<p>Starting from v3.2.1, the import path has changed from <code>github.com/dgrijalva/jwt-go</code> to <code>github.com/golang-jwt/jwt</code>. Future releases will be using the <code>github.com/golang-jwt/jwt</code> import path and continue the existing versioning scheme of <code>v3.x.x+incompatible</code>. Backwards-compatible patches and fixes will be done on the <code>v3</code> release branch, where as new build-breaking features will be developed in a <code>v4</code> release, possibly including a SIV-style import path.</p>"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/MIGRATION_GUIDE.html#gomod-replacement","title":"go.mod replacement","text":"<p>In a first step, the easiest way is to use <code>go mod edit</code> to issue a replacement.</p> <pre><code>go mod edit -replace github.com/dgrijalva/jwt-go=github.com/golang-jwt/jwt@v3.2.1+incompatible\ngo mod tidy\n</code></pre> <p>This will still keep the old import path in your code but replace it with the new package and also introduce a new indirect dependency to <code>github.com/golang-jwt/jwt</code>. Try to compile your project; it should still work.</p>"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/MIGRATION_GUIDE.html#cleanup","title":"Cleanup","text":"<p>If your code still consistently builds, you can replace all occurences of <code>github.com/dgrijalva/jwt-go</code> with <code>github.com/golang-jwt/jwt</code>, either manually or by using tools such as <code>sed</code>. Finally, the <code>replace</code> directive in the <code>go.mod</code> file can be removed.</p>"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/MIGRATION_GUIDE.html#older-releases-before-v320","title":"Older releases (before v3.2.0)","text":"<p>The original migration guide for older releases can be found at https://github.com/dgrijalva/jwt-go/blob/master/MIGRATION_GUIDE.md.</p>"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/VERSION_HISTORY.html","title":"VERSION HISTORY","text":""},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/VERSION_HISTORY.html#jwt-go-version-history","title":"<code>jwt-go</code> Version History","text":""},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/VERSION_HISTORY.html#322","title":"3.2.2","text":"<ul> <li>Starting from this release, we are adopting the policy to support the most 2 recent versions of Go currently available. By the time of this release, this is Go 1.15 and 1.16 (#28).</li> <li>Fixed a potential issue that could occur when the verification of <code>exp</code>, <code>iat</code> or <code>nbf</code> was not required and contained invalid contents, i.e. non-numeric/date. Thanks for @thaJeztah for making us aware of that and @giorgos-f3 for originally reporting it to the formtech fork (#40).</li> <li>Added support for EdDSA / ED25519 (#36).</li> <li>Optimized allocations (#33).</li> </ul>"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/VERSION_HISTORY.html#321","title":"3.2.1","text":"<ul> <li>Import Path Change: See MIGRATION_GUIDE.md for tips on updating your code<ul> <li>Changed the import path from <code>github.com/dgrijalva/jwt-go</code> to <code>github.com/golang-jwt/jwt</code></li> </ul> </li> <li>Fixed type confusing issue between <code>string</code> and <code>[]string</code> in <code>VerifyAudience</code> (#12). This fixes CVE-2020-26160 </li> </ul>"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/VERSION_HISTORY.html#320","title":"3.2.0","text":"<ul> <li>Added method <code>ParseUnverified</code> to allow users to split up the tasks of parsing and validation</li> <li>HMAC signing method returns <code>ErrInvalidKeyType</code> instead of <code>ErrInvalidKey</code> where appropriate</li> <li>Added options to <code>request.ParseFromRequest</code>, which allows for an arbitrary list of modifiers to parsing behavior. Initial set include <code>WithClaims</code> and <code>WithParser</code>. Existing usage of this function will continue to work as before.</li> <li>Deprecated <code>ParseFromRequestWithClaims</code> to simplify API in the future.</li> </ul>"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/VERSION_HISTORY.html#310","title":"3.1.0","text":"<ul> <li>Improvements to <code>jwt</code> command line tool</li> <li>Added <code>SkipClaimsValidation</code> option to <code>Parser</code></li> <li>Documentation updates</li> </ul>"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/VERSION_HISTORY.html#300","title":"3.0.0","text":"<ul> <li>Compatibility Breaking Changes: See MIGRATION_GUIDE.md for tips on updating your code<ul> <li>Dropped support for <code>[]byte</code> keys when using RSA signing methods.  This convenience feature could contribute to security vulnerabilities involving mismatched key types with signing methods.</li> <li><code>ParseFromRequest</code> has been moved to <code>request</code> subpackage and usage has changed</li> <li>The <code>Claims</code> property on <code>Token</code> is now type <code>Claims</code> instead of <code>map[string]interface{}</code>.  The default value is type <code>MapClaims</code>, which is an alias to <code>map[string]interface{}</code>.  This makes it possible to use a custom type when decoding claims.</li> </ul> </li> <li>Other Additions and Changes<ul> <li>Added <code>Claims</code> interface type to allow users to decode the claims into a custom type</li> <li>Added <code>ParseWithClaims</code>, which takes a third argument of type <code>Claims</code>.  Use this function instead of <code>Parse</code> if you have a custom type you'd like to decode into.</li> <li>Dramatically improved the functionality and flexibility of <code>ParseFromRequest</code>, which is now in the <code>request</code> subpackage</li> <li>Added <code>ParseFromRequestWithClaims</code> which is the <code>FromRequest</code> equivalent of <code>ParseWithClaims</code></li> <li>Added new interface type <code>Extractor</code>, which is used for extracting JWT strings from http requests.  Used with <code>ParseFromRequest</code> and <code>ParseFromRequestWithClaims</code>.</li> <li>Added several new, more specific, validation errors to error type bitmask</li> <li>Moved examples from README to executable example files</li> <li>Signing method registry is now thread safe</li> <li>Added new property to <code>ValidationError</code>, which contains the raw error returned by calls made by parse/verify (such as those returned by keyfunc or json parser)</li> </ul> </li> </ul>"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/VERSION_HISTORY.html#270","title":"2.7.0","text":"<p>This will likely be the last backwards compatible release before 3.0.0, excluding essential bug fixes.</p> <ul> <li>Added new option <code>-show</code> to the <code>jwt</code> command that will just output the decoded token without verifying</li> <li>Error text for expired tokens includes how long it's been expired</li> <li>Fixed incorrect error returned from <code>ParseRSAPublicKeyFromPEM</code></li> <li>Documentation updates</li> </ul>"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/VERSION_HISTORY.html#260","title":"2.6.0","text":"<ul> <li>Exposed inner error within ValidationError</li> <li>Fixed validation errors when using UseJSONNumber flag</li> <li>Added several unit tests</li> </ul>"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/VERSION_HISTORY.html#250","title":"2.5.0","text":"<ul> <li>Added support for signing method none.  You shouldn't use this.  The API tries to make this clear.</li> <li>Updated/fixed some documentation</li> <li>Added more helpful error message when trying to parse tokens that begin with <code>BEARER</code></li> </ul>"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/VERSION_HISTORY.html#240","title":"2.4.0","text":"<ul> <li>Added new type, Parser, to allow for configuration of various parsing parameters<ul> <li>You can now specify a list of valid signing methods.  Anything outside this set will be rejected.</li> <li>You can now opt to use the <code>json.Number</code> type instead of <code>float64</code> when parsing token JSON</li> </ul> </li> <li>Added support for Travis CI</li> <li>Fixed some bugs with ECDSA parsing</li> </ul>"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/VERSION_HISTORY.html#230","title":"2.3.0","text":"<ul> <li>Added support for ECDSA signing methods</li> <li>Added support for RSA PSS signing methods (requires go v1.4)</li> </ul>"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/VERSION_HISTORY.html#220","title":"2.2.0","text":"<ul> <li>Gracefully handle a <code>nil</code> <code>Keyfunc</code> being passed to <code>Parse</code>.  Result will now be the parsed token and an error, instead of a panic.</li> </ul>"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/VERSION_HISTORY.html#210","title":"2.1.0","text":"<p>Backwards compatible API change that was missed in 2.0.0.</p> <ul> <li>The <code>SignedString</code> method on <code>Token</code> now takes <code>interface{}</code> instead of <code>[]byte</code></li> </ul>"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/VERSION_HISTORY.html#200","title":"2.0.0","text":"<p>There were two major reasons for breaking backwards compatibility with this update.  The first was a refactor required to expand the width of the RSA and HMAC-SHA signing implementations.  There will likely be no required code changes to support this change.</p> <p>The second update, while unfortunately requiring a small change in integration, is required to open up this library to other signing methods.  Not all keys used for all signing methods have a single standard on-disk representation.  Requiring <code>[]byte</code> as the type for all keys proved too limiting.  Additionally, this implementation allows for pre-parsed tokens to be reused, which might matter in an application that parses a high volume of tokens with a small set of keys.  Backwards compatibilty has been maintained for passing <code>[]byte</code> to the RSA signing methods, but they will also accept <code>*rsa.PublicKey</code> and <code>*rsa.PrivateKey</code>.</p> <p>It is likely the only integration change required here will be to change <code>func(t *jwt.Token) ([]byte, error)</code> to <code>func(t *jwt.Token) (interface{}, error)</code> when calling <code>Parse</code>.</p> <ul> <li>Compatibility Breaking Changes<ul> <li><code>SigningMethodHS256</code> is now <code>*SigningMethodHMAC</code> instead of <code>type struct</code></li> <li><code>SigningMethodRS256</code> is now <code>*SigningMethodRSA</code> instead of <code>type struct</code></li> <li><code>KeyFunc</code> now returns <code>interface{}</code> instead of <code>[]byte</code></li> <li><code>SigningMethod.Sign</code> now takes <code>interface{}</code> instead of <code>[]byte</code> for the key</li> <li><code>SigningMethod.Verify</code> now takes <code>interface{}</code> instead of <code>[]byte</code> for the key</li> </ul> </li> <li>Renamed type <code>SigningMethodHS256</code> to <code>SigningMethodHMAC</code>.  Specific sizes are now just instances of this type.<ul> <li>Added public package global <code>SigningMethodHS256</code></li> <li>Added public package global <code>SigningMethodHS384</code></li> <li>Added public package global <code>SigningMethodHS512</code></li> </ul> </li> <li>Renamed type <code>SigningMethodRS256</code> to <code>SigningMethodRSA</code>.  Specific sizes are now just instances of this type.<ul> <li>Added public package global <code>SigningMethodRS256</code></li> <li>Added public package global <code>SigningMethodRS384</code></li> <li>Added public package global <code>SigningMethodRS512</code></li> </ul> </li> <li>Moved sample private key for HMAC tests from an inline value to a file on disk.  Value is unchanged.</li> <li>Refactored the RSA implementation to be easier to read</li> <li>Exposed helper methods <code>ParseRSAPrivateKeyFromPEM</code> and <code>ParseRSAPublicKeyFromPEM</code></li> </ul>"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/VERSION_HISTORY.html#102","title":"1.0.2","text":"<ul> <li>Fixed bug in parsing public keys from certificates</li> <li>Added more tests around the parsing of keys for RS256</li> <li>Code refactoring in RS256 implementation.  No functional changes</li> </ul>"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/VERSION_HISTORY.html#101","title":"1.0.1","text":"<ul> <li>Fixed panic if RS256 signing method was passed an invalid key</li> </ul>"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/VERSION_HISTORY.html#100","title":"1.0.0","text":"<ul> <li>First versioned release</li> <li>API stabilized</li> <li>Supports creating, signing, parsing, and validating JWT tokens</li> <li>Supports RS256 and HS256 signing methods</li> </ul>"},{"location":"samples-go/datalayer.client.ext/index.html","title":"Example ctrlX Data Layer Client Extensions","text":""},{"location":"samples-go/datalayer.client.ext/index.html#introduction","title":"Introduction","text":"<p>The sample demonstrates how to uses the subcription and bulk from the ctrlX Data Layer.</p>"},{"location":"samples-go/datalayer.client.ext/index.html#function-description","title":"Function Description","text":"<p>The app connects to the ctrlX Data Layer using either port 8443 or 443. A subscription is used to get values by data change event in a deterministic publish interval. The single read is performed every 10 seconds in an endless loop.</p> <p>If the ctrlX Data Layer connection breaks the app will exit. After 10s it will be automatically restarted by snapd.</p>"},{"location":"samples-go/datalayer.client.ext/index.html#prerequisites","title":"Prerequisites","text":"<p>See the description on ctrlX Data Layer client and provider library for Go</p>"},{"location":"samples-go/datalayer.client.ext/index.html#visual-studio-code","title":"Visual Studio Code","text":"<p>To use Go within Visual Studio Code, we recommend using the Go for Visual Studio Code extension. The corresponding documentation can also be found under this link.</p> <p>Open this project folder directly, then the go build environment is set correctly.</p>"},{"location":"samples-go/datalayer.client.ext/index.html#building","title":"Building","text":"<p>Dependency updates with <code>go mod tidy</code></p> <p>Build the executable with <code>go build ./cmd/...</code></p> <p>Build the snap with <code>snapcraft --destructive-mode</code></p>"},{"location":"samples-go/datalayer.client.ext/index.html#runtime","title":"Runtime","text":"<p>This application needs \"sdk-cpp-alldata\" as provider.</p>"},{"location":"samples-go/datalayer.client.ext/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"samples-go/datalayer.client.simple/index.html","title":"Example ctrlX Data Layer Client","text":""},{"location":"samples-go/datalayer.client.simple/index.html#introduction","title":"Introduction","text":"<p>The sample demonstrates how to read values from ctrlX Data Layer tree and write out the values to console.</p>"},{"location":"samples-go/datalayer.client.simple/index.html#function-description","title":"Function Description","text":"<p>The app connects to the ctrlX Data Layer using either port 8443 or 443. A subscription is used to get values by data change event in a deterministic publish interval. The single read is performed every 10 seconds in an endless loop.</p> <p>If the ctrlX Data Layer connection breaks the app will exit. After 10s it will be automatically restarted by snapd.</p>"},{"location":"samples-go/datalayer.client.simple/index.html#prerequisites","title":"Prerequisites","text":"<p>See the description on ctrlX Data Layer client and provider library for Go</p>"},{"location":"samples-go/datalayer.client.simple/index.html#visual-studio-code","title":"Visual Studio Code","text":"<p>To use Go within Visual Studio Code, we recommend using the Go for Visual Studio Code extension. The corresponding documentation can also be found under this link.</p> <p>Open this project folder directly, then the go build environment is set correctly.</p>"},{"location":"samples-go/datalayer.client.simple/index.html#building","title":"Building","text":"<p>Dependency updates with <code>go mod tidy</code></p> <p>Build the executable with <code>go build ./cmd/...</code></p> <p>Build the snap with <code>snapcraft --destructive-mode</code></p>"},{"location":"samples-go/datalayer.client.simple/index.html#runtime","title":"Runtime","text":"<p>This application needs \"sdk-cpp-alldata\" as provider.</p>"},{"location":"samples-go/datalayer.client.simple/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"samples-go/datalayer.provider.simple/index.html","title":"Example ctrlX Data Layer Provider","text":""},{"location":"samples-go/datalayer.provider.simple/index.html#introduction","title":"Introduction","text":"<p>The app demonstrates how a ctrlX Data Layer connecion is established and a string and flatbuffers node are provided.</p>"},{"location":"samples-go/datalayer.provider.simple/index.html#function-description","title":"Function Description","text":"<p>The app connects to the ctrlX Data Layer and provides a string and flatbuffers node .</p> <p>If the ctrlX Data Layer connection breaks the app will exit. After 10s it will be automatically restarted by snapd.</p>"},{"location":"samples-go/datalayer.provider.simple/index.html#prerequisites","title":"Prerequisites","text":"<p>see the description on ctrlX Data Layer client and provider library for Go</p>"},{"location":"samples-go/datalayer.provider.simple/index.html#visual-studio-code","title":"Visual Studio Code","text":"<p>To use Go within Visual Studio Code, we recommend using the Go for Visual Studio Code extension. The corresponding documentation can also be found under this link.</p> <p>Open this project folder directly, then the go build environment is set correctly.</p>"},{"location":"samples-go/datalayer.provider.simple/index.html#compile-flatbuffers-schema","title":"Compile Flatbuffers Schema","text":"<p>This app uses a flatbuffer defined in the schema file sampleSchema.fbs. From this schema file we have to create a binary file which is registered on the ctrlX and a Go structure to create and access the defined flatbuffer data. These tasks can be done with the command line tool flatc.</p> <p>This tool is provided by this SDK under /bin/oss.flatbuffers/..insert OS version here../release/</p> <ul> <li> <p>Create a binary flatbuffers file:</p> <p><code>&lt;path to&gt;/flatc -o bfbs/ -b --schema fbs/sampleSchema.fbs</code></p> </li> <li> <p>Generate the Go code:</p> <p><code>&lt;path to&gt;/flatc --go fbs/sampleSchema.fbs</code></p> </li> </ul> <p>The generated code is stored in sample/schema/InertialValue.go</p>"},{"location":"samples-go/datalayer.provider.simple/index.html#building","title":"Building","text":"<p>Dependency updates with <code>go mod tidy</code></p> <p>Build the executable with <code>go build ./cmd/...</code></p> <p>Build the snap with <code>snapcraft --destructive-mode</code></p>"},{"location":"samples-go/datalayer.provider.simple/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"samples-go/datalayer.provider.sub/index.html","title":"Example ctrlX Data Layer Provider Subscription","text":""},{"location":"samples-go/datalayer.provider.sub/index.html#introduction","title":"Introduction","text":"<p>The app demonstrates shows how a provider supports \"ctrlX Data Layer\" subscription interface.</p>"},{"location":"samples-go/datalayer.provider.sub/index.html#function-description","title":"Function Description","text":"<p>Provider supported the subscription interface.</p>"},{"location":"samples-go/datalayer.provider.sub/index.html#prerequisites","title":"Prerequisites","text":"<p>see the description on ctrlX Data Layer client and provider library for Go</p>"},{"location":"samples-go/datalayer.provider.sub/index.html#visual-studio-code","title":"Visual Studio Code","text":"<p>To use Go within Visual Studio Code, we recommend using the Go for Visual Studio Code extension. The corresponding documentation can also be found under this link.</p> <p>Open this project folder directly, then the go build environment is set correctly.</p>"},{"location":"samples-go/datalayer.provider.sub/index.html#building","title":"Building","text":"<p>Dependency updates with <code>go mod vendor</code> and <code>go mod tidy</code></p> <p>Build the executable with <code>./build.sh</code></p>"},{"location":"samples-go/datalayer.provider.sub/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"samples-go/tpm2.srk/index.html","title":"README tpm2.srk","text":"<p>The sample app tpm2.srk shows the basic usage of a TPM2 in Go with go-tpm and go-tpm-tools.</p> <p>Also see \"TPM2\".</p>"},{"location":"samples-go/tpm2.srk/index.html#introduction","title":"Introduction","text":"<p>It demonstrates how you can use the TPM2.0 of the ctrlX CORE or the emulated TPM2.0 on the ctrlX CORE<sup>virtual</sup> inside a Go application.</p>"},{"location":"samples-go/tpm2.srk/index.html#build","title":"Build","text":"<pre><code>cd samples-go/tpm2.srk\ngo build ./cmd/tpm2\nexport TPM2_SOCKET=\"&lt;path to socket&gt;\"\n./tpm2 create\n./tpm2 load\n</code></pre>"},{"location":"samples-go/tpm2.srk/index.html#support","title":"Support","text":"<p>If you've any questions visit the ctrlX AUTOMATION Community</p>"},{"location":"samples-go/tpm2.srk/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"samples-go/webdav.client/index.html","title":"Example WebDAV Client","text":""},{"location":"samples-go/webdav.client/index.html#introduction","title":"Introduction","text":"<p>The sample demonstrates how to access to configuration files of a ctrlX CORE remotely using the WebDAV protocol.</p>"},{"location":"samples-go/webdav.client/index.html#function-description","title":"Function Description","text":"<p>The application creates a webdav client and connects to a virtual control (localhost:8443) with the default credentials. It executes some file operations on the ctrlX-filesystem.</p>"},{"location":"samples-go/webdav.client/index.html#visual-studio-code","title":"Visual Studio Code","text":"<p>To use Go within Visual Studio Code, we recommend using the Go for Visual Studio Code extension. The corresponding documentation can also be found under this link.</p> <p>Open this project folder directly, then the go build environment is set correctly.</p>"},{"location":"samples-go/webdav.client/index.html#building","title":"Building","text":"<p>Dependency updates with <code>go mod tidy</code> Build the executable with <code>go build ./cmd/...</code></p>"},{"location":"samples-go/webdav.client/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"samples-go/webserver/index.html","title":"Example webserver","text":"<p>The sample sdk-go-webserver contains simple webserver.</p>"},{"location":"samples-go/webserver/index.html#introduction","title":"Introduction","text":""},{"location":"samples-go/webserver/index.html#pre-requisites","title":"Pre-requisites","text":"<ul> <li>Recommended: ctrlX WORKS App Build Environment (QEMU Virtual Machine) - see Setup</li> <li>ctrlX CORE<sup>virtual</sup> or ctrlX CORE</li> </ul>"},{"location":"samples-go/webserver/index.html#debug-and-run","title":"Debug and Run","text":"<p>Launch the app with the debugger attached by pressing F5.</p>"},{"location":"samples-go/webserver/index.html#build-and-install","title":"Build and Install","text":"<ol> <li>Launch Visual Studio Code</li> <li>Open the sample directory <code>samples-go/sdk-go-webserver</code></li> <li>Build and install the snap as described in <code>Setup</code> section</li> <li>Check output in the web interface</li> </ol>"},{"location":"samples-go/webserver/index.html#detailed-informations","title":"Detailed Informations","text":"<p>For the best webserver integration take a look at package-assets</p>"},{"location":"samples-go/webserver/index.html#screenshots","title":"Screenshots","text":""},{"location":"samples-go/webserver/index.html#support","title":"Support","text":"<p>If you've any questions visit the ctrlX AUTOMATION Community</p>"},{"location":"samples-go/webserver/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"samples-iec61131/index.html","title":"Samples IEC 61131-3","text":"<p>This directory contains IEC 61131-3 code samples running in the PLC runtime environment of a ctrlX CORE.</p>"},{"location":"samples-iec61131/index.html#prerequisites","title":"Prerequisites","text":"<ul> <li>ctrlX AUTOMATION SDK build environment</li> <li>ctrlX AUTOMATION SDK version</li> <li>ctrlX CORE<sup>virtual</sup> or ctrlX CORE</li> <li>ctrlX WORKS with ctrlX PLC Engineering installed</li> </ul>"},{"location":"samples-iec61131/index.html#find-out-the-supported-samples","title":"Find out the supported samples","text":"<ul> <li>fbs-read-write Read, change and write Flatbuffer variable</li> </ul>"},{"location":"samples-iec61131/index.html#support","title":"Support","text":"<p>If you've found an error in these sample, please file an issue</p> <p>If you've any questions visit the ctrlX AUTOMATION Community</p>"},{"location":"samples-iec61131/index.html#official-documentation","title":"Official Documentation","text":"<p>https://docs.automation.boschrexroth.com/</p>"},{"location":"samples-iec61131/fbs-read-write/index.html","title":"Using Flatbuffers in IEC 61131-3 ST Code","text":"<p>The ctrlX data layer contains many nodes that provide their data in Flatbuffers.</p> <p>The sample shows how a Flatbuffers node can be read, changed and written.</p>"},{"location":"samples-iec61131/fbs-read-write/index.html#prequisites-for-your-windows-host","title":"Prequisites for your Windows host","text":"<ul> <li>ctrlX WORKS &gt;= 2.3.0 installed</li> <li>ctrlX PLC Engineering &gt;= 2.3.0 installed</li> <li>ctrlX CORE<sup>virtual</sup> with running app PLC</li> <li>ctrlX AUTOMATION SDK &gt;= 2.2.0 installed</li> </ul>"},{"location":"samples-iec61131/fbs-read-write/index.html#steps-to-build-and-download-the-plc-project","title":"Steps to build and download the PLC project","text":"<p>We describe the usage of a ctrlX CORE<sup>virtual</sup>.</p> <ul> <li>Start ctrlX PLC Engineering.</li> <li>Create a new project, use ctrlX CORE x64 Project as template.</li> <li>Within the device view select the node Application and delete it.</li> <li>Select node PLC Logic.</li> <li>Select main menu item Project -&gt; PLCOpenXML import</li> <li>From ctrlX AUTOMATION SDK select file samples-iec61131\\fbs-read-write\\fbs-datalayer-subscriptions-settings.xml</li> <li>Import complete content.</li> <li>Select PLC node Libray Manager</li> <li>Delete placeholder StringUtils and add the library with the same name.</li> <li>Select PLC node Application, right click and select context menu item 'Import from Flatbuffers File...'</li> <li>From ctrlX AUTOMATION SDK select file fbs\\comm\\datalayer\\sub_settings.fbs.</li> </ul> <p>The fbs file is compiled into IEC61131 Structed Text and imported into your PLC project.</p> <ul> <li>Compile the project - there should by no error</li> <li>Connect your PLC device node with the CORE<sup>virtual</sup></li> <li>Login (download) and start your PLC project.</li> </ul>"},{"location":"samples-iec61131/fbs-read-write/index.html#test-the-project","title":"Test the project","text":"<ul> <li>Open a web browser, log in into your ctrlX CORE<sup>virtual</sup></li> <li>Select Settings - Data layer</li> <li>Select node datalayer/subscriptions/settings</li> </ul> <p>The value of maximumBufferSize should be changed by your PLC project.</p>"},{"location":"samples-iec61131/fbs-read-write/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"samples-iec61131/fbs2plc/index.html","title":"Using Flatbuffers in IEC 61131-3 ST Code","text":"<p>Using Flatbuffers in IEC 61131-3 Code is described here.</p>"},{"location":"samples-iec61131/fbs2plc/index.html#files","title":"Files","text":"<p>This folder contains files to be used in the described workflow:</p> <ul> <li>start.bat - Starts the command line tool fbs2plc.exe provided with all necessary parameters.</li> <li>fbs-read-write.xml - Contains a template Application to read and write a Flatbuffers variable. </li> </ul>"},{"location":"samples-iec61131/fbs2plc/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"samples-net/index.html","title":"Samples .NET","text":""},{"location":"samples-net/index.html#find-out-the-supported-samples","title":"Find out the supported samples","text":""},{"location":"samples-net/index.html#basic-samples","title":"Basic Samples","text":"<ul> <li>Hello World</li> <li>ctrlX Data Layer Client</li> <li>ctrlX Data Layer Provider</li> <li>Diagnostics Logbook</li> </ul>"},{"location":"samples-net/index.html#advanced-samples","title":"Advanced Samples","text":"<ul> <li>Application Data</li> <li>ctrlX Data Layer Client: Browser</li> <li>ctrlX Data Layer Client: Bulk Read</li> <li>ctrlX Data Layer Provider: All Data Types</li> <li>ctrlX Data Layer Provider: Managing Virtual Nodes</li> <li>Hello ASP.NET</li> </ul>"},{"location":"samples-net/index.html#build-a-snap","title":"Build a Snap","text":"<p>See Samples Overview</p>"},{"location":"samples-net/appdata/index.html","title":"README .NET appdata","text":"<p>This .NET sample shows how to persist application data in ctrlX CORE using an HTTP Listener. Please read the available HOW-TO persist your app data documention for details.</p>"},{"location":"samples-net/appdata/index.html#introduction","title":"Introduction","text":"<p>The sample shows how to load and save data according to ctrlx storage concept.</p>"},{"location":"samples-net/appdata/index.html#description","title":"Description","text":"<p>Use the ctrlX App Data storage for your application data persistence.</p>"},{"location":"samples-net/appdata/index.html#prerequisites","title":"Prerequisites","text":"<p>Please read the common .NET docs here, first.</p>"},{"location":"samples-net/appdata/index.html#debug-and-run","title":"Debug and Run","text":"<p>Launch the app with the debugger attached by pressing F5.</p>"},{"location":"samples-net/appdata/index.html#build-and-install","title":"Build and Install","text":"<ol> <li>Launch Visual Studio Code</li> <li>Click on the Remote Explorer from the menu.</li> <li>Choose Open Folder.</li> <li>Open the directory appdata.</li> <li>Build and install snap as described here.</li> <li>Checkout ctrlX Data Layer web frontend (Settings | Data Layer)</li> <li> <p>Check the output using Diagnostics:</p> </li> <li> <p>Login into your ctrlX</p> </li> <li>Navigate to Diagnostics -&gt; Logbook</li> <li>Click Settings on the right top corner</li> <li>Enable Show system messages</li> <li>Navigate to Filter -&gt; Units and check your snap.sdk-net-appdata.app.service</li> <li>Now you should the see the app output diagnostics.</li> <li> <p>Press Refresh to update.</p> </li> <li> <p>If you have root permissions, you can also watch the output on any ssh console with the command:</p> </li> </ol> <pre><code>sudo snap logs sdk-net-appdata.app -f | more\n</code></pre>"},{"location":"samples-net/appdata/index.html#install-the-app","title":"Install the App","text":"<p>Login into ctrlX and install the App (Apps).</p>"},{"location":"samples-net/appdata/index.html#gratulations-were-finished-lets-start-coding","title":"Gratulations - We're finished - Let's start coding","text":""},{"location":"samples-net/appdata/index.html#support","title":"Support","text":""},{"location":"samples-net/appdata/index.html#developer-community","title":"Developer Community","text":"<p>Please join the Developer Community</p>"},{"location":"samples-net/appdata/index.html#sdk-forum","title":"SDK Forum","text":"<p>Please visit the SDK Forum</p>"},{"location":"samples-net/appdata/index.html#issues","title":"Issues","text":"<p>If you've found an error in these sample, please file an issue</p>"},{"location":"samples-net/appdata/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"samples-net/datalayer.client.browse/index.html","title":"README .NET datalayer.client.browse","text":"<p>This .NET sample writes out all node values from ctrlX Data Layer to console.</p>"},{"location":"samples-net/datalayer.client.browse/index.html#introduction","title":"Introduction","text":"<p>The sample demonstrates how to traverse the whole ctrlX Data Layer tree. The values of the nodes if readable are printed out to console as human readable strings. Also complex values with structure (encoded by FlatBuffers) are written as JSON string to console.</p>"},{"location":"samples-net/datalayer.client.browse/index.html#description","title":"Description","text":"<p>The implementation include the following steps:</p> <ul> <li>Create and start the 'DatalayerSystem' service</li> <li>Create a client with 'tcp' protocol for remote connection or 'ipc' protocol if running inside snap.</li> <li>Browse recursively through the whole DataLayer tree and write out the nodes with values to console</li> </ul>"},{"location":"samples-net/datalayer.client.browse/index.html#prerequisites","title":"Prerequisites","text":"<p>Please read the common .NET docs here, first.</p>"},{"location":"samples-net/datalayer.client.browse/index.html#debug-and-run","title":"Debug and Run","text":"<p>Launch the app with the debugger attached by pressing F5.</p>"},{"location":"samples-net/datalayer.client.browse/index.html#build-and-install","title":"Build and Install","text":"<ol> <li>Launch Visual Studio Code</li> <li>Click on the Remote Explorer from the menu.</li> <li>Choose Open Folder.</li> <li>Open the directory datalayer.client.browse.</li> <li>Build and install snap as described here.</li> <li> <p>Check the output using Diagnostics:</p> </li> <li> <p>Login into your ctrlX</p> </li> <li>Navigate to Diagnostics -&gt; Logbook</li> <li>Click Settings on the right top corner</li> <li>Enable Show system messages</li> <li>Navigate to Filter -&gt; Units and check your snap.sdk-net-client-browse.app.service</li> <li>Now you should the see the app output diagnostics.</li> <li> <p>Press Refresh to update.</p> </li> <li> <p>If you have root permissions, you can also watch the output on any ssh console with the command:</p> </li> </ol> <pre><code>sudo snap logs sdk-net-client-browse.app -f | more\n</code></pre>"},{"location":"samples-net/datalayer.client.browse/index.html#console-output","title":"Console Output","text":"<pre><code>Running inside snap: False\nctrlX Data Layer system started.\nctrlX Data Layer client created.\nClient connected: True\n\\-[]\n  |-[datalayer]\n  | |-[curvemq]\n  | | \\-[publickey] V=tGQ43.RsrvZ#K0]eLTs?vpyfCNN?^/sV6MGh7N\n  | |-[debug]\n  | |-[nodes] [datalayer/debug/*,datalayer/curvemq/publickey,datalayer/nodes,datalayer/nodesrt,datalayer/subscriptions/clients/*,datalayer/subscriptions/clients/*/subscriptions/*,datalayer/subscriptions/clients/*/subscriptions/*/nodes,datalayer/subscriptions/clients/*/subscriptions/*/properties,datalayer/subscriptions/settings,datalayer/retain/emu/data,datalayer/retain/emu/data/__,datalayer/retain/emu/info,datalayer/retain/emu/map,datalayer/retain/chunks,datalayer/retain/chunks/__,datalayer/retain/stats,datalayer/retain/stats/free,datalayer/retain/stats/used,datalayer/retain/stats/total,datalayer/retain/stats/biggest-free,datalayer/retain/stats/info,datalayer/retain/stats/sync-counter,datalayer/retain/stats/last-used,types/datalayer/metadata,types/datalayer/reflection,types/datalayer/memory,types/datalayer/memory_map,types/datalayer/token,types/datalayer/problem,types/datalayer/retain_stats,types/datalayer/subscription_properties,types/datalayer/subscription_data,types/datalayer/subscription_settings,types/datalayer/persistence_param,types/datalayer/subscription,types/datalayer/bool8,types/datalayer/int8,types/datalayer/uint8,types/datalayer/int16,types/datalayer/uint16,types/datalayer/int32,types/datalayer/uint32,types/datalayer/int64,types/datalayer/uint64,types/datalayer/float32,types/datalayer/float64,types/datalayer/string,types/datalayer/array-of-bool8,types/datalayer/array-of-int8,types/datalayer/array-of-uint8,types/datalayer/array-of-int16,types/datalayer/array-of-uint16,types/datalayer/array-of-int32,types/datalayer/array-of-uint32,types/datalayer/array-of-int64,types/datalayer/array-of-uint64,types/datalayer/array-of-float32,types/datalayer/array-of-float64,types/datalayer/array-of-string,types/datalayer/raw,types/datalayer/remoteconfig,types/datalayer/framework/bundle,types/datalayer/framework/bundlelist,types/datalayer/framework/dependency,types/datalayer/framework/dependencylist,types/datalayer/framework/interface,types/datalayer/framework/interfacelist,types/datalayer/framework/component,types/datalayer/framework/componentlist,types/datalayer/framework/property,types/datalayer/framework/propertylist,types/diagnosis/cfg-class,types/diagnosis/identification,types/diagnosis/list-identification-timestamp,types/diagnosis/identification-timestamp,types/diagnosis/registration,types/diagnosis/set,types/scheduler/callable,types/scheduler/duration,types/scheduler/duration-timer,types/scheduler/histogram,types/scheduler/programs,types/scheduler/state,types/scheduler/task,types/scheduler/trigger-source,types/scheduler/startup-error-reaction,types/scheduler/admin,types/scheduler/watchdog-type,types/scheduler/watchdog-error-reaction-class,types/scheduler/watchdog-error-reaction-configuration,types/scheduler/watchdog,types/scheduler/controls,types/systemhandler/state,types/script/cfg,types/script/cfg/init-script,types/script/instances,types/script/instances/cmd/file,types/script/instances/cmd/string,types/script/instances/diag,types/script/state/languages,devices/remotes/__,framework/bundles,framework/bundles/__,framework/metrics/system/cpu-utilisation-percent,framework/metrics/system/memtotal-mb,framework/metrics/system/memfree-mb,framework/metrics/system/memavailable-mb,framework/metrics/system/memused-mb,framework/metrics/system/membuffers-mb,framework/metrics/system/memcache-mb,framework/metrics/system/memused-percent,framework/metrics/process/vmsize-kb,framework/metrics/process/vmrss-kb,framework/metrics/process/vmshared-kb,framework/metrics/process/memused-percent,framework/state,framework/events/framework-started,diagnosis/cfg/realtime/numbers,diagnosis/cfg/realtime/numbers/class,diagnosis/clear/error,diagnosis/confirm/error,diagnosis/get/actual/list,diagnosis/get/actual/log,diagnosis/get/text,diagnosis/registration/detailed/register,diagnosis/registration/detailed/unregister,diagnosis/registration/main/register,diagnosis/registration/main/unregister,diagnosis/set,diagnosis/set/reset-active,diagnosis/set/set-active,diagnosis/set/set-and-reset,trace/rexroth-automationcore/units,trace/rexroth-automationcore/units/__,trace/rexroth-automationcore/admin/cfg/*,scheduler/tasks/*/watchdog,scheduler/tasks/*/watchdog/__,scheduler/__,script/cfg,script/cfg/load-all,script/cfg/save-all,script/cfg/init-script,script/cfg/init-script/file,script/cfg/init-script/language,script/cfg/init-script/parameter,script/admin/cfg/load,script/admin/cfg/save,script/instances/*,script/instances/*/cmd/file,script/instances/*/cmd/string,script/instances/*/cmd/reset,script/instances/*/cmd/abort,script/instances/*/state/opstate,script/instances/*/state/script,script/instances/*/state/line,script/instances/*/state/attached-to,script/instances/*/state/pid,script/instances/*/diag,script/instances/*/diag/last-main-diag,script/instances/*/diag/last-detail-diag,script/instances/*/diag/err-msg,script/instances/*/diag/err-trace,script/state/languages/*]\n  | |-[nodesrt] [datalayer/retain/emu]\n  | |-[retain]\n  | | |-[chunks] []\n  | | |-[emu]\n  | | | |-[data] []\n  | | | |-[info] {\"type\": \"Shared\",\"id\": \"/snap.rexroth-automationcore.405e2e7a-63ae-0039-056b-deadbe000002\",\"sizeBytes\": 122880}\n  | | | \\-[map] {\"revision\": 0}\n  | | \\-[stats] {\"total\": 122880,\"free\": 122848,\"used\": 32,\"biggestFree\": 122848,\"syncCounter\": 124,\"lastUsed\": 32}\n  | |   |-[biggest-free] 122848\n  | |   |-[free] 122848\n  | |   |-[info] emulated\n  | |   |-[last-used] 32\n  | |   |-[sync-counter] 124\n  | |   |-[total] 122880\n  | |   \\-[used] 32\n  | \\-[subscriptions]\n  ...\n  Elapsed time for browsing ctrlX Data Layer tree: 9351 milliseconds\n</code></pre>"},{"location":"samples-net/datalayer.client.browse/index.html#install-the-app","title":"Install the App","text":"<p>Login into ctrlX and install the App (Apps).</p>"},{"location":"samples-net/datalayer.client.browse/index.html#gratulations-were-finished-lets-start-coding","title":"Gratulations - We're finished - Let's start coding","text":""},{"location":"samples-net/datalayer.client.browse/index.html#support","title":"Support","text":""},{"location":"samples-net/datalayer.client.browse/index.html#developer-community","title":"Developer Community","text":"<p>Please join the Developer Community</p>"},{"location":"samples-net/datalayer.client.browse/index.html#sdk-forum","title":"SDK Forum","text":"<p>Please visit the SDK Forum</p>"},{"location":"samples-net/datalayer.client.browse/index.html#issues","title":"Issues","text":"<p>If you've found an error in these sample, please file an issue</p>"},{"location":"samples-net/datalayer.client.browse/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"samples-net/datalayer.client.bulkread/index.html","title":"README .NET datalayer.client.bulkread","text":"<p>This .NET sample reads values in bulk mode from ctrlX Data Layer.</p>"},{"location":"samples-net/datalayer.client.bulkread/index.html#introduction","title":"Introduction","text":"<p>The sample demonstrates how to bulk read values from ctrlX Data Layer and write out the values to console. The bulk read is performed every 10 seconds in an endless loop.</p>"},{"location":"samples-net/datalayer.client.bulkread/index.html#description","title":"Description","text":"<p>The implementation include the following steps:</p> <ul> <li>Create and start the 'DatalayerSystem' service</li> <li>Create a client</li> <li>Bulk Read values synchron with method client.BulkRead(addresses)</li> <li>Bulk Read values asynchron with mehtod client.BulkReadAsync(addresses)</li> <li>Bulk Read methods are called in an endless loop every 10s.</li> </ul>"},{"location":"samples-net/datalayer.client.bulkread/index.html#prerequisites","title":"Prerequisites","text":"<p>Please read the common .NET docs here, first.</p>"},{"location":"samples-net/datalayer.client.bulkread/index.html#debug-and-run","title":"Debug and Run","text":"<p>Launch the app with the debugger attached by pressing F5.</p>"},{"location":"samples-net/datalayer.client.bulkread/index.html#build-and-install","title":"Build and Install","text":"<ol> <li>Launch Visual Studio Code</li> <li>Click on the Remote Explorer from the menu.</li> <li>Choose Open Folder.</li> <li>Open the directory datalayer.client.bulkread.</li> <li>Build and install snap as described here.</li> <li> <p>Check the output using Diagnostics:</p> </li> <li> <p>Login into your ctrlX</p> </li> <li>Navigate to Diagnostics -&gt; Logbook</li> <li>Click Settings on the right top corner</li> <li>Enable Show system messages</li> <li>Navigate to Filter -&gt; Units and check your snap.sdk-net-client-bulkread.app.service</li> <li>Now you should the see the app output diagnostics.</li> <li> <p>Press Refresh to update.</p> </li> <li> <p>If you have root permissions, you can also watch the output on any ssh console with the command:</p> <pre><code>sudo snap logs sdk-net-client-bulkread.app -f | more\n</code></pre> </li> </ol>"},{"location":"samples-net/datalayer.client.bulkread/index.html#console-output","title":"Console Output","text":"<pre><code>ctrlX Data Layer system started.\nctrlX Data Layer client created.\n# client.BulkRead\naddress: framework/metrics/system/cpu-utilisation-percent, value: 0,9, timestamp: 29.09.2022 12:38:13, result: DL_OK\naddress: framework/metrics/system/memavailable-mb, value: 438,60156, timestamp: 29.09.2022 12:38:13, result: DL_OK\naddress: framework/metrics/system/membuffers-mb, value: 26,777344, timestamp: 29.09.2022 12:38:13, result: DL_OK\naddress: framework/metrics/system/memcache-mb, value: 433,33594, timestamp: 29.09.2022 12:38:13, result: DL_OK\naddress: framework/metrics/system/memfree-mb, value: 14,636719, timestamp: 29.09.2022 12:38:13, result: DL_OK\naddress: framework/metrics/system/memtotal-mb, value: 975,8125, timestamp: 29.09.2022 12:38:13, result: DL_OK\naddress: framework/metrics/system/memused-percent, value: 52,6, timestamp: 29.09.2022 12:38:13, result: DL_OK\n# client.BulkReadAsync\naddress: framework/metrics/system/cpu-utilisation-percent, value: 0,9, timestamp: 29.09.2022 12:38:13, result: DL_OK\naddress: framework/metrics/system/memavailable-mb, value: 438,60156, timestamp: 29.09.2022 12:38:13, result: DL_OK\naddress: framework/metrics/system/membuffers-mb, value: 26,777344, timestamp: 29.09.2022 12:38:13, result: DL_OK\naddress: framework/metrics/system/memcache-mb, value: 433,33594, timestamp: 29.09.2022 12:38:13, result: DL_OK\naddress: framework/metrics/system/memfree-mb, value: 14,636719, timestamp: 29.09.2022 12:38:13, result: DL_OK\naddress: framework/metrics/system/memtotal-mb, value: 975,8125, timestamp: 29.09.2022 12:38:13, result: DL_OK\naddress: framework/metrics/system/memused-percent, value: 52,6, timestamp: 29.09.2022 12:38:13, result: DL_OK\n</code></pre>"},{"location":"samples-net/datalayer.client.bulkread/index.html#install-the-app","title":"Install the App","text":"<p>Login into ctrlX and install the App (Apps).</p>"},{"location":"samples-net/datalayer.client.bulkread/index.html#gratulations-were-finished-lets-start-coding","title":"Gratulations - We're finished - Let's start coding","text":""},{"location":"samples-net/datalayer.client.bulkread/index.html#support","title":"Support","text":""},{"location":"samples-net/datalayer.client.bulkread/index.html#developer-community","title":"Developer Community","text":"<p>Please join the Developer Community</p>"},{"location":"samples-net/datalayer.client.bulkread/index.html#sdk-forum","title":"SDK Forum","text":"<p>Please visit the SDK Forum</p>"},{"location":"samples-net/datalayer.client.bulkread/index.html#issues","title":"Issues","text":"<p>If you've found an error in these sample, please file an issue</p>"},{"location":"samples-net/datalayer.client.bulkread/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"samples-net/datalayer.client.simple/index.html","title":"README .NET datalayer.client.simple","text":"<p>This .NET sample reads values from ctrlX Data Layer.</p>"},{"location":"samples-net/datalayer.client.simple/index.html#introduction","title":"Introduction","text":"<p>The sample demonstrates how to read values from ctrlX Data Layer tree and write out the values to console. A subscription is used to get values by data change event in a deterministic publish interval. The single read is performed every 10 seconds in an endless loop.</p>"},{"location":"samples-net/datalayer.client.simple/index.html#description","title":"Description","text":"<p>The implementation include the following steps:</p> <ul> <li>Create and start the 'DatalayerSystem' service</li> <li>Create a client with 'tcp' protocol for remote connection or 'ipc' protocol if running inside snap.</li> <li>Create a subscription with publish interval of 1 s</li> <li>Write data change notification of subscription to console with timestamp, node and value</li> <li>Read value with client via single read once and in an endless loop every 10 s</li> </ul>"},{"location":"samples-net/datalayer.client.simple/index.html#prerequisites","title":"Prerequisites","text":"<p>Please read the common .NET docs here, first.</p>"},{"location":"samples-net/datalayer.client.simple/index.html#debug-and-run","title":"Debug and Run","text":"<p>Launch the app with the debugger attached by pressing F5.</p>"},{"location":"samples-net/datalayer.client.simple/index.html#build-and-install","title":"Build and Install","text":"<ol> <li>Launch Visual Studio Code</li> <li>Click on the Remote Explorer from the menu.</li> <li>Choose Open Folder.</li> <li>Open the directory datalayer.client.</li> <li>Build and install snap as described here.</li> <li> <p>Check the output using Diagnostics:</p> </li> <li> <p>Login into your ctrlX</p> </li> <li>Navigate to Diagnostics -&gt; Logbook</li> <li>Click Settings on the right top corner</li> <li>Enable Show system messages</li> <li>Navigate to Filter -&gt; Units and check your snap.sdk-net-client-simple.app.service</li> <li>Now you should the see the app output diagnostics.</li> <li> <p>Press Refresh to update.</p> </li> <li> <p>If you have root permissions, you can also watch the output on any ssh console with the command:</p> <pre><code>sudo snap logs sdk-net-client-simple.app -f | more\n</code></pre> </li> </ol>"},{"location":"samples-net/datalayer.client.simple/index.html#console-output","title":"Console Output","text":"<pre><code>Running inside snap: True\nctrlX Data Layer system started.\nctrlX Data Layer client created.\nClient connected: True\n10.03.2021 09:15:10, framework/metrics/system/cpu-utilisation-percent: 6 (subscription)\n10.03.2021 10:15:12, framework/metrics/system/memused-percent: 14 (single read)\n10.03.2021 09:15:11, framework/metrics/system/cpu-utilisation-percent: 13,6 (subscription)\n10.03.2021 09:15:12, framework/metrics/system/cpu-utilisation-percent: 2,5 (subscription)\n10.03.2021 09:15:13, framework/metrics/system/cpu-utilisation-percent: 7,4 (subscription)\n10.03.2021 09:15:14, framework/metrics/system/cpu-utilisation-percent: 6 (subscription)\n10.03.2021 09:15:15, framework/metrics/system/cpu-utilisation-percent: 3,7 (subscription)\n10.03.2021 09:15:16, framework/metrics/system/cpu-utilisation-percent: 4,9 (subscription)\n10.03.2021 09:15:18, framework/metrics/system/cpu-utilisation-percent: 6 (subscription)\n10.03.2021 09:15:19, framework/metrics/system/cpu-utilisation-percent: 7,2 (subscription)\n10.03.2021 09:15:20, framework/metrics/system/cpu-utilisation-percent: 6 (subscription)\n10.03.2021 10:15:22, framework/metrics/system/memused-percent: 14 (single read)\n10.03.2021 09:15:21, framework/metrics/system/cpu-utilisation-percent: 5 (subscription)\n10.03.2021 09:15:22, framework/metrics/system/cpu-utilisation-percent: 7,3 (subscription)\n10.03.2021 09:15:23, framework/metrics/system/cpu-utilisation-percent: 4,9 (subscription)\n10.03.2021 09:15:24, framework/metrics/system/cpu-utilisation-percent: 2,5 (subscription)\n10.03.2021 09:15:25, framework/metrics/system/cpu-utilisation-percent: 6,1 (subscription)\n10.03.2021 09:15:26, framework/metrics/system/cpu-utilisation-percent: 6 (subscription)\n10.03.2021 09:15:27, framework/metrics/system/cpu-utilisation-percent: 8,8 (subscription)\n10.03.2021 09:15:28, framework/metrics/system/cpu-utilisation-percent: 10,3 (subscription)\n10.03.2021 09:15:29, framework/metrics/system/cpu-utilisation-percent: 4,9 (subscription)\n10.03.2021 09:15:30, framework/metrics/system/cpu-utilisation-percent: 7,2 (subscription)\n10.03.2021 10:15:32, framework/metrics/system/memused-percent: 14 (single read)\n10.03.2021 09:15:31, framework/metrics/system/cpu-utilisation-percent: 6,1 (subscription)\n</code></pre>"},{"location":"samples-net/datalayer.client.simple/index.html#install-the-app","title":"Install the App","text":"<p>Login into ctrlX and install the App (Apps).</p>"},{"location":"samples-net/datalayer.client.simple/index.html#gratulations-were-finished-lets-start-coding","title":"Gratulations - We're finished - Let's start coding","text":""},{"location":"samples-net/datalayer.client.simple/index.html#support","title":"Support","text":""},{"location":"samples-net/datalayer.client.simple/index.html#developer-community","title":"Developer Community","text":"<p>Please join the Developer Community</p>"},{"location":"samples-net/datalayer.client.simple/index.html#sdk-forum","title":"SDK Forum","text":"<p>Please visit the SDK Forum</p>"},{"location":"samples-net/datalayer.client.simple/index.html#issues","title":"Issues","text":"<p>If you've found an error in these sample, please file an issue</p>"},{"location":"samples-net/datalayer.client.simple/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"samples-net/datalayer.provider.alldata/index.html","title":"README .NET datalayer.provider.alldata","text":"<p>This .NET sample provides all types of data to the ctrlX Data Layer tree.</p> <p>IMPORTANT:</p> <p>The sample creates and registers all nodes individually, which is recommended for small to medium sized set of nodes to handle. If you're dealing with a large set of nodes (big data provider) or any dynamic node hierarchy, we recommend to use a virtual provider approach, listening just to any wildcarded address ( e.g. myRoot/**) and using self-managed virtual nodes, just returned in OnBrowse() method, which is more efficient.</p> <p>Please read the Best Practise section in common .NET documentation for more details and recommended samples.</p>"},{"location":"samples-net/datalayer.provider.alldata/index.html#introduction","title":"Introduction","text":"<p>The sample demonstrates how to provide all available data types to ctrlX Data Layer tree. The demo creates a 'static' and a 'dynamic' folder under the root node 'samples'. The 'static' folder provides nodes with constant values. In the 'dynamic' folder the same nodes are provided as in 'static' folder but with changing value every second.</p>"},{"location":"samples-net/datalayer.provider.alldata/index.html#description","title":"Description","text":"<p>The sample demonstrates</p> <ul> <li> <p>How to provide nodes with different data types to ctrlX Data Layer</p> </li> <li> <p>How to create and provide meta data to nodes</p> </li> <li> <p>How to provide nodes with read-only or read-write support</p> </li> <li> <p>How to change node values dynamically</p> </li> <li> <p>How to register a user defined flatbuffers type</p> </li> <li> <p>How to read and write user defined flatbuffers nodes</p> </li> </ul>"},{"location":"samples-net/datalayer.provider.alldata/index.html#prerequisites","title":"Prerequisites","text":"<p>Please read the common .NET docs here, first.</p>"},{"location":"samples-net/datalayer.provider.alldata/index.html#debug-and-run","title":"Debug and Run","text":"<p>Launch the app with the debugger attached by pressing F5.</p>"},{"location":"samples-net/datalayer.provider.alldata/index.html#build-and-install","title":"Build and Install","text":"<ol> <li>Launch Visual Studio Code</li> <li>Click on the Remote Explorer from the menu.</li> <li>Choose Open Folder.</li> <li>Open the directory datalayer.provider.alldata.</li> <li>Build and install snap as described here.</li> <li>Checkout ctrlX Data Layer web frontend (Settings | Data Layer)</li> <li> <p>Check the output using Diagnostics:</p> </li> <li> <p>Login into your ctrlX</p> </li> <li>Navigate to Diagnostics -&gt; Logbook</li> <li>Click Settings on the right top corner</li> <li>Enable Show system messages</li> <li>Navigate to Filter -&gt; Units and check your snap.sdk-net-provider-alldata.app.service</li> <li>Now you should the see the app output diagnostics.</li> <li> <p>Press Refresh to update.</p> </li> <li> <p>If you have root permissions, you can also watch the output on any ssh console with the command:</p> </li> </ol> <pre><code>sudo snap logs sdk-net-provider-alldata.app -f | more\n</code></pre>"},{"location":"samples-net/datalayer.provider.alldata/index.html#screenshot","title":"Screenshot","text":""},{"location":"samples-net/datalayer.provider.alldata/index.html#install-the-app","title":"Install the App","text":"<p>Login into ctrlX and install the App (Apps).</p>"},{"location":"samples-net/datalayer.provider.alldata/index.html#gratulations-were-finished-lets-start-coding","title":"Gratulations - We're finished - Let's start coding","text":""},{"location":"samples-net/datalayer.provider.alldata/index.html#support","title":"Support","text":""},{"location":"samples-net/datalayer.provider.alldata/index.html#developer-community","title":"Developer Community","text":"<p>Please join the Developer Community</p>"},{"location":"samples-net/datalayer.provider.alldata/index.html#sdk-forum","title":"SDK Forum","text":"<p>Please visit the SDK Forum</p>"},{"location":"samples-net/datalayer.provider.alldata/index.html#issues","title":"Issues","text":"<p>If you've found an error in these sample, please file an issue</p>"},{"location":"samples-net/datalayer.provider.alldata/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"samples-net/datalayer.provider.simple/index.html","title":"README .NET datalayer.provider.simple","text":"<p>This .NET sample provides some registered nodes to the ctrlX Data Layer tree.</p> <p>IMPORTANT:</p> <p>The sample creates and registers all nodes individually, which is recommended for small to medium sized set of nodes to handle. If you're dealing with a large set of nodes (big data provider) or any dynamic node hierarchy, we recommend to use a virtual provider approach, listening just to any wildcarded address ( e.g. myRoot/**) and using self-managed virtual nodes, just returned in OnBrowse() method, which is more efficient.</p> <p>Please read the Best Practise section in common .NET documentation for more details and recommended samples.</p>"},{"location":"samples-net/datalayer.provider.simple/index.html#introduction","title":"Introduction","text":"<p>The sample demonstrates how to provide nodes to ctrlX Data Layer tree. The provider creates nodes with types of int/double/string. Also a complex type encoded by FlatBuffers is provided.</p>"},{"location":"samples-net/datalayer.provider.simple/index.html#description","title":"Description","text":"<p>The sample demonstrates</p> <ul> <li> <p>How to provide nodes with different data types to ctrlX Data Layer</p> </li> <li> <p>How to create and provide meta data to nodes</p> </li> <li> <p>How to provide nodes with read-only or read-write support</p> </li> <li> <p>How to register a user defined flatbuffers type</p> </li> </ul>"},{"location":"samples-net/datalayer.provider.simple/index.html#prerequisites","title":"Prerequisites","text":"<p>Please read the common .NET docs here, first.</p>"},{"location":"samples-net/datalayer.provider.simple/index.html#debug-and-run","title":"Debug and Run","text":"<p>Launch the app with the debugger attached by pressing F5.</p>"},{"location":"samples-net/datalayer.provider.simple/index.html#build-and-install","title":"Build and Install","text":"<ol> <li>Launch Visual Studio Code</li> <li>Click on the Remote Explorer from the menu.</li> <li>Choose Open Folder.</li> <li>Open the directory datalayer.provider.</li> <li>Build and install snap as described here.</li> <li>Checkout ctrlX Data Layer web frontend (Settings | Data Layer)</li> <li> <p>Check the output using Diagnostics:</p> </li> <li> <p>Login into your ctrlX</p> </li> <li>Navigate to Diagnostics -&gt; Logbook</li> <li>Click Settings on the right top corner</li> <li>Enable Show system messages</li> <li>Navigate to Filter -&gt; Units and check your snap.sdk-net-provider.app.service</li> <li>Now you should the see the app output diagnostics.</li> <li> <p>Press Refresh to update.</p> </li> <li> <p>If you have root permissions, you can also watch the output on any ssh console with the command:</p> </li> </ol> <p>```bash    sudo snap logs sdk-net-provider.app -f | more</p>"},{"location":"samples-net/datalayer.provider.simple/index.html#screenshot","title":"Screenshot","text":""},{"location":"samples-net/datalayer.provider.simple/index.html#install-the-app","title":"Install the App","text":"<p>Login into ctrlX and install the App (Apps).</p>"},{"location":"samples-net/datalayer.provider.simple/index.html#gratulations-were-finished-lets-start-coding","title":"Gratulations - We're finished - Let's start coding","text":""},{"location":"samples-net/datalayer.provider.simple/index.html#support","title":"Support","text":""},{"location":"samples-net/datalayer.provider.simple/index.html#developer-community","title":"Developer Community","text":"<p>Please join the Developer Community</p>"},{"location":"samples-net/datalayer.provider.simple/index.html#sdk-forum","title":"SDK Forum","text":"<p>Please visit the SDK Forum</p>"},{"location":"samples-net/datalayer.provider.simple/index.html#issues","title":"Issues","text":"<p>If you've found an error in these sample, please file an issue</p>"},{"location":"samples-net/datalayer.provider.simple/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"samples-net/datalayer.provider.virtual/index.html","title":"README .NET datalayer.provider.virtual","text":"<p>This .NET sample demonstrates how to write a light-weight provider, listing to a wildcard address and managing virtual nodes.</p> <p>IMPORTANT:</p> <p>The sample is recommended for large, very large or dynamic sized set of nodes to handle. We are listening just to any wildcarded address ( e.g. myRoot/**) and using self-managed virtual nodes, just returned in OnBrowse() method, which is very efficient.</p> <p>Please read the Best Practise section in common .NET documentation for more details and recommended samples.</p>"},{"location":"samples-net/datalayer.provider.virtual/index.html#introduction","title":"Introduction","text":"<p>The sample shows a basic concept for a leight-weight self-managed provider implementation</p>"},{"location":"samples-net/datalayer.provider.virtual/index.html#description","title":"Description","text":"<p>The sample creates some virtual nodes hold by an self-managed dictionary using the address to look up.</p>"},{"location":"samples-net/datalayer.provider.virtual/index.html#prerequisites","title":"Prerequisites","text":"<p>Please read the common .NET docs here, first.</p>"},{"location":"samples-net/datalayer.provider.virtual/index.html#debug-and-run","title":"Debug and Run","text":"<p>Launch the app with the debugger attached by pressing F5.</p>"},{"location":"samples-net/datalayer.provider.virtual/index.html#build-and-install","title":"Build and Install","text":"<ol> <li>Launch Visual Studio Code</li> <li>Click on the Remote Explorer from the menu.</li> <li>Choose Open Folder.</li> <li>Open the directory datalayer.provider.virtual.</li> <li>Build and install snap as described here.</li> <li>Checkout ctrlX Data Layer web frontend (Settings | Data Layer)</li> <li> <p>Check the output using Diagnostics:</p> </li> <li> <p>Login into your ctrlX</p> </li> <li>Navigate to Diagnostics -&gt; Logbook</li> <li>Click Settings on the right top corner</li> <li>Enable Show system messages</li> <li>Navigate to Filter -&gt; Units and check your snap.sdk-net-provider-virtual.app.service</li> <li>Now you should the see the app output diagnostics.</li> <li> <p>Press Refresh to update.</p> </li> <li> <p>If you have root permissions, you can also watch the output on any ssh console with the command:</p> </li> </ol> <pre><code>sudo snap logs sdk-net-provider-virtual.app -f | more\n</code></pre>"},{"location":"samples-net/datalayer.provider.virtual/index.html#install-the-app","title":"Install the App","text":"<p>Login into ctrlX and install the App (Apps).</p>"},{"location":"samples-net/datalayer.provider.virtual/index.html#gratulations-were-finished-lets-start-coding","title":"Gratulations - We're finished - Let's start coding","text":""},{"location":"samples-net/datalayer.provider.virtual/index.html#support","title":"Support","text":""},{"location":"samples-net/datalayer.provider.virtual/index.html#developer-community","title":"Developer Community","text":"<p>Please join the Developer Community</p>"},{"location":"samples-net/datalayer.provider.virtual/index.html#sdk-forum","title":"SDK Forum","text":"<p>Please visit the SDK Forum</p>"},{"location":"samples-net/datalayer.provider.virtual/index.html#issues","title":"Issues","text":"<p>If you've found an error in these sample, please file an issue</p>"},{"location":"samples-net/datalayer.provider.virtual/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"samples-net/diagnostics.logbook/index.html","title":"README .NET diagnostics.logbook","text":"<p>This .NET sample is logging messages to the logbook of the ctrlX CORE.</p>"},{"location":"samples-net/diagnostics.logbook/index.html#introduction","title":"Introduction","text":"<p>The project diagnostics.logbook provides a simple application example to log messages to the logbook of the ctrlX CORE.  </p>"},{"location":"samples-net/diagnostics.logbook/index.html#description","title":"Description","text":"<p>The implementation shows different ways to write messages to ctrlX logbook.</p> <ul> <li>The class KernelLoggerSample writes kernel log messages with the linux system command 'logger'.</li> <li>The class MicrosoftLoggerSample uses the nuget package extension Microsoft.Extensions.Logging to write logs to logbook.</li> </ul>"},{"location":"samples-net/diagnostics.logbook/index.html#prerequisites","title":"Prerequisites","text":"<p>Please read the common .NET docs here, first.</p>"},{"location":"samples-net/diagnostics.logbook/index.html#debug-and-run","title":"Debug and Run","text":"<p>Launch the app with the debugger attached by pressing F5.</p>"},{"location":"samples-net/diagnostics.logbook/index.html#build-and-install","title":"Build and Install","text":"<ol> <li>Launch Visual Studio Code</li> <li>Click on the Remote Explorer from the menu.</li> <li>Choose Open Folder.</li> <li>Open the directory diagnostics.logbook.</li> <li>Build and install snap as described here.</li> <li> <p>Check the output using Diagnostics:</p> </li> <li> <p>Login into your ctrlX</p> </li> <li>Navigate to Diagnostics -&gt; Logbook</li> <li>Click Settings on the right top corner</li> <li>Enable Show system messages</li> <li>Navigate to Filter -&gt; Units and check your snap.sdk-net-logbook.app.service</li> <li>Now you should the see the app output diagnostics.</li> <li> <p>Press Refresh to update.</p> </li> <li> <p>If you have root permissions, you can also watch the output on any ssh console with the command:</p> </li> </ol> <pre><code>   sudo snap logs sdk-net-logbook.app -f | more\n</code></pre>"},{"location":"samples-net/diagnostics.logbook/index.html#screenshot","title":"Screenshot","text":""},{"location":"samples-net/diagnostics.logbook/index.html#install-the-app","title":"Install the App","text":"<p>Login into ctrlX and install the App (Apps).</p>"},{"location":"samples-net/diagnostics.logbook/index.html#gratulations-were-finished-lets-start-coding","title":"Gratulations - We're finished - Let's start coding","text":""},{"location":"samples-net/diagnostics.logbook/index.html#support","title":"Support","text":""},{"location":"samples-net/diagnostics.logbook/index.html#developer-community","title":"Developer Community","text":"<p>Please join the Developer Community</p>"},{"location":"samples-net/diagnostics.logbook/index.html#sdk-forum","title":"SDK Forum","text":"<p>Please visit the SDK Forum</p>"},{"location":"samples-net/diagnostics.logbook/index.html#issues","title":"Issues","text":"<p>If you've found an error in these sample, please file an issue</p>"},{"location":"samples-net/diagnostics.logbook/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"samples-net/hello.web.asp/index.html","title":"README .NET hello asp.net","text":"<p>This .NET sample is a simple ASP.NET application.</p>"},{"location":"samples-net/hello.web.asp/index.html#introduction","title":"Introduction","text":"<p>Programm shows how to write a ASP.NET application running on ctrlX CORE.</p>"},{"location":"samples-net/hello.web.asp/index.html#description","title":"Description","text":"<p>The following code shows the main method with inline documentation:</p> <p>Program.cs</p>"},{"location":"samples-net/hello.web.asp/index.html#prerequisites","title":"Prerequisites","text":"<p>Please read the common .NET docs here, first.</p>"},{"location":"samples-net/hello.web.asp/index.html#debug-and-run","title":"Debug and Run","text":"<p>Launch the app with the debugger attached by pressing F5.</p>"},{"location":"samples-net/hello.web.asp/index.html#build-and-install","title":"Build and Install","text":"<ol> <li>Launch Visual Studio Code</li> <li>Click on the Remote Explorer from the menu.</li> <li>Choose Open Folder.</li> <li>Open the directory hello.web.asp.</li> <li>Build and install snap as described here.</li> <li> <p>Check the output using Diagnostics:</p> </li> <li> <p>Login into your ctrlX</p> </li> <li>Navigate to Diagnostics -&gt; Logbook</li> <li>Click Settings on the right top corner</li> <li>Enable Show system messages</li> <li>Navigate to Filter -&gt; Units and check your snap.sdk-net-hello-web-asp.app.service</li> <li>Now you should the see the app output diagnostics.</li> <li> <p>Press Refresh to update.</p> </li> <li> <p>If you have root permissions, you can also watch the output on any ssh console with the command:</p> <pre><code>sudo snap logs sdk-net-hello-web-asp.app -f | more\n</code></pre> </li> </ol>"},{"location":"samples-net/hello.web.asp/index.html#install-the-app","title":"Install the App","text":"<p>Login into ctrlX and install the App (Apps).</p>"},{"location":"samples-net/hello.web.asp/index.html#gratulations-were-finished-lets-start-coding","title":"Gratulations - We're finished - Let's start coding","text":""},{"location":"samples-net/hello.web.asp/index.html#support","title":"Support","text":""},{"location":"samples-net/hello.web.asp/index.html#developer-community","title":"Developer Community","text":"<p>Please join the Developer Community</p>"},{"location":"samples-net/hello.web.asp/index.html#sdk-forum","title":"SDK Forum","text":"<p>Please visit the SDK Forum</p>"},{"location":"samples-net/hello.web.asp/index.html#issues","title":"Issues","text":"<p>If you've found an error in these sample, please file an issue</p>"},{"location":"samples-net/hello.web.asp/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"samples-net/hello.world/index.html","title":"README .NET hello.world","text":"<p>This .NET sample prints out \"Hello World\" to the console.</p>"},{"location":"samples-net/hello.world/index.html#introduction","title":"Introduction","text":"<p>The app is prompting \"Hello World\" to standard output.</p>"},{"location":"samples-net/hello.world/index.html#description","title":"Description","text":"<p>The implementation include the following steps:</p> <ul> <li>Write 'Hello World' to console in an endless loop every second.</li> </ul>"},{"location":"samples-net/hello.world/index.html#prerequisites","title":"Prerequisites","text":"<p>Please read the common .NET docs here, first.</p>"},{"location":"samples-net/hello.world/index.html#debug-and-run","title":"Debug and Run","text":"<p>Launch the app with the debugger attached by pressing F5.</p>"},{"location":"samples-net/hello.world/index.html#build-and-install","title":"Build and Install","text":"<ol> <li>Launch Visual Studio Code</li> <li>Click on the Remote Explorer from the menu.</li> <li>Choose Open Folder.</li> <li>Open the directory datalayer.browse.</li> <li>Build and install snap as described here.</li> <li> <p>Check the output using Diagnostics:</p> </li> <li> <p>Login into your ctrlX</p> </li> <li>Navigate to Diagnostics -&gt; Logbook</li> <li>Click Settings on the right top corner</li> <li>Enable Show system messages</li> <li>Navigate to Filter -&gt; Units and check your snap.sdk-net-hello-world.app.service</li> <li>Now you should the see the app output diagnostics.</li> <li> <p>Press Refresh to update.</p> </li> <li> <p>If you have root permissions, you can also watch the output on any ssh console with the command:</p> <pre><code>sudo snap logs sdk-net-hello-world.app -f | more\n</code></pre> </li> </ol>"},{"location":"samples-net/hello.world/index.html#console-output","title":"Console Output","text":"<p><code>bash Hello World! 11.03.2021 09:45:05 Hello World! 11.03.2021 09:45:06 Hello World! 11.03.2021 09:45:07 Hello World! 11.03.2021 09:45:08</code></p>"},{"location":"samples-net/hello.world/index.html#install-the-app","title":"Install the App","text":"<p>Login into ctrlX and install the App (Apps).</p>"},{"location":"samples-net/hello.world/index.html#gratulations-were-finished-lets-start-coding","title":"Gratulations - We're finished - Let's start coding","text":""},{"location":"samples-net/hello.world/index.html#support","title":"Support","text":""},{"location":"samples-net/hello.world/index.html#developer-community","title":"Developer Community","text":"<p>Please join the Developer Community</p>"},{"location":"samples-net/hello.world/index.html#sdk-forum","title":"SDK Forum","text":"<p>Please visit the SDK Forum</p>"},{"location":"samples-net/hello.world/index.html#issues","title":"Issues","text":"<p>If you've found an error in these sample, please file an issue</p>"},{"location":"samples-net/hello.world/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"samples-node/index.html","title":"Samples Nodejs","text":""},{"location":"samples-node/index.html#find-out-the-supported-samples","title":"Find out the supported samples","text":""},{"location":"samples-node/index.html#basic-samples","title":"Basic Samples","text":"<ul> <li>Hello World</li> <li>ctrlX Data Layer Client</li> <li>ctrlX Data Layer Provider</li> <li>ctrlX WebDAV App data Client</li> </ul>"},{"location":"samples-node/index.html#advanced-samples","title":"Advanced Samples","text":"<ul> <li>ctrlX Data Layer Client: Bulk Read</li> <li>ctrlX Data Layer Client: Browser</li> <li>ctrlX Data Layer Provider: All Data Types</li> </ul>"},{"location":"samples-node/index.html#angular-samples","title":"Angular Samples","text":"<ul> <li>Angular Multi-language</li> </ul>"},{"location":"samples-node/index.html#build-a-snap","title":"Build a Snap","text":"<p>See Samples Overview</p>"},{"location":"samples-node/angular.multi-language/index.html","title":"README Node.js angular.multi-language","text":"<p>This multi-language sample is an Angular application to demonstrate the use of localization files in ctrlX apps.</p>"},{"location":"samples-node/angular.multi-language/index.html#introduction","title":"Introduction","text":"<p>We use the NGX-Translate library to localize our webapps. Details of this library can be found here: http://www.ngx-translate.com/</p> <p>The basic concept of localization is to extract localizable texts from HTML and Type Script and to put them into language specific localization files. At runtime localized texts are loaded from localization files depending on the currently selected language and displayes within the UI.</p>"},{"location":"samples-node/angular.multi-language/index.html#localization-files","title":"Localization Files","text":""},{"location":"samples-node/angular.multi-language/index.html#concept-and-notation","title":"Concept and Notation","text":"<p>All texts to translate are stored in json localization files. Localization files are loaded at runtime from: https://{ip}/assets/i18n/</p> <ul> <li>To ensure that several localization files can be located in the assets directory in parallel, they have to comply to the following naming convention:     webAppName.(lang-ISO_639-1-code).json</li> <li>Localization files contain localizable texts for exactly one language and for exactly one webapp.</li> <li>For ISO codes refer to https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes</li> </ul> <p>Example:</p> <pre><code>myApp.en.json\nmyApp.de.json\n</code></pre>"},{"location":"samples-node/angular.multi-language/index.html#content-and-structure","title":"Content and structure","text":"<p>Localization files are basically key/values lists. Each key/value pair represents one localizable string.</p> <p>The basic format of a key/value entry is:</p> <pre><code>\"&lt;key&gt;\": \"&lt;translated text&gt;\"\n</code></pre>"},{"location":"samples-node/angular.multi-language/index.html#key-naming-convention","title":"Key naming convention","text":"<p>Keys have to comply the following convention to avoid conflicts when several localization files are loaded simultaneously at runtime:</p> <pre><code>(webApp id).(component).(element)[.type]\n</code></pre> <ul> <li>webapp id: to make keys unique across all webapps and id has to be part of a key (e.g. \"plc\", \"wrk\", \"frw\" ,\"idm\"...)</li> <li>component: denotes the building block (angular component, service etc.) within a webapp where the translatable text is located (e.g. login-dialog,control-details,common-texts...)</li> <li>element: denotes the ui-element within a component on which the text is placed (e.g. connectionfailed, userimage, acceleration...)</li> <li>type: denotes the type of the ui-element. This gives translators additional information that is relevant for translation. It is only required for the certain ui-element types</li> </ul> <pre><code>title  (page / dialog titles)\nheader (column headers etc.)\ntab (tab page titles)\nmenu (sidebar menus and other menus)\nsub menu (sidebar menus and other menus)\nbutton (button text)\ntooltip (tooltip text max length?)\n</code></pre>"},{"location":"samples-node/angular.multi-language/index.html#localization-file-formats","title":"Localization file formats","text":"<p>There are two formats of localization files: the flat format and the namespaced format.</p>"},{"location":"samples-node/angular.multi-language/index.html#flat-format","title":"Flat format","text":"<p>In flat format each key/value pair corresponds to one line within the json file.</p> <p>The flat format is the straight forward approach that can be used especially in small webapps that do not have much translatable text. This is quite simple. Though with increasing file length it becomes difficult to keep overview about the file content.</p> <p>Example</p> <pre><code>{\n  \"frw.configStartPage.packetFlowOverview\": \"Packet flow overview\",\n  \"frw.configStartPage.configurePacketFiltering\": \"Configure packet filtering\",\n  \"frw.configStartPage.configureNat\": \"Configure network address translation\"\n}\n</code></pre> <p>or</p> <pre><code>{\n  \"wrk.settings.title\": \"Setting\",\n  \"wrk.settings.help.header\": \"Help\",\n  \"wrk.settings.control-emulation.header\": \"Virtual control emulation\",\n  \"wrk.settings.control-emulation.tooltip\": \"Only evaluated when starting a control\",\n  \"wrk.settings.control-emulation\": \"Show the emulation process window for a running ctrlX COREvirtual\"\n}\n</code></pre>"},{"location":"samples-node/angular.multi-language/index.html#namespaced-format","title":"Namespaced format","text":"<p>To add structure to extensive localization files the namespaced format can be used.</p> <p>In this format the effective key (e.g. \"frw.configStartPage.packetFlowOverview\") will be composed of the namespace (e.g. \"frw.configStartPage) and the key within the namespace (e.g. \"packetFlowOverview\"). This means that both formats are equivalent and represent the same localization information.</p> <p>Example:</p> <pre><code>{\n  \"frw.configStartPage\": {\n      \"packetFlowOverview\": \"Packet flow overview\",\n      \"configurePacketFiltering\": \"Configure packet filtering\",\n      \"configureNat\": \"Configure network address translation\"\n    }\n}\n</code></pre> <p>or</p> <pre><code>{\n  \"wrk.settings\": {\n  \"title\": \"Setting\",\n  \"help.header\": \"Help\",\n  \"control-emulation.header\": \"Virtual control emulation\",\n  \"control-emulation.tooltip\": \"Only evaluated when starting a control\",\n  \"control-emulation\": \"Show the emulation process window for a running ctrlX COREvirtual\"\n}\n</code></pre> <p>Important</p> <p>Only add texts to be translated in the file. Texts that should not be translated do not belong in the translation file. It is not possible to add comments into to a translation file.</p>"},{"location":"samples-node/angular.multi-language/index.html#responsibilites-of-webapps-regarding-localization","title":"Responsibilites of webapps regarding localization","text":"<p>WebApps</p> <ul> <li>are responsible to comply naming conventions for localization files</li> <li>are responsible to transfer the localization files of their used weblibs to their own assets folder (angular.json =&gt; glob)</li> <li>are responsible to load their own localization files as well as the localization files of their used weblibs (app.module.ts =&gt; TranslationModule, MultiTranslateHttpLoader)</li> <li>are responsible to set the current language as well as the fallback language</li> </ul>"},{"location":"samples-node/angular.multi-language/index.html#how-to-make-webapps-localizable","title":"How to make webapps localizable","text":""},{"location":"samples-node/angular.multi-language/index.html#install-ngx-translate-and-ngx-translate-multi-http-loader","title":"Install ngx-translate and ngx-translate-multi-http-loader","text":"<p>Use the following commands to install ngx-translate and ngx-translate-multi-http-loader:</p> <pre><code>npm install @ngx-translate/core @ngx-translate/http-loader rxjs --save\nnpm install ngx-translate-multi-http-loader --save\n</code></pre>"},{"location":"samples-node/angular.multi-language/index.html#add-an-assetsi18n-folder-to-your-webapp-project","title":"Add an assets/i18n folder to your webapp project","text":"<p>Add the assets-folder within the src-folder in webapps, as listed below:</p> <pre><code>|- &lt;webapp-name&gt;\n    |- src              &lt;= sources are here\n        |- assets\n        |   |- i18n    &lt;= localization files are located here\n        |       |- &lt;webapp-name&gt;.en.json\n        |       |- &lt;webapp-name&gt;.de.json|\n    |- app ...\n</code></pre>"},{"location":"samples-node/angular.multi-language/index.html#add-the-assets-folder-of-weblibs-used-in-the-webapp-to-the-assets-array-in-angularjson","title":"Add the assets folder of weblibs used in the webapp to the assets array in angular.json","text":"<pre><code>{\n  \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n  ...\n  \"projects\": {\n    \"webapp.&lt;app-name&gt;\": {\n    ...\n      \"architect\": {\n        \"build\": {\n          \"builder\": \"@angular-devkit/build-angular:browser\",\n          \"options\": {\n            \"outputPath\": \"dist/&lt;app-name&gt;\",\n            \"index\": \"src/index.html\",\n            \"main\": \"src/main.ts\",\n            \"polyfills\": \"src/polyfills.ts\",\n            \"tsConfig\": \"tsconfig.app.json\",\n            \"baseHref\": \"/webapp.&lt;app-name&gt;/\",\n            ...\n            \"assets\": [\n              \"src/assets\"\n            ],\n            styles\": [\n              \"src/styles.scss\"\n            ],\n            \"scripts\": []\n          },\n          ...\n}\n</code></pre>"},{"location":"samples-node/angular.multi-language/index.html#add-the-translatemodule-to-appmodulets","title":"Add the TranslateModule to app.module.ts","text":"<pre><code>import { TranslateModule, TranslateLoader } from '@ngx-translate/core';\nimport { MultiTranslateHttpLoader } from 'ngx-translate-multi-http-loader';\n\nexport function createMultiTranslateHttpLoader(http: HttpClient): TranslateLoader {\n  return new MultiTranslateHttpLoader(http, [\n\n//This is how it goes for apps that uses lazy loaded modules (example: firewall app)\n{ prefix: './&lt;webapp-name&gt;/assets/i18n/&lt;webapp-name&gt;.', suffix: '.json' },   &lt;= add this for the webapp\n{ prefix: './&lt;webapp-name&gt;/assets/i18n/&lt;weblib-name.', suffix: '.json' },    &lt;= add such a line for each weblib used in the webapp\n\n//This is how it goes for apps that does NOT use lazy loaded modules (example: webapp.motion)\n{ prefix: './assets/i18n/&lt;webapp-name&gt;.', suffix: '.json' },                 &lt;= add this for the webapp\n{ prefix: './assets/i18n/&lt;weblib-name.', suffix: '.json' },                  &lt;= add such a line for each weblib used in the webapp\n]);\n}\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    ...,\n    TranslateModule.forRoot({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: createMultiTranslateHttpLoader,\n        deps: [HttpClient]\n      },\n      defaultLanguage: 'en'\n    }),\n    ...\n</code></pre> <p>Note</p> <p>Note that in webapp modules TranslateModule.forRoot() must be called. Note that English (en) is defined as defaultLanguage. That means English is the fallback language if a translation is not available in the currently selected language.</p>"},{"location":"samples-node/angular.multi-language/index.html#add-the-translatemodule-to-lazy-loaded-feature-modules-in-feature-namemodulets","title":"Add the TranslateModule to lazy-loaded feature modules in {feature-name}.module.ts","text":"<pre><code>import { HttpClientModule} from '@angular/common/http';\nimport { TranslateModule } from '@ngx-translate/core';\n\n@NgModule({\n  declarations: [\n    ...\n  ],\n  imports: [\n    ...,\n    HttpClientModule,\n    TranslateModule.forChild({\n      extend: true\n    }),\n    ...\n  ],\n</code></pre> <p>Note</p> <p>Note that in feature modules TranslateModule.forChild() must be called.</p>"},{"location":"samples-node/angular.multi-language/index.html#localize-the-ui-related-parts-of-your-webapp","title":"Localize the UI related parts of your webapp","text":"<p>Please see details here: https://github.com/ngx-translate/core</p>"},{"location":"samples-node/angular.multi-language/index.html#add-the-translatemodule-for-unit-tests","title":"Add the TranslateModule for unit tests","text":"<p>Because of injected translate service it is necessary to modify unit tests of app.component (app.component.spec.ts) and other components ({other}.component.spec.ts).</p> <p>It is also very important to make the change in the \"app-routing.module.spec.ts\" as well.</p> <pre><code>import { TranslateModule} from '@ngx-translate/core';\n\ndescribe('AppComponent', () =&gt; {\n  ...\n  beforeEach(waitForAsync(() =&gt; {\n    TestBed.configureTestingModule({\n      imports: [\n        ...,\n        TranslateModule.forRoot(),   // This is sufficcient. Note that only the text keys are displayed when unit tests are executed.\n        ...\n      ],\n      ...\n    })\n    .compileComponents();\n  }));\n</code></pre>"},{"location":"samples-node/angular.multi-language/index.html#translation-process","title":"Translation process","text":"<p>The json language file can be translated using common translation tools like Passolo or BabelEdit.</p>"},{"location":"samples-node/angular.multi-language/index.html#enable-locale-specific-formatting-with-the-angular-pipe-operators","title":"Enable locale specific formatting with the angular pipe operators","text":""},{"location":"samples-node/angular.multi-language/index.html#problem","title":"Problem","text":"<p>I need to format a long decimal number with thousand separators (123456789 \u2192 123.456.789, assuming de-DE formatting).\\ When I use the Angular DecimalPipe I get \"123,456,789\" as a result regardless of the language settings (DE or EN) in the ctrlX app.\\</p> <p>I tried to supply a locale to the DecimalPipe like this:</p> <pre><code>&lt;td mat-cell *matCellDef=\"let item\"&gt;{{ item.sum | number:'0.0-0':'de-DE'}}&lt;/td&gt;\n</code></pre> <p>The idea here is to provide a locale derived from the value of currentLang of the TranslateService.</p> <p>I get the error:</p> <pre><code>_ERROR Error: NG02100: InvalidPipeArgument: 'Missing locale data for the locale \"de-DE\".' for pipe 'DecimalPipe'._\n</code></pre> <p>The reason for this error seems to be a missing registration for the locale de-DE\\ It seems that at the moment there is no general guideline on how to handle locale aware formatting within our application.</p>"},{"location":"samples-node/angular.multi-language/index.html#expected-behavior","title":"Expected behavior","text":"<p>When the user changes between languages in the ctrlX app, the formatting of numbers and dates is influcenced by that change.\\ As a developer I can use the standard Angular pipes like DecimalPipe and the formatting of the output respects the current language selection.\\ This must be managed globally. This is not a responsibility of a single feature module.\\ As there are multiple locales per language (e.g. en-US, en-GB) , we must either decide on a fixed locale per language or we must provide the user with the ability to select the locale in addition to the language.</p>"},{"location":"samples-node/angular.multi-language/index.html#solution","title":"Solution","text":"<p>After some research here is a possible solution. It involves the following steps.</p> <ul> <li>Register a provider that will a provide a value of the LOCALE_ID that is based on the currently selected language.</li> <li>Register the localeData for the German language.</li> </ul> <p>Here are the changes necessary to make this work. Everything is located in the app.module file.</p> <pre><code>import { APP_INITIALIZER, LOCALE_ID, NgModule} from '@angular/core';\nimport { registerLocaleData } from \"@angular/common\";\nimport localeDe from \"@angular/common/locales/de\";\n\n@NgModule({\n  declarations: [\n  // existing code omitted\n  ],\n  imports: [\n  // existing code omitted\n  ],\n  providers: [\n    {\n    // existing code omitted\n    }, {\n        provide: LOCALE_ID,\n        deps: [TranslateService],\n        useFactory: (translateService: TranslateService) =&gt; translateService.currentLang\n        }\n  ],\n  bootstrap: [AppComponent]\n})\n\nexport class AppModule {\n  constructor() {\n    registerLocaleData(localeDe);\n  }\n}\n</code></pre>"},{"location":"samples-node/angular.multi-language/index.html#gratulations-were-finished-lets-start-coding","title":"Gratulations - We're finished - Let's start coding","text":""},{"location":"samples-node/angular.multi-language/index.html#support","title":"Support","text":""},{"location":"samples-node/angular.multi-language/index.html#developer-community","title":"Developer Community","text":"<p>Please join the Developer Community</p>"},{"location":"samples-node/angular.multi-language/index.html#sdk-forum","title":"SDK Forum","text":"<p>Please visit the SDK Forum</p>"},{"location":"samples-node/angular.multi-language/index.html#issues","title":"Issues","text":"<p>If you've found an error in these sample, please file an issue</p>"},{"location":"samples-node/angular.multi-language/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"samples-node/datalayer.client.browse/index.html","title":"README Node.js datalayer.client.browse","text":"<p>This Node.js sample writes out all node values from ctrlX Data Layer to console.</p>"},{"location":"samples-node/datalayer.client.browse/index.html#introduction","title":"Introduction","text":"<p>The sample demonstrates how to traverse the whole ctrlX Data Layer tree. The values of the nodes if readable are printed out to console as human readable strings. Also complex values with structure (encoded by FlatBuffers) are written as JSON string to console.</p>"},{"location":"samples-node/datalayer.client.browse/index.html#description","title":"Description","text":"<p>The sample datalayer.client.browse demonstrates</p> <ul> <li>How to browse nodes of the ctrlX Data Layer</li> <li>How to read value as json from a node</li> </ul>"},{"location":"samples-node/datalayer.client.browse/index.html#debug-and-run","title":"Debug and Run","text":"<ol> <li>Run 'npm install' in the terminal.  </li> <li>Launch the app with the debugger attached by pressing F5.</li> </ol>"},{"location":"samples-node/datalayer.client.browse/index.html#build-and-install","title":"Build and Install","text":"<ol> <li>Launch Visual Studio Code</li> <li>Click on the Remote Explorer from the menu.</li> <li>Choose Open Folder.</li> <li>Open the directory datalayer.client.browse.</li> <li>Build and install snap as described here.</li> <li> <p>Check the output using Diagnostics:</p> </li> <li> <p>Login into your ctrlX</p> </li> <li>Navigate to Diagnostics -&gt; Logbook</li> <li>Click Settings on the right top corner</li> <li>Enable Show system messages</li> <li>Navigate to Filter -&gt; Units and check your snap.sdk-node-client-browse.app.service</li> <li>Now you should the see the app output diagnostics.</li> <li> <p>Press Refresh to update.</p> </li> <li> <p>If you have root permissions, you can also watch the output on any ssh console with the command:</p> </li> </ol> <pre><code>sudo snap logs sdk-node-client-browse.app -f | more\n</code></pre>"},{"location":"samples-node/datalayer.client.browse/index.html#console-output","title":"Console Output","text":"<pre><code>Running inside snap: False\nctrlX Data Layer system started.\nctrlX Data Layer client created.\nClient connected: True\n\\-[]\n  |-[datalayer]\n  | |-[curvemq]\n  | | \\-[publickey] V=tGQ43.RsrvZ#K0]eLTs?vpyfCNN?^/sV6MGh7N\n  | |-[debug]\n  | |-[nodes] [datalayer/debug/*,datalayer/curvemq/publickey,datalayer/nodes,datalayer/nodesrt,datalayer/subscriptions/clients/*,datalayer/subscriptions/clients/*/subscriptions/*,datalayer/subscriptions/clients/*/subscriptions/*/nodes,datalayer/subscriptions/clients/*/subscriptions/*/properties,datalayer/subscriptions/settings,datalayer/retain/emu/data,datalayer/retain/emu/data/__,datalayer/retain/emu/info,datalayer/retain/emu/map,datalayer/retain/chunks,datalayer/retain/chunks/__,datalayer/retain/stats,datalayer/retain/stats/free,datalayer/retain/stats/used,datalayer/retain/stats/total,datalayer/retain/stats/biggest-free,datalayer/retain/stats/info,datalayer/retain/stats/sync-counter,datalayer/retain/stats/last-used,types/datalayer/metadata,types/datalayer/reflection,types/datalayer/memory,types/datalayer/memory_map,types/datalayer/token,types/datalayer/problem,types/datalayer/retain_stats,types/datalayer/subscription_properties,types/datalayer/subscription_data,types/datalayer/subscription_settings,types/datalayer/persistence_param,types/datalayer/subscription,types/datalayer/bool8,types/datalayer/int8,types/datalayer/uint8,types/datalayer/int16,types/datalayer/uint16,types/datalayer/int32,types/datalayer/uint32,types/datalayer/int64,types/datalayer/uint64,types/datalayer/float32,types/datalayer/float64,types/datalayer/string,types/datalayer/array-of-bool8,types/datalayer/array-of-int8,types/datalayer/array-of-uint8,types/datalayer/array-of-int16,types/datalayer/array-of-uint16,types/datalayer/array-of-int32,types/datalayer/array-of-uint32,types/datalayer/array-of-int64,types/datalayer/array-of-uint64,types/datalayer/array-of-float32,types/datalayer/array-of-float64,types/datalayer/array-of-string,types/datalayer/raw,types/datalayer/remoteconfig,types/datalayer/framework/bundle,types/datalayer/framework/bundlelist,types/datalayer/framework/dependency,types/datalayer/framework/dependencylist,types/datalayer/framework/interface,types/datalayer/framework/interfacelist,types/datalayer/framework/component,types/datalayer/framework/componentlist,types/datalayer/framework/property,types/datalayer/framework/propertylist,types/diagnosis/cfg-class,types/diagnosis/identification,types/diagnosis/list-identification-timestamp,types/diagnosis/identification-timestamp,types/diagnosis/registration,types/diagnosis/set,types/scheduler/callable,types/scheduler/duration,types/scheduler/duration-timer,types/scheduler/histogram,types/scheduler/programs,types/scheduler/state,types/scheduler/task,types/scheduler/trigger-source,types/scheduler/startup-error-reaction,types/scheduler/admin,types/scheduler/watchdog-type,types/scheduler/watchdog-error-reaction-class,types/scheduler/watchdog-error-reaction-configuration,types/scheduler/watchdog,types/scheduler/controls,types/systemhandler/state,types/script/cfg,types/script/cfg/init-script,types/script/instances,types/script/instances/cmd/file,types/script/instances/cmd/string,types/script/instances/diag,types/script/state/languages,devices/remotes/__,framework/bundles,framework/bundles/__,framework/metrics/system/cpu-utilisation-percent,framework/metrics/system/memtotal-mb,framework/metrics/system/memfree-mb,framework/metrics/system/memavailable-mb,framework/metrics/system/memused-mb,framework/metrics/system/membuffers-mb,framework/metrics/system/memcache-mb,framework/metrics/system/memused-percent,framework/metrics/process/vmsize-kb,framework/metrics/process/vmrss-kb,framework/metrics/process/vmshared-kb,framework/metrics/process/memused-percent,framework/state,framework/events/framework-started,diagnosis/cfg/realtime/numbers,diagnosis/cfg/realtime/numbers/class,diagnosis/clear/error,diagnosis/confirm/error,diagnosis/get/actual/list,diagnosis/get/actual/log,diagnosis/get/text,diagnosis/registration/detailed/register,diagnosis/registration/detailed/unregister,diagnosis/registration/main/register,diagnosis/registration/main/unregister,diagnosis/set,diagnosis/set/reset-active,diagnosis/set/set-active,diagnosis/set/set-and-reset,trace/rexroth-automationcore/units,trace/rexroth-automationcore/units/__,trace/rexroth-automationcore/admin/cfg/*,scheduler/tasks/*/watchdog,scheduler/tasks/*/watchdog/__,scheduler/__,script/cfg,script/cfg/load-all,script/cfg/save-all,script/cfg/init-script,script/cfg/init-script/file,script/cfg/init-script/language,script/cfg/init-script/parameter,script/admin/cfg/load,script/admin/cfg/save,script/instances/*,script/instances/*/cmd/file,script/instances/*/cmd/string,script/instances/*/cmd/reset,script/instances/*/cmd/abort,script/instances/*/state/opstate,script/instances/*/state/script,script/instances/*/state/line,script/instances/*/state/attached-to,script/instances/*/state/pid,script/instances/*/diag,script/instances/*/diag/last-main-diag,script/instances/*/diag/last-detail-diag,script/instances/*/diag/err-msg,script/instances/*/diag/err-trace,script/state/languages/*]\n  | |-[nodesrt] [datalayer/retain/emu]\n  | |-[retain]\n  | | |-[chunks] []\n  | | |-[emu]\n  | | | |-[data] []\n  | | | |-[info] {\"type\": \"Shared\",\"id\": \"/snap.rexroth-automationcore.405e2e7a-63ae-0039-056b-deadbe000002\",\"sizeBytes\": 122880}\n  | | | \\-[map] {\"revision\": 0}\n  | | \\-[stats] {\"total\": 122880,\"free\": 122848,\"used\": 32,\"biggestFree\": 122848,\"syncCounter\": 124,\"lastUsed\": 32}\n  | |   |-[biggest-free] 122848\n  | |   |-[free] 122848\n  | |   |-[info] emulated\n  | |   |-[last-used] 32\n  | |   |-[sync-counter] 124\n  | |   |-[total] 122880\n  | |   \\-[used] 32\n  | \\-[subscriptions]\n  ...\n  Elapsed time for browsing ctrlX Data Layer tree: 9351 milliseconds\n</code></pre>"},{"location":"samples-node/datalayer.client.browse/index.html#install-the-app","title":"Install the App","text":"<p>Login into ctrlX and install the App (Apps).</p>"},{"location":"samples-node/datalayer.client.browse/index.html#gratulations-were-finished-lets-start-coding","title":"Gratulations - We're finished - Let's start coding","text":""},{"location":"samples-node/datalayer.client.browse/index.html#support","title":"Support","text":""},{"location":"samples-node/datalayer.client.browse/index.html#developer-community","title":"Developer Community","text":"<p>Please join the Developer Community</p>"},{"location":"samples-node/datalayer.client.browse/index.html#sdk-forum","title":"SDK Forum","text":"<p>Please visit the SDK Forum</p>"},{"location":"samples-node/datalayer.client.browse/index.html#issues","title":"Issues","text":"<p>If you've found an error in these sample, please file an issue</p>"},{"location":"samples-node/datalayer.client.browse/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"samples-node/datalayer.client.bulkread/index.html","title":"README Node.js datalayer.client.bulkread","text":"<p>This Node.js sample reads values in bulk mode from ctrlX Data Layer.</p>"},{"location":"samples-node/datalayer.client.bulkread/index.html#introduction","title":"Introduction","text":"<p>The sample demonstrates how to bulk read values from ctrlX Data Layer and write out the values to console. The bulk read is performed every 10 seconds in an endless loop.</p>"},{"location":"samples-node/datalayer.client.bulkread/index.html#description","title":"Description","text":"<p>The sample datalayer.client.bulkread demonstrates</p> <ul> <li>Create and start the 'DatalayerSystem' service</li> <li>Create a client</li> <li>Bulk Read values with method client.BulkRead(addresses)</li> <li>Bulk Read methods are called in an endless loop every 10s.</li> </ul>"},{"location":"samples-node/datalayer.client.bulkread/index.html#prerequisites","title":"Prerequisites","text":"<p>Please read the common Node.js docs here, first.</p>"},{"location":"samples-node/datalayer.client.bulkread/index.html#debug-and-run","title":"Debug and Run","text":"<ol> <li>Run 'npm install' in the terminal.  </li> <li>Launch the app with the debugger attached by pressing F5.</li> </ol>"},{"location":"samples-node/datalayer.client.bulkread/index.html#build-and-install","title":"Build and Install","text":"<ol> <li>Launch Visual Studio Code</li> <li>Click on the Remote Explorer from the menu.</li> <li>Choose Open Folder in QEMU VM.</li> <li>Open the directory datalayer.client.bulkread.</li> <li>Build and install snap as described here.</li> <li> <p>Check the output using Diagnostics:</p> </li> <li> <p>Login into your ctrlX</p> </li> <li>Navigate to Diagnostics -&gt; Logbook</li> <li>Click Settings on the right top corner</li> <li>Enable Show system messages</li> <li>Navigate to Filter -&gt; Units and check your snap.sdk-node-client-bulkread.app.service</li> <li>Now you should the see the app output diagnostics.</li> <li> <p>Press Refresh to update.</p> </li> <li> <p>If you have root permissions, you can also watch the output on any ssh console with the command:</p> <pre><code>sudo snap logs sdk-node-client-bulkread.app -f | more\n</code></pre> </li> </ol>"},{"location":"samples-node/datalayer.client.bulkread/index.html#console-output","title":"Console Output","text":"<pre><code>connection string: ipc://\naddress: framework/metrics/system/cpu-utilisation-percent, value: 27.6, timestamp: 2022-10-18T14:40:15.440Z, result: DL_OK\naddress: framework/metrics/system/memavailable-mb, value: 401.9296875, timestamp: 2022-10-18T14:40:15.440Z, result: DL_OK\naddress: framework/metrics/system/membuffers-mb, value: 12.60546875, timestamp: 2022-10-18T14:40:15.440Z, result: DL_OK\naddress: framework/metrics/system/memcache-mb, value: 400.5859375, timestamp: 2022-10-18T14:40:15.440Z, result: DL_OK\naddress: framework/metrics/system/memfree-mb, value: 25.640625, timestamp: 2022-10-18T14:40:15.440Z, result: DL_OK\naddress: framework/metrics/system/memtotal-mb, value: 975.8125, timestamp: 2022-10-18T14:40:15.440Z, result: DL_OK\naddress: framework/metrics/system/memused-percent, value: 56.3, timestamp: 2022-10-18T14:40:15.440Z, result: DL_OK\n</code></pre>"},{"location":"samples-node/datalayer.client.bulkread/index.html#install-the-app","title":"Install the App","text":"<p>Login into ctrlX and install the App (Apps).</p>"},{"location":"samples-node/datalayer.client.bulkread/index.html#gratulations-were-finished-lets-start-coding","title":"Gratulations - We're finished - Let's start coding","text":""},{"location":"samples-node/datalayer.client.bulkread/index.html#support","title":"Support","text":""},{"location":"samples-node/datalayer.client.bulkread/index.html#developer-community","title":"Developer Community","text":"<p>Please join the Developer Community</p>"},{"location":"samples-node/datalayer.client.bulkread/index.html#sdk-forum","title":"SDK Forum","text":"<p>Please visit the SDK Forum</p>"},{"location":"samples-node/datalayer.client.bulkread/index.html#issues","title":"Issues","text":"<p>If you've found an error in these sample, please file an issue</p>"},{"location":"samples-node/datalayer.client.bulkread/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"samples-node/datalayer.client.simple/index.html","title":"README Node.js datalayer.client","text":"<p>This Node.js sample reads values from ctrlX Data Layer.</p>"},{"location":"samples-node/datalayer.client.simple/index.html#introduction","title":"Introduction","text":"<p>The sample demonstrates how to read values from ctrlX Data Layer tree and write out the values to console.</p>"},{"location":"samples-node/datalayer.client.simple/index.html#description","title":"Description","text":"<p>The sample datalayer.client demonstrates</p> <ul> <li> <p>How easy to create a client for ctrlX Data Layer</p> </li> <li> <p>How to read values from ctrlX Data Layer nodes</p> </li> <li> <p>How to create a subscription to a ctrlX Data Layer node</p> </li> </ul>"},{"location":"samples-node/datalayer.client.simple/index.html#prerequisites","title":"Prerequisites","text":"<p>Please read the common Node.js docs here, first.</p>"},{"location":"samples-node/datalayer.client.simple/index.html#debug-and-run","title":"Debug and Run","text":"<ol> <li>Run 'npm install' in the terminal.  </li> <li>Launch the app with the debugger attached by pressing F5.</li> </ol>"},{"location":"samples-node/datalayer.client.simple/index.html#build-and-install","title":"Build and Install","text":"<ol> <li>Launch Visual Studio Code</li> <li>Click on the Remote Explorer from the menu.</li> <li>Choose Open Folder in QEMU VM.</li> <li>Open the directory datalayer.client.</li> <li>Build and install snap as described here.</li> <li> <p>Check the output using Diagnostics:</p> </li> <li> <p>Login into your ctrlX</p> </li> <li>Navigate to Diagnostics -&gt; Logbook</li> <li>Click Settings on the right top corner</li> <li>Enable Show system messages</li> <li>Navigate to Filter -&gt; Units and check your snap.sdk-node-client-simple.app.service</li> <li>Now you should the see the app output diagnostics.</li> <li> <p>Press Refresh to update.</p> </li> <li> <p>If you have root permissions, you can also watch the output on any ssh console with the command:</p> <pre><code>sudo snap logs sdk-node-client-simple.app -f | more\n</code></pre> </li> </ol>"},{"location":"samples-node/datalayer.client.simple/index.html#console-output","title":"Console Output","text":"<pre><code>running inside snap: false\nclient remote address: tcp://boschrexroth:boschrexroth@10.0.2.2\nframework/metrics/system/cpu-utilisation-percent:{\"value\":1.9,\"type\":\"double\",\"timestamp\":\"2021-10-20T13:40:45.892Z\"}\nframework/metrics/system/memavailable-mb:{\"value\":680.578125,\"type\":\"double\",\"timestamp\":\"2021-10-20T13:40:45.896Z\"}\nframework/metrics/system/membuffers-mb:{\"value\":119.00390625,\"type\":\"double\",\"timestamp\":\"2021-10-20T13:40:45.902Z\"}\nframework/metrics/system/memcache-mb:{\"value\":514.56640625,\"type\":\"double\",\"timestamp\":\"2021-10-20T13:40:45.905Z\"}\nframework/metrics/system/memfree-mb:{\"value\":164.43359375,\"type\":\"double\",\"timestamp\":\"2021-10-20T13:40:45.909Z\"}\nframework/metrics/system/memtotal-mb:{\"value\":985.0078125,\"type\":\"double\",\"timestamp\":\"2021-10-20T13:40:45.913Z\"}\nframework/metrics/system/memused-mb:{\"value\":187.00390625,\"type\":\"double\",\"timestamp\":\"2021-10-20T13:40:45.918Z\"}\nframework/metrics/system/memused-percent:{\"value\":19.4,\"type\":\"double\",\"timestamp\":\"2021-10-20T13:40:45.923Z\"}\n</code></pre>"},{"location":"samples-node/datalayer.client.simple/index.html#install-the-app","title":"Install the App","text":"<p>Login into ctrlX and install the App (Apps).</p>"},{"location":"samples-node/datalayer.client.simple/index.html#gratulations-were-finished-lets-start-coding","title":"Gratulations - We're finished - Let's start coding","text":""},{"location":"samples-node/datalayer.client.simple/index.html#support","title":"Support","text":""},{"location":"samples-node/datalayer.client.simple/index.html#developer-community","title":"Developer Community","text":"<p>Please join the Developer Community</p>"},{"location":"samples-node/datalayer.client.simple/index.html#sdk-forum","title":"SDK Forum","text":"<p>Please visit the SDK Forum</p>"},{"location":"samples-node/datalayer.client.simple/index.html#issues","title":"Issues","text":"<p>If you've found an error in these sample, please file an issue</p>"},{"location":"samples-node/datalayer.client.simple/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"samples-node/datalayer.provider.alldata/index.html","title":"README Node.js datalayer.provider.alldata","text":"<p>This Node.js sample provides all types of data to the ctrlX Data Layer tree.</p> <p>IMPORTANT:</p> <p>The sample creates and registers all nodes individually, which is recommended for small to medium sized set of nodes to handle. If you're dealing with a large set of nodes (big data provider) or any dynamic node hierarchy, we recommend to use a virtual provider approach, listening just to any wildcarded address ( e.g. myRoot/**) and using self-managed virtual nodes, just returned in OnBrowse() method, which is more efficient.</p> <p>Please read the Best Practise section in common Node.js documentation for more details and recommended samples.</p>"},{"location":"samples-node/datalayer.provider.alldata/index.html#introduction","title":"Introduction","text":"<p>The sample demonstrates how to provide all available data types to ctrlX Data Layer tree. The demo creates a 'static' and a 'dynamic' folder under the root node 'samples'. The 'static' folder provides nodes with constant values. In the 'dynamic' folder the same nodes are provided as in 'static' folder but with changing value every second.</p>"},{"location":"samples-node/datalayer.provider.alldata/index.html#description","title":"Description","text":"<p>The sample demonstrates</p> <ul> <li> <p>How to provide nodes with different data types to ctrlX Data Layer</p> </li> <li> <p>How to create and provide meta data to nodes</p> </li> <li> <p>How to provide nodes with read-only or read-write support</p> </li> <li> <p>How to change node values dynamically</p> </li> <li> <p>How to register a user defined flatbuffers type</p> </li> <li> <p>How to read and write user defined flatbuffers nodes</p> </li> </ul>"},{"location":"samples-node/datalayer.provider.alldata/index.html#prerequisites","title":"Prerequisites","text":"<p>Please read the common Node.js docs here, first.</p>"},{"location":"samples-node/datalayer.provider.alldata/index.html#debug-and-run","title":"Debug and Run","text":"<ol> <li>Run 'npm install' in the terminal.  </li> <li>Launch the app with the debugger attached by pressing F5.</li> </ol>"},{"location":"samples-node/datalayer.provider.alldata/index.html#build-and-install","title":"Build and Install","text":"<ol> <li>Launch Visual Studio Code</li> <li>Click on the Remote Explorer from the menu.</li> <li>Choose Open Folder.</li> <li>Open the directory datalayer.provider.alldata.</li> <li>Build and install snap as described here.</li> <li>Checkout ctrlX Data Layer web frontend (Settings | Data Layer)</li> <li> <p>Check the output using Diagnostics:</p> </li> <li> <p>Login into your ctrlX</p> </li> <li>Navigate to Diagnostics -&gt; Logbook</li> <li>Click Settings on the right top corner</li> <li>Enable Show system messages</li> <li>Navigate to Filter -&gt; Units and check your snap.sdk-node-provider-alldata.app.service</li> <li>Now you should the see the app output diagnostics.</li> <li> <p>Press Refresh to update.</p> </li> <li> <p>If you have root permissions, you can also watch the output on any ssh console with the command:</p> </li> </ol> <pre><code>sudo snap logs sdk-node-provider-alldata.app -f | more\n</code></pre>"},{"location":"samples-node/datalayer.provider.alldata/index.html#screenshot","title":"Screenshot","text":""},{"location":"samples-node/datalayer.provider.alldata/index.html#install-the-app","title":"Install the App","text":"<p>Login into ctrlX and install the App (Apps).</p>"},{"location":"samples-node/datalayer.provider.alldata/index.html#gratulations-were-finished-lets-start-coding","title":"Gratulations - We're finished - Let's start coding","text":""},{"location":"samples-node/datalayer.provider.alldata/index.html#support","title":"Support","text":""},{"location":"samples-node/datalayer.provider.alldata/index.html#developer-community","title":"Developer Community","text":"<p>Please join the Developer Community</p>"},{"location":"samples-node/datalayer.provider.alldata/index.html#sdk-forum","title":"SDK Forum","text":"<p>Please visit the SDK Forum</p>"},{"location":"samples-node/datalayer.provider.alldata/index.html#issues","title":"Issues","text":"<p>If you've found an error in these sample, please file an issue</p>"},{"location":"samples-node/datalayer.provider.alldata/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"samples-node/datalayer.provider.simple/index.html","title":"README Node.js datalayer.provider","text":"<p>This Node.js sample provides some registered nodes to the ctrlX Data Layer tree.</p> <p>IMPORTANT:</p> <p>The sample creates and registers all nodes individually, which is recommended for small to medium sized set of nodes to handle. If you're dealing with a large set of nodes (big data provider) or any dynamic node hierarchy, we recommend to use a virtual provider approach, listening just to any wildcarded address ( e.g. myRoot/**) and using self-managed virtual nodes, just returned in OnBrowse() method, which is more efficient.</p> <p>Please read the Best Practise section in common Node.js documentation for more details and recommended samples.</p>"},{"location":"samples-node/datalayer.provider.simple/index.html#introduction","title":"Introduction","text":"<p>The sample demonstrates how to provide nodes to ctrlX Data Layer tree. The provider creates nodes with types of int/double/string. Also a complex type encoded by FlatBuffers is provided.</p>"},{"location":"samples-node/datalayer.provider.simple/index.html#description","title":"Description","text":"<p>The sample demonstrates</p> <ul> <li> <p>How to provide nodes with different data types to ctrlX Data Layer</p> </li> <li> <p>How to create and provide meta data to nodes</p> </li> <li> <p>How to provide nodes with read-only or read-write support</p> </li> <li> <p>How to register a user defined flatbuffers type</p> </li> </ul>"},{"location":"samples-node/datalayer.provider.simple/index.html#prerequisites","title":"Prerequisites","text":"<p>Please read the common Node.js docs here, first.</p>"},{"location":"samples-node/datalayer.provider.simple/index.html#compile-flatbuffers-schema","title":"Compile Flatbuffers Schema","text":"<p>This app uses a flatbuffer defined in the schema file sampleSchema.fbs. From this schema file we have to create a binary file which is registered on the ctrlX and a Node.js class to create and access the defined flatbuffer data. These tasks can be done with the command line tool flatc.</p> <p>This tool is provided by this SDK under /bin/oss.flatbuffers/..insert OS version here../release/</p> <p>Do following steps</p> <ul> <li> <p>Create a binary flatbuffers file with Visual Studio Code tasks:</p> </li> <li> <p>\"flatc binary (x64)\"</p> </li> <li>\"flatc binary (arm64)\"</li> </ul> <p>The generated file is stored in src/sampleSchema.bfbs</p> <ul> <li> <p>Generate the Node.js class with Visual Studio Code tasks:</p> </li> <li> <p>\"flatc class (x64)\"</p> </li> <li>\"flatc class (arm64)\"</li> </ul> <p>The generated code is stored in src/sampleSchema_generated.js</p>"},{"location":"samples-node/datalayer.provider.simple/index.html#debug-and-run","title":"Debug and Run","text":"<ol> <li>Run 'npm install' in the terminal.  </li> <li>Launch the app with the debugger attached by pressing F5.</li> </ol>"},{"location":"samples-node/datalayer.provider.simple/index.html#build-and-install","title":"Build and Install","text":"<ol> <li>Launch Visual Studio Code</li> <li>Click on the Remote Explorer from the menu.</li> <li>Choose Open Folder in QEMU VM.</li> <li>Open the directory datalayer.provider.</li> <li>Build and install snap as described here.</li> <li>Checkout ctrlX Data Layer web frontend (Settings | Data Layer)</li> <li> <p>Check the output using Diagnostics:</p> </li> <li> <p>Login into your ctrlX</p> </li> <li>Navigate to Diagnostics -&gt; Logbook</li> <li>Click Settings on the right top corner</li> <li>Enable Show system messages</li> <li>Navigate to Filter -&gt; Units and check your snap.sdk-node-provider-simple.app.service</li> <li>Now you should the see the app output diagnostics.</li> <li> <p>Press Refresh to update.</p> </li> <li> <p>If you have root permissions, you can also watch the output on any ssh console with the command:</p> </li> </ol> <pre><code>sudo snap logs sdk-node-provider-simple.app -f | more\n</code></pre>"},{"location":"samples-node/datalayer.provider.simple/index.html#screenshot","title":"Screenshot","text":""},{"location":"samples-node/datalayer.provider.simple/index.html#install-the-app","title":"Install the App","text":"<p>Login into ctrlX and install the App (Apps).</p>"},{"location":"samples-node/datalayer.provider.simple/index.html#gratulations-were-finished-lets-start-coding","title":"Gratulations - We're finished - Let's start coding","text":""},{"location":"samples-node/datalayer.provider.simple/index.html#support","title":"Support","text":""},{"location":"samples-node/datalayer.provider.simple/index.html#developer-community","title":"Developer Community","text":"<p>Please join the Developer Community</p>"},{"location":"samples-node/datalayer.provider.simple/index.html#sdk-forum","title":"SDK Forum","text":"<p>Please visit the SDK Forum</p>"},{"location":"samples-node/datalayer.provider.simple/index.html#issues","title":"Issues","text":"<p>If you've found an error in these sample, please file an issue</p>"},{"location":"samples-node/datalayer.provider.simple/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"samples-node/hello-world/index.html","title":"README node hello.world","text":"<p>This node sample prints out \"Hello World from Node.js!\" to the console.</p>"},{"location":"samples-node/hello-world/index.html#introduction","title":"Introduction","text":"<p>Programm is prompting \"Hello World from Node.js!\" to standard output.</p>"},{"location":"samples-node/hello-world/index.html#description","title":"Description","text":"<p>The samples demonstrates how to snap a simple Node.js script with the snapcraft npm plugin.</p>"},{"location":"samples-node/hello-world/index.html#prerequisites","title":"Prerequisites","text":"<p>Please read the common node docs here, first.</p>"},{"location":"samples-node/hello-world/index.html#debug-and-run","title":"Debug and Run","text":"<ol> <li>Run 'npm install' in the terminal.  </li> <li>Launch the app with the debugger attached by pressing F5.</li> </ol>"},{"location":"samples-node/hello-world/index.html#build-and-install","title":"Build and Install","text":"<ol> <li>Launch Visual Studio Code</li> <li>Click on the Remote Explorer from the menu.</li> <li>Choose Open Folder.</li> <li>Open the directory datalayer.browse.</li> <li>Build and install snap as described here.</li> <li> <p>Check the output using Diagnostics:</p> </li> <li> <p>Login into your ctrlX</p> </li> <li>Navigate to Diagnostics -&gt; Logbook</li> <li>Click Settings on the right top corner</li> <li>Enable Show system messages</li> <li>Navigate to Filter -&gt; Units and check your snap.sdk-node-hello-world.app.service</li> <li>Now you should the see the app output diagnostics.</li> <li> <p>Press Refresh to update.</p> </li> <li> <p>If you have root permissions, you can also watch the output on any ssh console with the command:</p> <pre><code>sudo snap logs sdk-node-hello-world.app -f | more\n</code></pre> </li> </ol>"},{"location":"samples-node/hello-world/index.html#console-output","title":"Console Output","text":"<p><code>bash Hello World from Node.js! Thu, 07 Oct 2021 11:35:08 GMT Hello World from Node.js! Thu, 07 Oct 2021 11:35:09 GMT Hello World from Node.js! Thu, 07 Oct 2021 11:35:10 GMT Hello World from Node.js! Thu, 07 Oct 2021 11:35:11 GMT Hello World from Node.js! Thu, 07 Oct 2021 11:35:12 GMT</code></p>"},{"location":"samples-node/hello-world/index.html#install-the-app","title":"Install the App","text":"<p>Login into ctrlX and install the App (Apps).</p>"},{"location":"samples-node/hello-world/index.html#gratulations-were-finished-lets-start-coding","title":"Gratulations - We're finished - Let's start coding","text":""},{"location":"samples-node/hello-world/index.html#support","title":"Support","text":""},{"location":"samples-node/hello-world/index.html#developer-community","title":"Developer Community","text":"<p>Please join the Developer Community</p>"},{"location":"samples-node/hello-world/index.html#sdk-forum","title":"SDK Forum","text":"<p>Please visit the SDK Forum</p>"},{"location":"samples-node/hello-world/index.html#issues","title":"Issues","text":"<p>If you've found an error in these sample, please file an issue</p>"},{"location":"samples-node/hello-world/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"samples-node/webdav.client/index.html","title":"Example: Using a WebDAV client to access the app data","text":""},{"location":"samples-node/webdav.client/index.html#introduction","title":"Introduction","text":"<p>The sample demonstrates how to access the active and archived configurations of a ctrlX CORE remotely using the WebDAV protocol.</p>"},{"location":"samples-node/webdav.client/index.html#description","title":"Description","text":"<p>The application creates a WebDAV client and connects to a ctrlX CORE (localhost:8443) with the default credentials. It executes some file operations using the following WebDAV library: https://github.com/perry-mitchell/webdav-client.</p>"},{"location":"samples-node/webdav.client/index.html#debug-and-run","title":"Debug and Run","text":"<ol> <li>Run 'npm install' in the terminal.  </li> <li>Launch the app with the debugger attached by pressing F5.</li> </ol>"},{"location":"samples-node/webdav.client/index.html#support","title":"Support","text":""},{"location":"samples-node/webdav.client/index.html#developer-community","title":"Developer Community","text":"<p>Please join the Developer Community</p>"},{"location":"samples-node/webdav.client/index.html#sdk-forum","title":"SDK Forum","text":"<p>Please visit the SDK Forum</p>"},{"location":"samples-node/webdav.client/index.html#issues","title":"Issues","text":"<p>If you've found an error in these sample, please file an issue</p>"},{"location":"samples-node/webdav.client/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"samples-python/index.html","title":"Samples Python","text":""},{"location":"samples-python/index.html#find-out-the-supported-samples","title":"Find out the supported samples","text":""},{"location":"samples-python/index.html#basic-samples","title":"Basic Samples","text":"<ul> <li>ctrlX Data Layer Client Simple</li> <li>ctrlX Data Layer Client Light</li> <li>ctrlX Data Layer Client Bulk</li> <li>ctrlX Data Layer Client</li> <li>ctrlX Data Layer Provider</li> <li>ctrlX Diagnostics Logbook</li> </ul>"},{"location":"samples-python/index.html#advanced-samples","title":"Advanced Samples","text":"<ul> <li>AppData File Storage</li> <li>ctrlX Data Layer Calculation operations</li> <li>ctrlX Data Layer Client Browse</li> <li>ctrlX Data Layer Client Subscription</li> <li>ctrlX Data Layer Provider Subscription</li> <li>ctrlX Data Layer Provider All Data Types</li> <li>Example Remote Debugging with Python</li> <li>ctrlX Data Layer + Webserver</li> </ul>"},{"location":"samples-python/index.html#build-a-snap","title":"Build a Snap","text":"<p>See Samples Overview</p>"},{"location":"samples-python/index.html#working-with-visual-studio-code","title":"Working with Visual Studio Code","text":""},{"location":"samples-python/index.html#visual-studio-code-extensions-for-python","title":"Visual Studio Code Extensions for Python","text":"<ul> <li>Start Visual Studio Code on your host computer.</li> <li>Connect to your SDK build environment.</li> <li>Open the folder of a Python sample under samples-python/</li> <li>Install the extension 'Python from Microsoft': Install in SSH:...</li> </ul>"},{"location":"samples-python/index.html#working-with-a-python-sample-project","title":"Working with a Python Sample Project","text":"<ul> <li>From the main menu click File --&gt; Open Folder and select the folder of your desired Python project.</li> <li>Start a bash terminal within the main menu item - Terminal - New Terminal.</li> <li>Install or upgrade the ctrlX Data Layer build and runtime environment.</li> </ul> <pre><code>ctrlx-automation-sdk/scripts/install-ctrlx-datalayer.sh\n</code></pre>"},{"location":"samples-python/index.html#install-a-virtual-environment","title":"Install a Virtual Environment","text":"<p>We recommend to create and activate a virtual Python environment for your project. Furthermore all required packages have to be installed.</p> <p>Call this script from the command line:</p> <pre><code>./install-venv.sh\n</code></pre> <p>The script runs following commands:</p> <pre><code>virtualenv -p python3 venv\nsource venv/bin/activate\npip3 install -r requirements.txt\n</code></pre> <p>A subfolder venv/ will be created and activated as virtual environment which contains the Python runtime and all required packages.</p> <p>Hints: The terminal console path begins with (venv). With Ctrl+Shift+P open the \"Command Palette...\" and select \"Python: Select Interpreter\", then 'venv/bin/python' from the virtual environment.</p>"},{"location":"samples-python/index.html#debugging-with-visual-studio-code","title":"Debugging with Visual Studio Code","text":"<ul> <li>Open main.py</li> <li>Select the Python interpreter: Shift+Ctrl+P --&gt; Select 'Python ... ('venv':venv) ... Recommended' *)</li> <li>Set a breakpoint to the first code line e.g. import ...</li> <li>Press F5 (Start Debugging)</li> </ul> <p>*) Click update icon if 'Python ... ('venv':venv) ... Recommended' doesn't appear.</p>"},{"location":"samples-python/index.html#troubleshooting","title":"Troubleshooting","text":"<ul> <li> <p>Enable SSH access to your ctrlX CORE.</p> </li> <li> <p>Watch trace of your snap on the ctrlX CORE e.g.: <code>$ sudo snap logs -f sdk-py-provider-alldata</code></p> </li> <li> <p>Debugging Python code on the ctrlX CORE is described here Remote Debugging Python.</p> </li> </ul>"},{"location":"samples-python/index.html#support","title":"Support","text":""},{"location":"samples-python/index.html#issues","title":"Issues","text":"<p>If you've found an error in these samples, please file an issue</p>"},{"location":"samples-python/appdata/index.html","title":"AppData File Storage","text":""},{"location":"samples-python/appdata/index.html#introduction","title":"Introduction","text":"<p>This Python sample app shows how to persist application data in ctrlX CORE.</p>"},{"location":"samples-python/appdata/index.html#function-description","title":"Function Description","text":"<p>This app uses a web server to listen for events regarding loading and saving configuration data.</p> <p>Running in the snap environment of a ctrlX CORE therefor a web socket connection is used. In the build environment a TCP/IP connection is used.</p>"},{"location":"samples-python/appdata/index.html#implementation-description","title":"Implementation Description","text":"<p>main.py starts the web server in TCP or Unix socket mode.</p> <p>The package web  contains the web server implementation using the build in Python module http.server. For encoding and decoding JSON Web Tokens the Python library pyjwt is used.</p> <p>The folder configs contains the file package-manifest.json. It is used to register the snap within the ctrlX CORE as participant of the configuration load/store mechanism.</p>"},{"location":"samples-python/appdata/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"samples-python/datalayer.calc/index.html","title":"ctrlX Data Layer Calculation operations","text":""},{"location":"samples-python/datalayer.calc/index.html#introduction","title":"Introduction","text":"<p>This app is a ctrlX Data Layer Provider and Client written in Python.</p>"},{"location":"samples-python/datalayer.calc/index.html#function-description","title":"Function Description","text":"<p>The app reads two ctrlX Data Layer values and calculates the output value 'out'. All values are float64 value types.</p> <p>The ctrlX Data Layer addresses of the input values are configured by the string input values 'in1' and 'in2'.</p> <p>How the out value is calculated can be configured as string value with the node 'mode'.</p> <p>Supported operations are:</p> <pre><code>+\n-\n*\n/\n</code></pre>"},{"location":"samples-python/datalayer.calc/index.html#implementation-description","title":"Implementation Description","text":"<p>There are two Python scripts:</p> <ul> <li>main.py - the main function</li> <li>calculations.basic_arithmetic_operations.py - Class called BasicArithmeticOperations which reads the input values and calculates the output value.</li> </ul>"},{"location":"samples-python/datalayer.calc/index.html#mainpy","title":"main.py","text":"<p>This function manages the ctrlX Data Layer Provider and Client connection.</p> <p>Furthermore it creates one instance of the BasicArithmeticOperations class and starts it.</p> <p>If the client connection is lost the main function exits with an error code. If the app is installed as snap the system will restart the application after a short period of time.</p>"},{"location":"samples-python/datalayer.calc/index.html#calculationsbasic_arithmetic_operationspy","title":"calculations.basic_arithmetic_operations.py","text":"<p>This class BasicArithmeticOperations has several functions.</p> <p>It is a ctrlX Data Layer Provider for four nodes:</p> <ol> <li>in1: string, specifies the DL address of the first operand</li> <li>in2: string, specifies the DL address of the second operand</li> <li>mode: string, specifies the operation</li> <li>out: float64, the result</li> </ol> <p>Important</p> <p>The operands have to be double values (FLOAT64)!</p> <p>With the address values of in1 and in2 a subscription is started. Every time when new values are published the value of 'out' is recalculated.</p>"},{"location":"samples-python/datalayer.calc/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"samples-python/datalayer.client/index.html","title":"README datalayer.client","text":""},{"location":"samples-python/datalayer.client/index.html#introduction","title":"Introduction","text":"<p>This python app runs ctrlX Data Layer client operations like read, write and so on. It can be used as sample to implement own apps.</p>"},{"location":"samples-python/datalayer.client/index.html#function-description","title":"Function Description","text":"<p>This Python app depends from the C++ sample samples-cpp/datalayer.provider.all-data. It handles the ctrlX Data Layer nodes created by the C++ sample.</p>"},{"location":"samples-python/datalayer.client/index.html#implementation-description","title":"Implementation Description","text":"<p>main.py creates the ctrlX Data Layer connection and and an instance of CallDataLayerClient.</p> <p>app/call_datalayer_client.py contains the class CallDataLayerClient. This class runs all the data access activities.</p>"},{"location":"samples-python/datalayer.client/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"samples-python/datalayer.client.browse/index.html","title":"ctrlX Data Layer Client Browse","text":""},{"location":"samples-python/datalayer.client.browse/index.html#introduction","title":"Introduction","text":"<p>The app demonstrates how the ctrlX Data Layer browse functionality works.</p>"},{"location":"samples-python/datalayer.client.browse/index.html#function-description","title":"Function Description","text":"<p>The ctrlX Data Layer tree is browsed recursively and the data of the nodes are listed to the console output.</p>"},{"location":"samples-python/datalayer.client.browse/index.html#implementation-description","title":"Implementation Description","text":"<p>Module main.py creates a ctrlX Data Layer client connection and calls the function browse_tree(). This function tries to read and list the value of the (root) node. Then it scans recursively through all sub nodes. When all nodes are listed the app ends.</p> <p>The app is restarted automatically ny snapd because of its restart option in snap/snapcraft.yaml.</p>"},{"location":"samples-python/datalayer.client.browse/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"samples-python/datalayer.client.bulk/index.html","title":"README datalayer.client.bulk","text":""},{"location":"samples-python/datalayer.client.bulk/index.html#introduction","title":"Introduction","text":"<p>The sample demonstrates how to use bulk operations to handle values of the ctrlX Data Layer.</p>"},{"location":"samples-python/datalayer.client.bulk/index.html#function-description","title":"Function Description","text":"<p>Bulk operations should be used if the same operation (read, write, create,...) has to be done on a set of nodes. The code is compact and the performance is much better than single operations.</p>"},{"location":"samples-python/datalayer.client.bulk/index.html#implementation-description","title":"Implementation Description","text":"<p>The module main.py connects to the ctrlX Data Layer and handles the ctrlX Data Layer access.</p>"},{"location":"samples-python/datalayer.client.bulk/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"samples-python/datalayer.client.light/index.html","title":"README datalayer.client.light","text":""},{"location":"samples-python/datalayer.client.light/index.html#introduction","title":"Introduction","text":"<p>The sample demonstrates how to read values from ctrlX Data Layer.</p>"},{"location":"samples-python/datalayer.client.light/index.html#function-description","title":"Function Description","text":"<p>A subscription is used to get values by data change event in a deterministic publish interval. The single read is performed in an endless loop.</p>"},{"location":"samples-python/datalayer.client.light/index.html#implementation-description","title":"Implementation Description","text":"<p>The module main.py connects to the ctrlX Data Layer and handles the ctrlX Data Layer access.</p>"},{"location":"samples-python/datalayer.client.light/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"samples-python/datalayer.client.simple/index.html","title":"README datalayer.client.simple","text":""},{"location":"samples-python/datalayer.client.simple/index.html#introduction","title":"Introduction","text":"<p>The sample demonstrates how to read values from ctrlX Data Layer.</p>"},{"location":"samples-python/datalayer.client.simple/index.html#function-description","title":"Function Description","text":"<p>The single read is performed in an endless loop.</p>"},{"location":"samples-python/datalayer.client.simple/index.html#implementation-description","title":"Implementation Description","text":"<p>The module main.py connects to the ctrlX Data Layer and handles the ctrlX Data Layer access.</p>"},{"location":"samples-python/datalayer.client.simple/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"samples-python/datalayer.client.sub/index.html","title":"ctrlX Data Layer Client Subscription","text":""},{"location":"samples-python/datalayer.client.sub/index.html#introduction","title":"Introduction","text":"<p>The code shows how in Python the values of the ctrlX Data Layer are subscribed. Code snippets can be used in your own Python app.</p>"},{"location":"samples-python/datalayer.client.sub/index.html#function-description","title":"Function Description","text":"<p>The app uses a single node and a multi node subscription.</p> <p>First the single node subscription is started. It will be stopped after a short period of time.</p> <p>Then the multi node subscription is started. It will run until a connection break to the ctrlX Data Layer is detected. In this case the app unsubscribes the multi node subscription and ends. The app is restarted automatically by snapd.</p>"},{"location":"samples-python/datalayer.client.sub/index.html#implementation-description","title":"Implementation Description","text":"<p>main.py is the single module. It has following tasks:</p> <ul> <li>Create a ctrlX Data Layer client connection</li> <li>Subscribe/unsubscribe a ctrlX Data Layer single node subscription</li> <li>Subscribe/unsubscribe a ctrlX Data Layer multi node subscription</li> <li>Close app on ctrlX Data Layer client connection break</li> </ul>"},{"location":"samples-python/datalayer.client.sub/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"samples-python/datalayer.provider/index.html","title":"ctrlX Data Layer Provider","text":"<p>The app demonstrates how a ctrlX Data Layer connection is established and a string and flatbuffers node are provided.</p>"},{"location":"samples-python/datalayer.provider/index.html#function-description","title":"Function Description","text":"<p>The app connects to the ctrlX Data Layer and provides a string and flatbuffers node .</p> <p>If the ctrlX Data Layer connection breaks the app will exit. After 10s it will be automatically restarted by snapd.</p>"},{"location":"samples-python/datalayer.provider/index.html#preparation","title":"Preparation","text":"<p>This sample uses a flatbuffers node defined in sampleSchema.fbs.</p> <p>For easy of use the project contains the according compiled files:</p> <ul> <li>sampleSchema.fbs: ./bfbs/sampleSchema.bfbs, ./sample/schema/InertialValue.py</li> </ul> <p>With these compilation files the project can instantly debugged or snaps can be build.</p> <p>If changes have been made to the definition files, the compiles must be regenerated. This is done by the script make-bfbs.sh.</p> <p>The script can be called from the console:</p> <pre><code>./make-bfbs.sh\n</code></pre> <p>It can also be called from Visual Studio Code:</p> <pre><code>Main menu -&gt; Terminal --&gt; Run Task... --&gt; Make bfbs\n</code></pre>"},{"location":"samples-python/datalayer.provider/index.html#implementation-description","title":"Implementation Description","text":""},{"location":"samples-python/datalayer.provider/index.html#definition-files","title":"Definition Files","text":""},{"location":"samples-python/datalayer.provider/index.html#flatbuffers","title":"Flatbuffers","text":"<ul> <li>sampleSchema.fbs: Defines a flatbuffers value (structed value). If changed compile it - see above.</li> </ul>"},{"location":"samples-python/datalayer.provider/index.html#modules","title":"Modules","text":"<ul> <li>The module main.py manages the ctrlX Data Layer connection and the creation of the ctrlX Data Layer nodes.</li> <li>The module helper/ctrlx_datalayer_helper.py Provides methods to easily establish a ctrlX Data Layer connection.</li> <li>The module app/my_provider_node.py contains the class MyProviderNode with the callback function needed by the ctrlX Data Layer.</li> <li>The module sample/schema/InertialValue.py is generated by flatc from sampleSchema.fbs. It is used to manage the flatbuffers data struct.</li> </ul>"},{"location":"samples-python/datalayer.provider/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"samples-python/datalayer.provider.all-data/index.html","title":"ctrlX Data Layer Provider All Data","text":""},{"location":"samples-python/datalayer.provider.all-data/index.html#introduction","title":"Introduction","text":"<p>This Python app provides ctrlX Data Layer nodes representing different data types.</p>"},{"location":"samples-python/datalayer.provider.all-data/index.html#function-description","title":"Function Description","text":"<p>When this app is started it connects to the ctrlX Data Layer and creates two subtrees with data nodes.</p> <p>The values of the nodes in the 'static' subtree cannot be changed by clients but they can be used to test reading different types of data and their numerical limits.</p> <p>The values of the nodes in the 'dynamic' subtree can be changed (written) by clients.</p>"},{"location":"samples-python/datalayer.provider.all-data/index.html#implementation-description","title":"Implementation Description","text":"<p>main.py starts the ctrlX Data Layer system and the ctrlX Data Layer provider. Furthermore two instances of the class ProviderNodeAllData are created. One instance is called for creating static (immutable) ctrlX Data Layer nodes. The other instance is called for creating dynamic (changeable) ctrlX Data Layer nodes.</p> <p>The package datalayerprovider contains the classes for data storage, configuration and ctrlX Data Layer handling.</p>"},{"location":"samples-python/datalayer.provider.all-data/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"samples-python/datalayer.provider.sub/index.html","title":"ctrlX Data Layer Provider Subscription","text":"<p>The app demonstrates shows how a provider supports \"ctrlX Data Layer\" subscription interface.</p>"},{"location":"samples-python/datalayer.provider.sub/index.html#function-description","title":"Function Description","text":"<p>Provider supported the subscription interface.</p>"},{"location":"samples-python/datalayer.provider.sub/index.html#preparation","title":"Preparation","text":""},{"location":"samples-python/datalayer.provider.sub/index.html#implementation-description","title":"Implementation Description","text":""},{"location":"samples-python/datalayer.provider.sub/index.html#definition-files","title":"Definition Files","text":""},{"location":"samples-python/datalayer.provider.sub/index.html#modules","title":"Modules","text":"<ul> <li>The module provider.py manages the ctrlX Data Layer connection and the creation of the ctrlX Data Layer node.</li> <li>The module helper/ctrlx_datalayer_helper.py Provides methods to easily establish a ctrlX Data Layer connection.</li> <li>The module datalayerprovider/sub_provider_node.py contains the class SubProviderFolderNode with the callback function needed by the ctrlX Data Layer.</li> <li>The module client.py simple ctrlX Data Layer client uses a single node subscription.</li> <li>The module datalayerclient/app.py helper classes and function for the client.</li> </ul>"},{"location":"samples-python/datalayer.provider.sub/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"samples-python/datalayer.remote.debug/index.html","title":"Python sample for remote debugging","text":"<p>This sample shows how remote debugging can be done with Python.</p>"},{"location":"samples-python/datalayer.remote.debug/index.html#prerequisites","title":"Prerequisites","text":"<p>If you use a ctrlX CORE<sup>virtual</sup> enable port forwarding of your remote debug port e.g. for port 15678</p> <pre><code>8022:22,8443:443,8740:11740,4840:4840,2069:2069,2070:2070__,15678:15678__\n</code></pre>"},{"location":"samples-python/datalayer.remote.debug/index.html#implementation","title":"Implementation","text":"<p>Remote debugging is enabled with by the package debugpy</p> <p>The script debug.py provides the function debug.remote_debugging_wait_for_client() were debugpy is used.</p> <p>In main.py debug.remote_debugging_wait_for_client() is called.</p> <p>Installed on a ctrlX CORE the service stops executing and waits until a remote debug client will attach.</p> <p>Important</p> <p>Feel free to use the script debug.py in your own projects.</p>"},{"location":"samples-python/datalayer.remote.debug/index.html#build-snap-and-install-and-start-it","title":"Build snap and install and start it","text":"<p>For this job we recommend to use our shell script, here for a ctrlX ctrlX CORE<sup>virtual</sup> with port forwarding</p> <pre><code>../../scripts/build-upload-log-snap.sh -PF\n</code></pre> <p>and here with network adapter</p> <pre><code>../../scripts/build-upload-log-snap.sh -NA\n</code></pre> <p>For a bare metal ctrlX CORE you are able to provide all settings via command line, call this for help:</p> <pre><code>../../scripts/build-upload-log-snap.sh -help\n</code></pre> <p>When build and installation succeeded the snap is started as a service waiting for a remote debug client to connect. This print out should be shown e.g.:</p> <pre><code>__Accepting remote debug client attaches to port 15678__\n</code></pre> <p>Hint</p> <p>In Visual Studio Code you can use menu item Terminal - Run Build Task... - Build upload snap ...</p>"},{"location":"samples-python/datalayer.remote.debug/index.html#start-debugging-wih-visual-studio-code","title":"Start debugging wih Visual Studio Code","text":"<p>The file .vscode/launch.json contains launch configurations for remote debugging.</p> <p>We assume to debug the snap on a ctrlX ctrlX CORE<sup>virtual</sup> with port forwarding click the launch icon on the side bar and select configuration 'Remote ctrlX COREvirtual - Port forwarding'.</p> <p>The debugging client of Visual Studio Code will connect to the waiting server and debugging will start.</p>"},{"location":"samples-python/datalayer.remote.debug/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"samples-python/logbook/index.html","title":"ctrlX Diagnostics Logbook","text":""},{"location":"samples-python/logbook/index.html#introduction","title":"Introduction","text":"<p>This python app showes how to log with different log levels into the logbook of the ctrlX CORE.</p>"},{"location":"samples-python/logbook/index.html#function-description","title":"Function Description","text":"<p>The app writes log messages using the Python package cysystemd version and Python version 3.10.</p> <pre><code>apt install libsystemd-dev\n</code></pre>"},{"location":"samples-python/logbook/index.html#implementation-description","title":"Implementation Description","text":"<p>main.py just calls the function in logbook/app.py.</p> <p>The methon run() in logbook/app.py sends the messages.</p>"},{"location":"samples-python/logbook/index.html#hint-to-cross-build","title":"Hint to Cross Build","text":"<p>This example is based on python library 'cysystemd'. 'cysystemd' used within 'shared libraries'. Version 1.5 provides wheel packet for the different architectures (arm64, amd64). With version 1.6 these shared libraries are created for installation and there are problems with the cross build, because these are created on the basis of the build system and not on the basis of the target system.</p>"},{"location":"samples-python/logbook/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"samples-python/webserver/index.html","title":"ctrlX Data Layer + Webserver","text":""},{"location":"samples-python/webserver/index.html#introduction","title":"Introduction","text":"<p>This python app deploys a simple webserver including ctrlX Data Layer connection and user permissions with web interface accessible from ctrlX webpage.</p>"},{"location":"samples-python/webserver/index.html#function-description","title":"Function Description","text":"<p>The app runs a simple webserver with reverse proxy and ctrlX Data Layer access, setup user permissions through package-manifest and token authentification.</p> <p>Once the installation of the snap was finished, you can access to the provided webpage through the sidebar or overview menu of the ctrlX CORE webpage.</p> <p></p> <p>The Python-Webpage allows you to read and write at the ctrlX Data Layer (depends on permissions of the current user) and shows permissions of the current user.</p> <p></p> <p>You can find the configuration of user permissions (scopes) on the ctrlX at  Settings &gt; Users &amp; Permissions &gt; Users</p> <p></p> <p>The integration of the app inside ctrlX Core webpage (sidebar and overview integration, reverse proxy, bearertoken, scopes) is done by the package-manifest (./configs/package-assets/rexroth-python-webserver.package-manifest.json).</p>"},{"location":"samples-python/webserver/index.html#implementation-description","title":"Implementation Description","text":"<p>The app has these modules:</p> <ul> <li> <p>main.py connects to the ctrlX Data Layer and starts the web server. In snap environment an Unix socket connection is established otherwise a TCP/IP connection.</p> </li> <li> <p>app/</p> </li> <li>datalayer.py handles the ctrlX Data Layer node data access.</li> <li> <p>ctrlx_datalayer_helper.py handles the ctrlX Data Layer client connection.</p> </li> <li> <p>web/</p> </li> <li>unix_socket_server.py *) Web server class (wrapper) to use unix sockets instead of TCP/IP</li> <li>request_handler.py *) Request handler class for both UNIX sockets and TCP/IP</li> <li>web_token.py  contains a helper function to check permissions using jwt</li> <li>www/</li> <li>favicon.png Favicon for the web site.</li> <li>index.html The web site.</li> <li>invalid-token.html The web content which is send when the token was wrong.</li> <li>stylesheet.css Defines the style of the web site.</li> </ul>"},{"location":"samples-python/webserver/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"samples-snap/index.html","title":"Samples Snap","text":""},{"location":"samples-snap/index.html#find-out-the-supported-samples","title":"Find out the supported samples","text":"<ul> <li>Generate Manifest</li> <li>Monitor Health</li> <li>Storage extension</li> <li>TPM2 How to use the TPM inside your application.</li> <li>ulimit How to increase the maximal number of opened files.</li> </ul>"},{"location":"samples-snap/generate-manifest/index.html","title":"Generate Package Manifest during Installation","text":""},{"location":"samples-snap/generate-manifest/index.html#goal","title":"Goal","text":"<p>For a few use cases, it might be necessary to generate a package-manifest depending on the ctrlX CORE or on the setup in is installed. This is possible during installation by using snap hook mechanism. This how-to describes how this can be resolved.</p> <p>The snap build in this examples takes two random words and uses them to generate a menu entry in the ctrlX CORE sidebar. It will look like this:</p>"},{"location":"samples-snap/generate-manifest/index.html#precondition","title":"Precondition","text":"<p>Basic understanding of:</p> <ul> <li>snap interfaces</li> <li>hooks</li> <li>package-manifest</li> </ul>"},{"location":"samples-snap/generate-manifest/index.html#creating-the-snap","title":"Creating the snap","text":"<p>Choose an empty folder and initialize the snap enviroment by using snapcraft</p> <pre><code>snapcraft init\n</code></pre> <p>Create the folders as in the following example:</p> <pre><code>dump/\n  bin/\n  package-assets/\nsnap/\n  hooks/\n  snapcraft.yaml\n.gitignore\n</code></pre> <p>The folder \"dump\" contains files that will be copied into our snap. This includes scripts inside the \"bin\" folder and the package-manifest.template used to blueprint when generating the actual package-manifest. Next to the snapcraft.yaml we need the hooks folder where we will later add the \"hook\" scripts.</p> <p>After that open the snapcraft.yaml file and edit it as following</p> <pre><code>name: sdk-generate-manifest\ntitle: SDK Generate Manifest\nbase: core22\nversion: 1.0.0\nsummary: Simple snap with random menu entry.\ndescription: |\n  This is a sample snap that generates a random menu entry when getting installed or updated.\n\ngrade: stable\nconfinement: strict\n\narchitectures:\n  - build-on: [amd64, arm64]\n    build-for: [amd64]\n  - build-on: [amd64, arm64]\n    build-for: [arm64]\n\nparts:\n  dump:\n    plugin: dump\n    source: ./dump\n    stage-packages:\n      - wamerican\n      - jq\napps:\n  my-service:\n    command: bin/service.sh\n    daemon: simple\n\nslots:\n  package-assets:\n    interface: content\n    content: package-assets\n    source:\n      read:\n      - $SNAP_DATA/package-assets/$CRAFT_PROJECT_NAME\n</code></pre> <p>The dump part is used to copy the files from the dump folder into the snap and to install two packages used to generate the package-manifest. The \"wamerican\" package is a dictionary of american english words, the jq package provides the jq tool to manipulate json files using shell.</p> <p>The slot \"package-assets\" is similar to the one described in the SDK, the only difference is that it reference $SNAP_DATA instead of $SNAP, to provide a writeable directory.</p> <p>We added here a my-service app, this is just a simple daemon which logs a string to stdout for demo purpose, see</p> <pre><code>#!/bin/bash\n\nwhile true\ndo\n    echo \"Hello sdk-generate-manifest\"\n    sleep 10\ndone\n</code></pre>"},{"location":"samples-snap/generate-manifest/index.html#the-script","title":"The script","text":"<p>We will now add the script in the \"dump/bin\" folder by creating a file called \"generate_manifest.sh\" and make it executable (chmod +x)</p> <pre><code>dump/\n  bin/\n    generate_manifest.sh\n</code></pre> <p>Here you will find the content</p> <pre><code>#!/bin/bash -x\n\n# Update json\nNAME=$(shuf -n2  $SNAP/usr/share/dict/words | tr '\\n' ' ')\nmkdir -p $SNAP_DATA/package-assets/$SNAP_NAME\n$SNAP/usr/bin/jq \".menus.sidebar[].title = \\\"$NAME\\\"\" \\\n    $SNAP/package-assets/sdk-generate-manifest.package-manifest.json.template &gt; $SNAP_DATA/package-assets/sdk-generate-manifest/sdk-generate-manifest.package-manifest.json\n</code></pre> <p>In line 4 we use shuf to select two random words from the dictionary and tr to bring them into one line and store it in \"NAME\".</p> <p>In line 5 we prepare the directory to ensure it exists.</p> <p>In line 6-7 we use jq to change the existing menus.sidebar.title of the template to \"NAME\" and write it into the package-assets folder.</p> <p>To make this work we need to create the script template in the \"dump/package-assets\" folder:</p> <p>sdk-generate-manifest.package-manifest.json.template</p> <pre><code>{\n  \"$schema\": \"https://json-schema.boschrexroth.com/ctrlx-automation/ctrlx-core/apps/package-manifest/package-manifest.v1.4.schema.json\",\n  \"version\": \"1.0.0\",\n  \"id\": \"sdk-generate-manifest\",\n  \"menus\": {\n    \"sidebar\": [\n      {\n        \"id\": \"sdk-generate-manifest\",\n        \"title\": \"\",\n        \"icon\": \"bosch-ic-automation\",\n        \"link\": \"0\"\n      }\n    ]\n  }\n}\n</code></pre> <p>As you can see, the title property is empty.</p>"},{"location":"samples-snap/generate-manifest/index.html#the-hooks","title":"The hooks","text":"<p>Now we need to execute the script to generate the package-manifest on the installation and every update of the snap. So we need to add the corresponding hooks:</p> <pre><code>snap/\n  hooks/\n    install\n    post-refresh\n</code></pre> <p>Both need to be executable (chmod +x). Both have the same content as below:</p> <pre><code>#!/bin/bash\n\n# Generate manifest\n$SNAP/snap/command-chain/snapcraft-runner  generate_manifest.sh\n</code></pre> <p>It executes the generate_manifest.sh mentioned above using the snaps environment by using the snapcraft-runner, it sets all required environment variables (e.g. PATH). It is generated by the snap itself if you have defined an app in your snap.</p>"},{"location":"samples-snap/generate-manifest/index.html#interface-definitions","title":"Interface definitions","text":"<p>Interfaces (slots and plugs) can be declared in two different ways:</p> <ul> <li>Specific for each app and hook (Preferred solution)</li> <li>Globally to be valid for all defined apps and hooks</li> </ul>"},{"location":"samples-snap/generate-manifest/index.html#examples","title":"Examples","text":"<p>Specific declaration:</p> <p>Each app and each hook defines all needed interfaces.</p> <pre><code>apps:\n  example:\n    command: bin/sh\n    plugs:\n      wayland:\n      x11:\n  example2:\n    command: bin/sh2\n    plugs:\n      wayland:\n      x11:\nhooks:\n  configure:\n    plugs:\n      wayland:\n      x11:\n</code></pre> <p>Globally defined:</p> <p>The plugs wayland and x11 are valid for the apps example, example2 as well as the configure-hook.</p> <pre><code>apps:\n  example:\n    command: bin/sh\n  example2:\n    command: bin/sh2\n\nhooks:\n  configure:\n\nplugs:\n  wayland:\n  x11:\n</code></pre> <p>Both definitions lead to the same result.</p> <p>Nevertheless if you mix these two, this could lead to unexpected behaviour.</p> <p>Bad Example:</p> <p>In the following yaml, the global plugs wayland and x11 can only be accessed by the example app. The app example2 and the configure hook have no interfaces declared, which is probably not the desired result.</p> <pre><code>apps:\n  example:\n    command: bin/sh\n    plugs:\n      wayland:\n      x11:\n      opengl:\n  example2:\n    command: bin/sh2\nhooks:\n  configure:\nplugs:\n  wayland:\n  x11:\n</code></pre> <p>Therefore declaring all interfaces specific for each app and hook should be the preferred solution. If your snapcraft.yaml does not contain any apps or hooks at all, then declaring interfaces globally is the right approach.</p>"},{"location":"samples-snap/generate-manifest/index.html#build-and-run","title":"Build and run","text":"<p>Now build the snap using \"snapcraft\" and install it on your ctrlX CORE, on every reinstall, it will change the name of the menu entry.</p> <p>Thats it.</p>"},{"location":"samples-snap/monitor-health/index.html","title":"README monitor-health","text":"<p>This sample shows how to provide easy health monitoring of an production app using an observation script started as an second app service in parallel to monitor the health of your main app.</p> <p>This is monitoring the state of the service and setting the health.</p> Status Health Message Code active okay - - inactive error app stopped! - disabled error app disabled! -"},{"location":"samples-snap/monitor-health/index.html#description","title":"Description","text":"<p>The sample contains a dummy production app ./app/dummy-app, which is monitored for it's health.</p>"},{"location":"samples-snap/monitor-health/index.html#setup-health-monitoring-for-your-own-app","title":"Setup health monitoring for your own app","text":"<ul> <li>Copy the script  ./health/check-health to your project to folder ./health.</li> <li>Change the name of your snap (here: 'ctrlx-monitor-health') and your production app (part-name, here: 'app') to be observed. Ensure Linux line endings (LF).</li> <li> <p>Make script  ./health/check-health executable:</p> <pre><code>sudo chmod +x ./health/check-health\n</code></pre> </li> <li> <p>Edit ./snap/snapcraft.yaml and add the script as a health observation service to app.</p> <pre><code>apps:\ncheck-health:\n    command: check-health\n    daemon: simple\n    restart-condition: on-failure\n    passthrough:  \n    restart-delay: 10s\n...\n\nparts:\ncheck-health:\n    plugin: dump\n    source: ./health\n</code></pre> </li> </ul>"},{"location":"samples-snap/monitor-health/index.html#support","title":"Support","text":""},{"location":"samples-snap/monitor-health/index.html#developer-community","title":"Developer Community","text":"<p>Please join the Developer Community</p>"},{"location":"samples-snap/monitor-health/index.html#sdk-forum","title":"SDK Forum","text":"<p>Please visit the SDK Forum</p>"},{"location":"samples-snap/monitor-health/index.html#issues","title":"Issues","text":"<p>If you've found an error in these sample, please file an issue</p>"},{"location":"samples-snap/monitor-health/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"samples-snap/storage-extension/index.html","title":"Example Snap to use a storage extension","text":""},{"location":"samples-snap/storage-extension/index.html#introduction","title":"Introduction","text":"<p>Storage extension is a feature to extend the internal storage by an external media like sd card or usb stick. Storage extension was introduced with DeviceAdmin 1.18.</p> <p>This storage is encrypted and bond to one ctrlX CORE, so it cannot be used to transfer data from one ctrlX CORE to another one.</p>"},{"location":"samples-snap/storage-extension/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"samples-snap/tpm2-webserver/index.html","title":"README tpm2.consumer","text":"<p>The sample app tpm2.consumer shows the basic usage of a TPM2 inside your application.</p> <p>Also see TPM2.</p>"},{"location":"samples-snap/tpm2-webserver/index.html#introduction","title":"Introduction","text":"<p>It demonstrates how you can use the TPM2.0 of the ctrlX CORE or the emulated TPM2.0 on the ctrlX CORE<sup>virtual</sup>.</p> <ul> <li>Build the TPM2 Trusted Software Stack (TSS) including OpenSSL engine.</li> <li>Integrate your application into key and certificate management of the ctrlX CORE.</li> <li>Convert the TPM2 Key to a keyform usable with OpenSSL</li> <li>Use the TPM2 TSS OpenSSL engine with an example webserver</li> </ul>"},{"location":"samples-snap/tpm2-webserver/index.html#pre-requisites","title":"Pre-requisites","text":"<ul> <li>Recommended: ctrlX WORKS App Build Environment (QEMU Virtual Machine) - see Setup</li> <li>ctrlX AUTOMATION SDK Version 1.</li> <li>ctrlX CORE<sup>virtual</sup> or ctrlX CORE</li> </ul>"},{"location":"samples-snap/tpm2-webserver/index.html#getting-started","title":"Getting Started","text":"<ol> <li>Launch Visual Studio Code</li> <li>Open the sample directory <code>samples-snap/tpm2-webserver</code></li> <li>Build and install the snap as described in <code>Setup</code> section</li> <li>Go to the webinterface -&gt; Settings -&gt; Certificate &amp; Keys -&gt; TPM2 Webserver</li> <li>Create a key named \"webserver\" as RSA 2048 and \"HSM protected\"</li> <li>Create a certificate signing request (CSR), download</li> <li>Create a certificate (webserver.crt) with help of the CSR on your PC or CA</li> </ol> <pre><code># For example, create yourself a CA\nmkdir ca\nopenssl genrsa -out ca/ca.key 2048\nopenssl req -new -x509 -days 10000 -key ca/ca.key -out ca/ca.crt\nopenssl x509 -req -days 360 -in webserver_csr.pem -CA ca/ca.crt -CAkey ca/ca.key -CAcreateserial -out webserver.crt -sha256\n</code></pre> <ol> <li>Upload the certificate webserver.crt the TPM2 Webserver application</li> <li>Open webserver on Port 44330 of the ctrlX CORE or ctrlX CORE<sup>virtual</sup> (adapt port settings accordingly).</li> </ol>"},{"location":"samples-snap/tpm2-webserver/index.html#support","title":"Support","text":"<p>If you've any questions visit the ctrlX AUTOMATION Community</p>"},{"location":"samples-snap/tpm2-webserver/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"samples-snap/ulimit/index.html","title":"Example Snap to increase the maximal number of opened files","text":""},{"location":"samples-snap/ulimit/index.html#introduction","title":"Introduction","text":""},{"location":"samples-snap/ulimit/index.html#solution","title":"Solution","text":"<p>To increase the maximal number of opened files the command</p> <pre><code>ulimit -n xxx\n</code></pre> <p>can be used.</p> <p>This command can be called within a snap defining a daemon which starts a script with this command.</p>"},{"location":"samples-snap/ulimit/index.html#files","title":"Files","text":""},{"location":"samples-snap/ulimit/index.html#build-snapsh","title":"build-snap.sh","text":"<p>Calling this script will build a snap for amd64 and arm64 architecture.</p>"},{"location":"samples-snap/ulimit/index.html#ulimit-scriptincrease-ulimitsh","title":"ulimit-script/increase-ulimit.sh","text":"<p>This script calls the ulimit command.</p>"},{"location":"samples-snap/ulimit/index.html#snapsnapcraftyaml","title":"snap/snapcraft.yaml","text":"<p>This section causes the script to be packed into the snap archive:</p> <pre><code>parts:\n  ulimit-script:\n    plugin: dump\n    source: ./ulimit-script\n</code></pre> <p>Here the daemon is defined to call the script when the snap is started:</p> <pre><code>apps:\n  ulimit:\n    daemon: simple\n    command: increase-ulimit.sh\n</code></pre>"},{"location":"samples-snap/ulimit/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"scripts/index.html","title":"Sub folder 'scripts'","text":"<p>This folder contains several helper scripts to install the ctrlX AUTOMATION SDK, required Debian packages and to build sample projects.</p>"},{"location":"scripts/index.html#sdk-installation-script-files","title":"SDK Installation Script Files","text":"<ul> <li>clone-install-sdk.sh clones the ctrlX AUTOMATION SDK git repository from github, downloads the according zip archiv and installs the required files into the cloned github repository.</li> </ul>"},{"location":"scripts/index.html#installation-of-required-packages","title":"Installation of Required Packages","text":"<ul> <li>install-required-packages.sh  installs required packages to develop apps with the ctrlX AUTOMATION SDK</li> <li>install-snapcraft.sh installs snapcraft to build snaps</li> <li>install-ctrlx-datalayer.sh installs the ctrlx-datalayer Debian package and registers its storage directory as local package source</li> </ul>"},{"location":"scripts/index.html#installation-scripts-for-programming-languages","title":"Installation Scripts for Programming Languages","text":"<ul> <li>install-go.sh downloads and installs required packages to develop snaps with go</li> <li>install-dotnet-sdk.sh downloads and installs required packages to develop snaps with dotnet</li> <li>install-nodejs-npm.sh downloads and installs required packages to develop snaps with Node.js</li> </ul>"},{"location":"scripts/index.html#ctrlx-os-development-tools","title":"ctrlX OS Development Tools","text":"<ul> <li>install-ctrlx-os-dev-tools.sh downloads and installs required packages to build a ctrlX OS image</li> </ul>"},{"location":"scripts/index.html#building-a-sample-project-and-uploading-the-snap","title":"Building a Sample Project and uploading the Snap","text":"<ul> <li>build-upload-log-snap.sh Build a sample project, upload the snap and redirect log printout of the snap</li> </ul>"},{"location":"scripts/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MITREADME.md</p>"},{"location":"scripts/environment/index.html","title":"Building and Providing a ctrlX Application Build Environment for ctrlX WORKS","text":"<p>Important:</p> <ul> <li> <p>We recommend to use Windows amd64 as host operating system to create and run App Build Environments.</p> </li> <li> <p>The user-image-files (see below) can only be build on a Linux system (e.g. within an App Build Environment).</p> </li> </ul>"},{"location":"scripts/environment/index.html#concept","title":"Concept","text":"<p>Four different types of App Build Environments are supported:</p> <ol> <li>amd64 architecture with proxy</li> <li>amd64 architecture with NO proxy</li> <li>aarch64 architecture with proxy</li> <li>aarch64 architecture with NO proxy</li> </ol> <p>An App Build Environment is a Ubuntu Server operating system installed with the help of the build-in cloud-init service. For more information see cloud-init.</p> <p>The configuration is provided by a so called cloud-config file.</p> <p>For informations on the content of cloud-config files see Cloud config examples.</p> <p>For all types of App Build Environments one single configuration file is used: cloud-config.</p> <p>Type specific lines within this file are marked by these patterns:</p> <ul> <li> </li> <li> </li> <li> </li> <li>insert-????-here: Indicates a text passage where during the build process a special text is inserted</li> </ul>"},{"location":"scripts/environment/index.html#amd64-only-only-relevant-for-amd64-architecture","title":"amd64-ONLY: Only relevant for amd64 architecture","text":""},{"location":"scripts/environment/index.html#aarch64-only-only-relevant-for-aarch64-architecture","title":"aarch64-ONLY: Only relevant for aarch64 architecture","text":""},{"location":"scripts/environment/index.html#proxy-only-only-if-a-proxy-server-is-used","title":"proxy-ONLY: Only if a proxy server is used","text":""},{"location":"scripts/environment/index.html#building-user-data-image-files","title":"Building User Data Image Files","text":"<p>During the build process the type specific configuration file is generated, compiled (by the tool cloud-localds) and provided in a so called user-data-image file:</p> <ul> <li>builder/user-data-amd64-proxy.img     amd64 VM with proxy usage</li> <li>builder/user-data-amd64-noproxy.img   amd64 VM without proxy usage</li> <li>user-data-aarch64-proxy.img           aarch64 VM with proxy usage</li> <li>user-data-aarch64-noproxy.img         aarch64 VM without proxy usage</li> </ul> <p>Important:</p> <p>The user-data-image files for amd64 are stored in the sub folder <code>builder</code>. This folder contains also other files needed by ctrlX WORKS to create and start App Build Enviroments.</p> <p>Hint: The user-data-image files for aarch64 are kept for future usage.</p>"},{"location":"scripts/environment/index.html#build-scripts","title":"Build Scripts","text":"<ul> <li>build-0-user-data-img.sh is the build over all script. Start this script to run the whole build process.</li> <li>build-1-cloud-configs.sh generates the architecture specific config files: cloud-config-aarch64-generated, cloud-config-amd64-generated</li> <li>build-2-user-data-img-all.sh initiates the build off all user data images files calling calls build-9-user-data-img.sh</li> <li>calls build-9-user-data-img.sh: Creates a single regarding the provided architecture and proxy settings</li> </ul> <p>replace-text.py is as simple text search and replace Python script which is able to handle special characters in both search and replace pattern.</p>"},{"location":"scripts/environment/index.html#helper-scripts","title":"Helper Scripts","text":"<p>These helper scripts are packed into the user-data-image files. They are started within the (new) App Build Environmant:</p> <ul> <li>check-cloud-init-log.sh is called from .bashrc and checks the cloud-init log for errors</li> <li>install-sdk-from-github.sh should be used to download and install the ctrlX AUTOMATION SDK from github</li> </ul> <p>Important: During the installation process helper scripts of the SDK are installed into the folder /home/boschrexroth/scripts/.</p>"},{"location":"scripts/environment/index.html#using-ubuntu-based-linux-as-host-operating-system","title":"Using Ubuntu based Linux as Host Operating system","text":""},{"location":"scripts/environment/index.html#install-qemu-and-kvm","title":"Install QEMU and KVM","text":"<p>Start the script:</p> <pre><code>install-qemu.sh\n</code></pre> <p>Ensure your host has internet access.</p>"},{"location":"scripts/environment/index.html#create-an-app-build-environment","title":"Create an App Build Environment","text":"<p>Copy these files into a separate working directory:</p> <ul> <li>launch.sh</li> </ul> <p>If your host has direct internet access:</p> <ul> <li>launch-amd64-noproxy.sh</li> <li>builder/user-data-amd64-noproxy.img</li> </ul> <p>If your host uses a proxy (port must be 3128)</p> <ul> <li>launch-amd64-proxy.sh</li> <li>builder/user-data-amd64-proxy.img</li> </ul>"},{"location":"scripts/environment/index.html#start-an-app-build-environment","title":"Start an App Build Environment","text":"<p>Change into your working directory.</p> <p>If your host has direct internet access, enter:</p> <pre><code>launch-amd64-noproxy.sh\n</code></pre> <p>If your host uses a proxy, enter:</p> <pre><code>launch-amd64-proxy.sh\n</code></pre>"},{"location":"scripts/environment/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"},{"location":"scripts/environment/builder/index.html","title":"ctrlX App Build Environment Ubuntu 22.04","text":""},{"location":"scripts/environment/builder/index.html#introduction","title":"Introduction","text":"<p>This folder contains bat and image files to launch an App Build Environment with ctrlX WORKS under Windows operating system. An App Build Environment is a Ubuntu Server guest operating running within a QEMU virtual machine.</p> <p>The installation and configuration of the Ubuntu Server guest operating system is automatically done on first boot by the build-in Ubuntu Cloud-Init Technology. For this purpose, a so-called user image file is specified when the App Build Environment is started. This file contains the compiled information of a cloud-config file which is processed by the cloud-init service.</p> <p>For more informations see cloud-init</p>"},{"location":"scripts/environment/builder/index.html#creating-an-app-build-environment-instance","title":"Creating an App Build Environment Instance","text":"<p>An instance of an App Build Environment is created by ctrlX WORKS.</p> <p>ctrlX WORKS copies a set of files into the specific destination directory. Depending on the option Use HTTP and HTTPS proxy on localhost:3128 a user-data-image file is used with or without proxy server information.</p>"},{"location":"scripts/environment/builder/index.html#working-with-an-app-build-environment","title":"Working with an App Build Environment","text":""},{"location":"scripts/environment/builder/index.html#starting-an-app-build-environment-for-the-first-time","title":"Starting an App Build Environment for the first time","text":"<p>An new created App Build Environment instance can be launched by clicking the '&gt;' icon in ctrlX WORKS.</p> <p>Each time ctrlX WORKS generates the batch file start.bat. Here the Windows environment variable PATH is extended so that the ctrlX WORKS internal QEMU installation will be used. Then launch.bat is called.</p> <p>launch.bat downloads the Ubuntu Server image, creates a snapshot file (.qcow2) and launches the QEMU executable. The image file remains unchanged, all changes are saved in the snapshot file.</p> <p>During startup the App Build Environment will be configured by the Ubuntu Cloud-Init Technology. Therefor the cloud-config file contained in the user-data-image file is used.</p> <p>In this initialization phase login is not possible.</p> <p>When this phase is finished, the guest operating system will automatically shut down and has to be restarted.</p>"},{"location":"scripts/environment/builder/index.html#restarting-an-app-build-environment","title":"Restarting an App Build Environment","text":"<p>The restart is initiated by clicking the '&gt;' icon on the ctrlX WORKS UI.</p> <p>start.bat is called and the App Build Environment will start directly into the run phase.</p> <p>Logging in - directly or via SSH - is enabled.</p>"},{"location":"scripts/environment/builder/index.html#logging-in","title":"Logging in","text":"<p>We recommend to login in via SSH - using a RSA public / private key pair.</p> <p>A SSH session can be started by clicking the SSH link in ctrlX WORKS. Then open.bat will be created and called.</p>"},{"location":"scripts/environment/builder/index.html#shutdown","title":"Shutdown","text":"<p>The shutdown of the App Build Enviroment can triggered externally by clicking the stop icon in ctrlX WORKS. Then stop.bat is called, the guest operating system will shutdown and the App Build Environment will stop.</p>"},{"location":"scripts/environment/builder/index.html#deleting-an-app-build-environment","title":"Deleting an App Build Environment","text":"<p>Stop the App Build Enviroment and click the waste bin icon in ctrlX WORKS.</p>"},{"location":"scripts/environment/builder/index.html#working-with-snapshots","title":"Working with Snapshots","text":"<p>An App Build Enviroment always works with a base file and a snapshot file. The base file is never changed, all changes are stored into the snapshot file.</p> <p>When a new App Build Enviroment was created the ubuntu server image file (e.g. ubuntu-22.04-server-cloudimg-amd64.img) is the base file.</p> <p><code>ubuntu-22.04-server-cloudimg-amd64.qcow2</code> is always the snap shot file.</p>"},{"location":"scripts/environment/builder/index.html#creating-a-new-snapshot","title":"Creating a new Snapshot","text":"<p>Creating a new snapshot file makes sense if you want to save a certain status of your App Build Environment.</p> <p>To do this just call:</p> <pre><code>snapshot.bat\n</code></pre> <p>The bat file converts the actual snapshot file into a base file <code>ubuntu-22.04-server-cloudimg-amd64-0.qcow2</code> and creates a new snapshot file <code>ubuntu-22.04-server-cloudimg-amd64.qcow2</code> will be created.</p> <p>This can be done several times, for each repetition the number in the base file name will be increased: 0, 1, 2, etc.</p>"},{"location":"scripts/environment/builder/index.html#restoring-a-snapshot","title":"Restoring a Snapshot","text":"<p>You can restore an older snapshot manually:</p> <ul> <li>Delete the actual snapshot file (or move to another direcory): <code>ubuntu-22.04-server-cloudimg-amd64.qcow2</code></li> <li>Rename the base file you want to use into <code>ubuntu-22.04-server-cloudimg-amd64.qcow2</code></li> </ul>"},{"location":"scripts/environment/builder/index.html#increase-the-virtual-size-of-the-snapshot-file","title":"Increase the Virtual Size of the Snapshot File","text":"<p>Per default a snapshot file has the virtual size of 32GB. In case you want to increase this just call:</p> <pre><code>increase-virtual-size.bat\n</code></pre> <p>The virtual size is increased by 10GB.</p> <p>You can repeat this procudure if needed.</p>"},{"location":"scripts/environment/builder/index.html#windows-helper-file-wgetbat","title":"Windows Helper File wget.bat","text":"<p>This batch file is used to download the Ubuntu Server image. Internally is uses the Windows PowerShell.</p> <p>Important</p> <p>If using PowerShell is not possible this bat file can alternatively use Wget for Windows - see further instructions in wget.bat.</p>"},{"location":"scripts/environment/builder/index.html#hints","title":"Hints","text":"<p>For the full set of files to run App Build Enviroments see the SDK folder scripts/evironment</p>"},{"location":"scripts/environment/builder/index.html#license","title":"License","text":"<p>SPDX-FileCopyrightText: Bosch Rexroth AG SPDX-License-Identifier: MIT</p>"}]}